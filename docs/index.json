[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "lib/.external-ecmascript.js",
    "static": true,
    "longname": "lib/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "lib/arc.js",
    "content": "/**\n * @fileOverview Allows to create an arc, also called angular sectors\n * @name arc.js\n * @author Florent Grelard\n * @license\n */\n\nimport Polygon from 'ol/geom/Polygon.js';\nimport Point from 'ol/geom/Point.js';\nimport LineString from 'ol/geom/LineString.js';\nimport {angleToVector, vectorToAngle} from './geometry.js';\nimport {euclideanDistance} from './distance.js';\n\n/** Class representing an arc, or circular sectors */\nexport default class Arc {\n\n    /**\n     * Creates an arc, or \"circular sector\" (a line string with n segments)\n     * @param {Array.<number>} center starting position of the arc\n     * @param {number} radius the radius\n     * @param {number} alpha starting angle in degrees (0-360)\n     * @param {number} omega end angle in degrees\n     * @param {number} aspectRatio ratio image width-height\n     */\n    constructor(center, radius, alpha, omega, aspectRatio = 1.5) {\n        /**\n         * apex of the arc\n         * @type {Array<number>}\n         * @public\n         */\n        this.center = center;\n\n        /**\n         * radius of the arc\n         * @type {number}\n         * @public\n         */\n        this.radius = radius;\n\n        /**\n         * starting angle in degrees\n         * @type {number}\n         * @public\n         */\n        this.alpha = alpha;\n\n        /**\n         * end angle in degrees\n         * @type {number}\n         * @public\n         */\n        this.omega = omega;\n\n        /**\n         * ratio width/height of the image from which the arc is computed\n         * @type {number}\n         * @public\n         */\n        this.aspectRatio = aspectRatio;\n\n        /**\n         * geometry of the Arc,\n         * it is computed thanks to the {@link computeGeometry} method\n         * @type {ol.geom.Polygon}\n         * @public\n         */\n        this.geometry = null;\n\n        /**\n         * geometry of the Arc: contains also end points,\n         * it is computed thanks to the {@link computeGeometry} method\n         * @type {Array<ol.geom.Polygon>}\n         * @public\n         */\n        this.fullGeometry = null;\n\n\n    }\n\n    /**\n     * Computes the geometry and assigns it to the geometry attribute of this class\n     */\n    computeGeometry() {\n        var pointList=[];\n        var segments = 100;\n        pointList.push(this.center);\n        var dAngle= segments+1;\n        for(var i=0;i<dAngle;i++)\n        {\n            var Angle = this.alpha - (this.alpha-this.omega)*i/(dAngle-1);\n            var x = this.center[0] + this.radius*Math.cos(Angle*Math.PI/180);\n            var y = this.center[1] + this.radius*Math.sin(Angle*Math.PI/180);\n            var point = [x, y];\n            if (this.center.length > 2) {\n                var fovV = (this.omega - this.alpha) * Math.PI / 180;\n                var fovH = 2 * Math.atan(Math.tan(fovV/2.0)/this.aspectRatio);\n                var z = this.center[2] + (this.radius * Math.tan(fovH));\n                point.push(z);\n            }\n            pointList.push(point);\n        }\n        pointList.push(this.center);\n        var ftArc = new Polygon([pointList]);\n        var ftArcPt0 = new Point(pointList[1]);\n        var ftArcPt1 = new Point(pointList[pointList.length-2]);\n        var ftArcSehne = new LineString([pointList[1], pointList[pointList.length-2]]);\n\n        var arrArc = [ftArc, ftArcPt0, ftArcPt1, ftArcSehne];\n        this.fullGeometry = arrArc;\n        this.geometry = ftArc;\n    }\n\n    /**\n     * Checks the intersection between the arc and a point\n     * @param {Array.<number>} p\n     * @returns {Boolean} whether it intersects\n     */\n    intersects(p) {\n        var norm = euclideanDistance(p, this.center);\n        var vectorP = [(p[0] - this.center[0]) / norm,\n                       (p[1] - this.center[1]) / norm];\n\n        var angle = vectorToAngle(vectorP, [1, 0]) * 180 / Math.PI;\n        if (angle < 0) {\n            angle += 360;\n        }\n        return ((angle >= this.alpha && angle <= this.omega) ||\n                (angle - 360 >= this.alpha && angle -360 <= this.omega));\n    }\n\n    /**\n     * Checks whether other is the same arc as this one\n     * @param {Arc} other other arc\n     * @returns {Boolean} whether it is the same or not\n     */\n    equals(other) {\n        var same_center = (this.center.length == other.center.length) && this.center.every(function(element, index) {\n            return element === other.center[index];\n        });\n        return (same_center &&\n                this.alpha === other.alpha &&\n                this.omega === other.omega);\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/arc.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Arc",
    "memberof": "lib/arc.js",
    "static": true,
    "longname": "lib/arc.js~Arc",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/arc.js",
    "importStyle": "Arc",
    "description": "Class representing an arc, or circular sectors",
    "lineNumber": 15,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/arc.js~Arc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/arc.js~Arc#constructor",
    "access": "public",
    "description": "Creates an arc, or \"circular sector\" (a line string with n segments)",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": "starting position of the arc"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "radius",
        "description": "the radius"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": "starting angle in degrees (0-360)"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "omega",
        "description": "end angle in degrees"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "aspectRatio",
        "description": "ratio image width-height"
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "center",
    "memberof": "lib/arc.js~Arc",
    "static": false,
    "longname": "lib/arc.js~Arc#center",
    "access": "public",
    "description": "apex of the arc",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "radius",
    "memberof": "lib/arc.js~Arc",
    "static": false,
    "longname": "lib/arc.js~Arc#radius",
    "access": "public",
    "description": "radius of the arc",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "alpha",
    "memberof": "lib/arc.js~Arc",
    "static": false,
    "longname": "lib/arc.js~Arc#alpha",
    "access": "public",
    "description": "starting angle in degrees",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "omega",
    "memberof": "lib/arc.js~Arc",
    "static": false,
    "longname": "lib/arc.js~Arc#omega",
    "access": "public",
    "description": "end angle in degrees",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "aspectRatio",
    "memberof": "lib/arc.js~Arc",
    "static": false,
    "longname": "lib/arc.js~Arc#aspectRatio",
    "access": "public",
    "description": "ratio width/height of the image from which the arc is computed",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "geometry",
    "memberof": "lib/arc.js~Arc",
    "static": false,
    "longname": "lib/arc.js~Arc#geometry",
    "access": "public",
    "description": "geometry of the Arc,\nit is computed thanks to the {@link computeGeometry} method",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "fullGeometry",
    "memberof": "lib/arc.js~Arc",
    "static": false,
    "longname": "lib/arc.js~Arc#fullGeometry",
    "access": "public",
    "description": "geometry of the Arc: contains also end points,\nit is computed thanks to the {@link computeGeometry} method",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "Array<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "computeGeometry",
    "memberof": "lib/arc.js~Arc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/arc.js~Arc#computeGeometry",
    "access": "public",
    "description": "Computes the geometry and assigns it to the geometry attribute of this class",
    "lineNumber": 83,
    "params": [],
    "return": null
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "intersects",
    "memberof": "lib/arc.js~Arc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/arc.js~Arc#intersects",
    "access": "public",
    "description": "Checks the intersection between the arc and a point",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} whether it intersects"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "whether it intersects"
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "equals",
    "memberof": "lib/arc.js~Arc",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/arc.js~Arc#equals",
    "access": "public",
    "description": "Checks whether other is the same arc as this one",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} whether it is the same or not"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "other arc"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "whether it is the same or not"
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "lib/astree.js",
    "content": "/**\n * @fileOverview Data structure based on separating planes for angular sectors\n * @name astree.js\n * @author\n * @license\n */\nimport Arc from './arc.js';\nimport {halfLineIntersection, halfLineAndLineIntersection, segmentIntersection} from './lineintersection.js';\nimport {euclideanDistance} from './distance.js';\nimport Plane from './plane.js';\n\n/**\n * Class representing a node inside the tree\n * @deprecated use {@link DualRtree}\n */\nclass Node {\n    /**\n     * Constructor\n     * @param {Object} value the node value\n     */\n    constructor(value)  {\n        /**\n         * value\n         * @type {Object}\n         */\n        this.value = value;\n\n        /**\n         * Children nodes\n         * @type {Array<Node>}\n         */\n        this.children = [];\n\n        /**\n         * Parent node\n         * @type {Node}\n         */\n        this.parent = null;\n    }\n\n    /**\n     * Sets the parent node\n     * @param {Node} node\n     */\n    setParentNode(node) {\n        this.parent = node;\n    }\n\n    /**\n     * Gets the parent node\n     * @returns {Node} node\n     */\n    getParentNode() {\n        return this.parent;\n    }\n\n    /**\n     * Adds a child to the current node\n     * @param {Node} node\n     */\n    addChild(node) {\n        if (!this.hasChild(node)) {\n            node.setParentNode(this);\n            this.children[this.children.length] = node;\n        }\n    }\n\n    /**\n     * Gets the children associated with this node\n     * @returns {Array<Node>} the children\n     */\n    getChildren() {\n        return this.children;\n    }\n\n    /**\n     * Removes children\n     */\n    removeChildren () {\n        this.children = [];\n    }\n\n    /**\n     * Checks whether this node has a given child\n     * @param {Node} child child to test\n     * @returns {Boolean} whether this node has this child\n     */\n    hasChild(child) {\n        var childV = child.value;\n        for (let i = 0; i < this.children.length; i++) {\n            var currentChildV = this.children[i].value;\n            if (currentChildV.alpha && currentChildV.alpha === childV.alpha &&\n                currentChildV.omega && currentChildV.omega === childV.omega &&\n                currentChildV.center && currentChildV.center[0] === childV.center[0] && currentChildV.center[1] === childV.center[1])\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Utility function used to display the node\n     * @returns {string} string representing the node\n     */\n    toString() {\n        var str = this.value.toString();\n        var children = this.children;\n\n        for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n            str += child.toString() + \"\\n\";\n        }\n        str += \"\\n\\n\";\n\n        return str;\n    }\n}\n\n/** Data structure used for angular sectors,\n * based on the lines delimiting each angular sector\n * the delineation is done according to the line which separates\n * the angular sectors into two balanced groups\n * @deprecated use {@link DualRtree}\n */\nexport default class ASTree {\n\n    /**\n     * Constructor\n     * @param {Array<Arc>} sectors the angular sectors\n     * @param {number=} n maximum number of leaves\n     */\n    constructor(sectors, n = 2) {\n        /**\n         * data structure\n         * @type {Node}\n         */\n        this.tree = new Node(new Plane([0,0], [0,0]));\n\n        /**\n         * angular sectors\n         * @type {Array<Arc>}\n         */\n        this.sectors = sectors;\n\n        /**\n         * maximum number of leaves\n         * @type {number}\n         */\n        this.maxNumberLeaves = n;\n\n        /**\n         *  processed sectors\n         * @type {Array<Arc>}\n         */\n        this.addedSectors = [];\n\n        /**\n         * counter\n         * @type {number}\n         */\n        this.cpt = 0;\n    }\n\n\n    /**\n     * Whether two sectors intersect\n     * @param {Arc} sector\n     * @param {Arc} otherSector\n     * @returns {boolean}\n     */\n    sectorsIntersect(sector, otherSector) {\n        var f = sector.center;\n        var la = sector.fullGeometry[1].getFlatCoordinates();\n        var lo = sector.fullGeometry[2].getFlatCoordinates();\n        var fOther = otherSector.center;\n        var laOther = otherSector.fullGeometry[1].getFlatCoordinates();\n        var loOther = otherSector.fullGeometry[2].getFlatCoordinates();\n        var i1 = halfLineIntersection(f[0], f[1],\n                                      la[0], la[1],\n                                      fOther[0], fOther[1],\n                                      laOther[0], laOther[1]);\n        var i2 = halfLineIntersection(f[0], f[1],\n                                      la[0], la[1],\n                                      fOther[0], fOther[1],\n                                      loOther[0], loOther[1]);\n        var i3 = halfLineIntersection(f[0], f[1],\n                                      lo[0], lo[1],\n                                      fOther[0], fOther[1],\n                                      laOther[0], laOther[1]);\n        var i4 = halfLineIntersection(f[0], f[1],\n                                      lo[0], lo[1],\n                                      fOther[0], fOther[1],\n                                      loOther[0], loOther[1]);\n\n        return (i1 || i2 || i3 || i4);\n    }\n\n\n    /**\n     * Intersection indices in the array of sectors\n     * @param {Array<Arc<} sectors\n     * @param {Arc} sector\n     * @param {number} index\n     * @returns {Array<number>} indices\n     */\n    intersectionIndices(sectors, sector, index) {\n        var length = sectors.length;\n        var cpt = 0;\n        var intersectionIndexes = [];\n        for (var i = 0; i < length; i++) {\n            if (i === index) continue;\n            var otherSector = sectors[i];\n            if (this.sectorsIntersect(sector, otherSector)) {\n                intersectionIndexes.push(i);\n            }\n        }\n        return intersectionIndexes;\n    }\n\n    /**\n     * Connected components of intersecting sectors\n     * @param {Array<number>} cc the returned connected component\n     * @param {Array<Arc>} elements the sectors\n     * @param {number} index current index\n     * @param {Array<number>} knownIndices\n     */\n    connectedComponents(cc, elements, index, knownIndices) {\n        if (knownIndices.indexOf(index) >= 0 || index >= elements.length) return;\n        knownIndices.push(index);\n        cc.push(index);\n        var indices = elements[index];\n        for (var i = 0; i < indices.length; i++) {\n            var newIndex = indices[i];\n            this.connectedComponents(cc, elements, newIndex, knownIndices);\n        }\n    }\n\n    /**\n     * Whether two arrays are equal\n     * @param {Array} a\n     * @param {Array} b\n     * @returns {Boolean}\n     */\n    arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length != b.length) return false;\n\n        var copyA = a.slice();\n        copyA.sort();\n        var copyB = b.slice();\n        copyB.sort();\n        for (var i = 0; i < copyA.length; ++i) {\n            if (copyA[i] !== copyB[i]) return false;\n        }\n        return true;\n    }\n\n    /**\n     * Removes the duplicates in an array\n     * @param {Array} cc\n     * @returns {Array} array without duplicates\n     */\n    removeDuplicates(cc) {\n        var that = this;\n        var unique = cc.filter(function(elem, index, self) {\n            return index === cc.findIndex(function(elem2) {\n                return that.arraysEqual(elem, elem2);\n            });\n        });\n        return unique;\n    }\n\n\n    /**\n     * Converts an angle in degrees to a 2D vector\n     * @param {number} angle\n     * @returns {Array<number>} 2D vector\n     */\n    angleToVector(angle) {\n        var rad = angle * Math.PI / 180;\n        var x = Math.cos(rad);\n        var y = Math.sin(rad);\n        return [x, y];\n    }\n\n    /**\n     * Converts an angle to a 2D plane\n     * @param {number} angle\n     * @param {Array<number>} center\n     * @param {Boolean=} isAlpha starting or ending angle of the sector\n     * @returns {Plane}\n     */\n    angleToPlane(angle, center, isAlpha = false) {\n        var vector = this.angleToVector(angle);\n\n        var orthogonalVector = [vector[1], -vector[0]];\n        if (isAlpha)\n            orthogonalVector = [-orthogonalVector[0], -orthogonalVector[1]];\n        var plane = new Plane(center, orthogonalVector);\n        return plane;\n    }\n\n    /**\n     * Complementary plane : plane with normal with reversed direction\n     * @param {Plane} plane\n     * @returns {Plane} complementary\n     */\n    complementaryPlane(plane) {\n        var normal = plane.normal;\n        var minusNormal = [-normal[0], -normal[1]];\n        var center = [plane.center[0] + minusNormal[0],\n                      plane.center[1] + minusNormal[1]];\n        return new Plane(center, minusNormal);\n    }\n\n    /**\n     * Bounding box of sectors\n     * @param {Array<Arc>} cones\n     * @returns {Array<Array<number>>} the bounding box\n     */\n    boundingBox(cones) {\n        var low = [Number.MAX_VALUE, Number.MAX_VALUE];\n        var up = [Number.MIN_VALUE, Number.MIN_VALUE];\n        for (var i = 0; i < cones.length; i++) {\n            var cone = cones[i];\n            var position = cone.position;\n            for (let j = 0; j < 2; j++) {\n                low[j] = (position[j] < low[j]) ? position[j] : low[j];\n                up[j] = (position[j] > up[j]) ? position[j] : up[j];\n            }\n        }\n        return [low, up];\n    }\n\n    /**\n     * Position from direction\n     * @param {Array<Array<number>>} boundingBox\n     * @param {Object} cones\n     * @returns {Array<number>} position\n     */\n    positionFromDirection(boundingBox, cones) {\n        var meanVector = [0,0];\n        for (let i = 0; i < cones.length; i++) {\n            var vector = cones[i].vector;\n            for (let j = 0; j < meanVector.length; j++)\n                meanVector[j] += vector[j];\n        }\n        var norm = euclideanDistance([0,0], meanVector);\n        for (let i = 0; i < meanVector.length; i++) {\n            meanVector[i] /= -norm;\n        }\n\n        var position = boundingBox[0];\n        if (meanVector[0] > 0) {\n            position[0] = boundingBox[1][0];\n        }\n        if (meanVector[1] > 0) {\n            position[1] = boundingBox[1][1];\n        }\n        return position;\n    }\n\n    /**\n     * Returns the connected component with minimum intersecting elements\n     * @param {Array<Array<Object>>} elements\n     * @returns {Array<Object>} elements with min intersection\n     */\n    minimumIntersectingElements(elements) {\n        var minElements = [];\n        var minLength = Number.MAX_VALUE;\n        for (let i = 0; i < elements.length; i++) {\n            if (elements[i].length < minLength)\n                minLength = elements[i].length;\n        }\n        for (let i = 0; i < elements.length; i++) {\n            if (elements[i].length === minLength) {\n                minElements.push(i);\n            }\n        }\n        return minElements;\n    }\n\n    /**\n     * Computes the best separating plane\n     * @param {Array<Arc>} sectors\n     * @param {Node} node\n     * @param {Boolean=} isMinDifference strategy used\n     * @returns {Plane} best plane\n     */\n    separatingPlane(sectors, node, isMinDifference = false) {\n        var absDiff = ((a,b) => Math.abs(a-b));\n        var absDiffPositive = ((a,b) => (a === 0 || b === 0) ? 0 : Math.abs(a-b));\n        var func = (isMinDifference) ? absDiffPositive : absDiff;\n        var difference = (isMinDifference) ? -1 : Number.MAX_VALUE;\n\n        var arrayDiff = [];\n        var bestPlane;\n        var bestSector;\n        for (let i = 0; i < sectors.length; i++) {\n            if (!isMinDifference && difference === 0) break;\n            var sector = sectors[i];\n            for (var property in sector) {\n                if (property === \"alpha\" || property === \"omega\") {\n                    var plane = this.angleToPlane(sector[property], sector.center, property === \"alpha\");\n                    var number = this.differenceAboveBelowPlane(plane, sectors, func);\n                    var found = this.addedSectors.findIndex(function(op) {\n                        return sector.equals(op);\n                    });\n                    found = this.findPlaneInParents(node, plane);\n                    if (!found) {\n                        arrayDiff.push(number);\n                    }\n                    var condition = (isMinDifference) ? number > difference : number < difference;\n                    if (condition && !found) {\n                        difference = number;\n                        bestPlane = plane;\n                        bestSector = sector;\n                    }\n                }\n            }\n        }\n        arrayDiff.sort(function(a,b) {\n            var diff = func(a.l, a.r) - func(b.l, b.r);\n            return diff;\n        });\n        arrayDiff.sort(function(a,b) {\n            var diff = func(a.l, a.r) - func(b.l, b.r);\n            var diffI = func(a.i, b.i);\n            return (diff === 0) ? diffI : 0;\n        });\n        if (arrayDiff.length > 0) {\n            bestPlane = arrayDiff[0].p;\n        }\n        return {plane: bestPlane};\n    }\n\n    /**\n     * Number of sectors above/below the plane\n     * @param {Plane} plane\n     * @param {Array<Arc>} sectors\n     * @param {Function} func function to use\n     * @returns {Object} number of planes above/below plane\n     */\n    differenceAboveBelowPlane(plane, sectors, func) {\n        var numberLeft = 0;\n        var numberRight = 0;\n        var numberIntersection = 0;\n        var left = false, right = false;\n        var plane2 = this.complementaryPlane(plane);\n        for (let i = 0; i < sectors.length; i++) {\n            var sector = sectors[i];\n            if (plane.isAbove(sector.center)) {\n                numberLeft++;\n                left = true;\n            }\n            else if (plane2.isAbove(sector.center)) {\n                // if (!left)\n                numberRight++;\n            }\n            if (plane.isSectorAbove(sector) &&\n                plane2.isSectorAbove(sector, true)){\n                numberIntersection++;\n            }\n\n        }\n        // return func(numberLeft, numberRight);\n        return {p: plane,\n                l: numberLeft,\n                r: numberRight,\n                i: numberIntersection};\n    }\n\n\n    /**\n     * Converts a connected component to an angular sector\n     * @param {Object} cc\n     * @returns {Arc} angular sector\n     */\n    connectedComponentToAngularSector(cc) {\n        var cones = [];\n        var minAlpha = 360;\n        var maxOmega = 0;\n        for (var i = 0; i < cc.length; i++) {\n            var arc = this.sectors[cc[i]];\n            var alpha = arc.alpha;\n            var omega = arc.omega;\n\n            if (alpha < minAlpha) {\n                minAlpha = alpha;\n            }\n\n            if (omega > maxOmega) {\n                maxOmega = omega;\n            }\n\n            var vector = this.angleToVector((alpha + omega) / 2);\n            cones.push({position: arc.center, vector: vector});\n        }\n        var bb = this.boundingBox(cones);\n        var position = this.positionFromDirection(bb, cones);\n        return new Arc(position, 100, minAlpha, maxOmega);\n    }\n\n    /**\n     * Sectors from indices\n     * @param {Array<number>} elements\n     * @returns {Array<Arc>} sectors\n     */\n    sectorsFromIndices(elements) {\n        var sectors = [];\n        for (let i = 0; i < elements.length; i++) {\n            var sector = this.sectors[elements[i]];\n            sectors.push(sector);\n        }\n        return sectors;\n    }\n\n    /**\n     * Function returning the maximum number of intersection for the given sectors\n     * @param {Array<Arc>} sectors\n     * @returns {number} max number of intersection\n     */\n    maxNumberIntersection(sectors) {\n        var min = -1;\n        for (let index in sectors) {\n            var sector = sectors[index];\n            var nb = 0;\n            for (let index2 in sectors) {\n                var otherSector = sectors[index2];\n                if (this.sectorsIntersect(sector, otherSector)) {\n                    nb++;\n                }\n            }\n            if (nb > min) {\n                min = nb;\n            }\n        }\n        return Math.min(min, sectors.length);\n    }\n\n    /**\n     * Number of intersection\n     * @param {Arc} sector\n     * @param {Array<Arc>} sectors\n     * @returns {number} the number of intersection\n     */\n    numberIntersection(sector, sectors) {\n        var nb = 0;\n        for (let sector2 of sectors) {\n            if (this.sectorsIntersect(sector, sector2)) {\n                nb++;\n            }\n        }\n        return nb;\n    }\n\n    /**\n     * Sorting by number of intersection\n     * @param {Array<Arc>} sectors\n     * @returns {Array<Arc>} sorted\n     */\n    sortByNumberIntersection(sectors) {\n        var that = this;\n        sectors.sort(function(a,b) {\n            return that.numberIntersection(a, sectors) - that.numberIntersection(b, sectors);\n        });\n    }\n\n    /**\n     * Computes the max number of self intersections\n     * @param {Array} elements\n     * @returns {number}\n     */\n    maxNumberSelfIntersections(elements) {\n        var max = -1;\n        for (let indices of elements) {\n            var sectors = this.sectorsFromIndices(indices);\n            var nb = this.maxNumberIntersection(sectors);\n            if (nb > max) {\n                max = nb;\n            }\n        }\n        return max+1;\n    }\n\n\n    /**\n     * Computes the data structure\n     * @param {Array} ccSectors\n     * @param {Node} node\n     * @param {Array} cc\n     * @param {number} indices\n     */\n    buildTreeRecursive(ccSectors, node, cc, indices) {\n\n        if (indices.length === 0) return;\n        var currentCCSectors = [];\n        for (let i = 0; i < indices.length; i++) {\n            let cs = ccSectors[indices[i]];\n            currentCCSectors.push(cs);\n        }\n        var firstPlane = this.separatingPlane(currentCCSectors, node).plane;\n        var addedBoth = false;\n        if (indices.length === 1 || !firstPlane || addedBoth) {\n            let currentSectors = [];\n            let ccIndices = [];\n            for (let index of indices) {\n                ccIndices = cc[index];\n                for (let ccIndex of ccIndices) {\n                    currentSectors.push(this.sectors[ccIndex]);\n                }\n            }\n            this.separateIntersectingSectors(currentSectors, node, ccIndices);\n            return;\n        }\n\n        var secondPlane = this.complementaryPlane(firstPlane);\n        var firstChild = new Node(firstPlane);\n        var secondChild = new Node(secondPlane);\n        var firstSectors = [], secondSectors = [];\n        var addedBoth = false;\n        for (let i = 0; i < indices.length; i++) {\n            let index = indices[i];\n            let cc = ccSectors[index];\n            let cptBoth = 0;\n            if (firstPlane.isSectorAbove(cc)) {\n                firstSectors.push(index);\n                cptBoth++;\n            }\n            if (secondPlane.isSectorAbove(cc, true)) {\n                cptBoth++;\n                secondSectors.push(index);\n            }\n            addedBoth = (cptBoth === 2);\n        }\n\n\n\n        if (firstSectors.length > 0 && secondSectors.length > 0) {\n            node.addChild(firstChild);\n            node.addChild(secondChild);\n        } else { //Plane does not allow separation of angular sectors\n            firstChild = node;\n            secondChild = node;\n        }\n\n        this.buildTreeRecursive(ccSectors, firstChild, cc, firstSectors);\n        this.buildTreeRecursive(ccSectors, secondChild, cc, secondSectors);\n    }\n\n    /**\n     * List of parent nodes until root\n     * @param {Node} node\n     * @returns {Array<Node>}\n     */\n    traversedNodes(node) {\n        var parent = node;\n        var parentNodes = [];\n        while (parent) {\n            parentNodes.push(parent.value);\n            parent = parent.parent;\n        }\n        return parentNodes;\n    }\n\n    /**\n     * Checks whether a plane is already existing in a parent\n     * @param {Node} node\n     * @param {Plane} plane\n     * @returns {boolean} found\n     */\n    findPlaneInParents(node, plane) {\n        var parent = node;\n        var plane2 = this.complementaryPlane(plane);\n        var found = false;\n        while (parent && !found) {\n            if (parent.value.equals(plane) || parent.value.equals(plane2))\n                found = true;\n            parent = parent.parent;\n        }\n        return found;\n    }\n\n    /**\n     * Separate sectors which intersect (no proper delineating plane)\n     * @param {Array<Arc>} sectors\n     * @param {Node} node modified node\n     * @param {Array<number>} cc\n     * @returns {void} nothing\n     */\n    separateIntersectingSectors(sectors, node, cc) {\n        // if (this.cpt > 1000) return;\n        // this.cpt++;\n        var that = this;\n        var isLeaf = cc.every(function(element) {\n            return that.addedSectors.indexOf(element) !== -1;\n        });\n\n        if (sectors.length <= this.maxNumberLeaves\n            // || isLeaf\n           ) {\n               var nodes = [];\n               for (var i  = 0; i < sectors.length; i++) {\n                   let child = new Node(sectors[i]);\n                   node.addChild(child);\n               }\n               return;\n           }\n        var bestSeparation = this.separatingPlane(sectors, node, false);\n        var plane = bestSeparation.plane;\n        if (!plane) return;\n        var plane2 = this.complementaryPlane(plane);\n        var splitPlanes = [plane, plane2];\n        for (let j = 0; j < splitPlanes.length; j++) {\n            let splitPlane = splitPlanes[j];\n            let child = new Node(splitPlane);\n            child.setParentNode(node);\n            let subsectors = [];\n\n            for (let k = 0; k < sectors.length; k++) {\n                let sector = sectors[k];\n                let isAbove = splitPlane.isSectorAbove(sector, j === 1);\n                if (isAbove //&& !isAddedSector\n                   ) {\n                       subsectors.push(sector);\n                   }\n            }\n\n            this.separateIntersectingSectors(subsectors, child, cc);\n            node.addChild(child);\n        }\n\n        return;\n    }\n\n    /**\n     * Whether two sectors intersect\n     * @param {Arc} sector\n     * @param {Arc} otherSector\n     * @param {boolean=} first\n     * @returns {boolean|Object} the intersection\n     */\n    positionSectorsIntersect(sector, otherSector, first = true) {\n        var f = sector.center;\n        var la = sector.fullGeometry[1].getFlatCoordinates();\n        var lo = sector.fullGeometry[2].getFlatCoordinates();\n        var s = (first) ? la : lo;\n        var fOther = otherSector.center;\n        var laOther = otherSector.fullGeometry[1].getFlatCoordinates();\n        var loOther = otherSector.fullGeometry[2].getFlatCoordinates();\n        var i1 = halfLineIntersection(f[0], f[1],\n                                      s[0], s[1],\n                                      fOther[0], fOther[1],\n                                      laOther[0], laOther[1]);\n        var i2 = halfLineIntersection(f[0], f[1],\n                                      s[0], s[1],\n                                      fOther[0], fOther[1],\n                                      loOther[0], loOther[1]);\n\n        var i3 = halfLineAndLineIntersection(f[0], f[1],\n                                             s[0], s[1],\n                                             fOther[0], fOther[1],\n                                             loOther[0], loOther[1]\n                                            );\n\n\n        var p1 = (i1) ? [i1.x, i1.y] : f;\n        var p2 = (i2) ? [i2.x, i2.y] : [Number.MAX_VALUE, Number.MAX_VALUE];\n        if (euclideanDistance(p1, f) > euclideanDistance(p2, f)) {\n            var tmp = p1;\n            p1 = p2;\n            p2 = tmp;\n        }\n\n        // if (!i2 && i3) {\n        //     p2 = f.slice();\n        // }\n        return {i1: p1,\n                i2: p2,\n                f: f};\n    }\n\n    /**\n     * Intersections between sectors\n     * @param {Array<Arc>} sectors\n     * @param {Boolean=} first\n     * @returns {Array<Object>} intersections\n     */\n    intersections(sectors, first = true) {\n        var intersections = [];\n        for (var sector of sectors) {\n            var positions = [];\n            for (var otherSector of sectors) {\n                var p = this.positionSectorsIntersect(sector, otherSector, first);\n                positions.push(p);\n            }\n            positions.sort(function(a,b) {\n                return (a[0] !== sector.center[0] && a[1] !== sector.center[1]) ?\n                    (euclideanDistance(a.i1, sector.center) - euclideanDistance(b.i1, sector.center)) :\n                    (euclideanDistance(a.i1, a.i2) - euclideanDistance(b.i1, b.i2));\n            });\n            intersections.push(positions);\n        }\n        return intersections;\n    }\n\n    /**\n     * Locally checks for intersections\n     * @param {Array} intersection\n     * @param {Array<number>} f point\n     * @returns {number}\n     */\n    numberIntersectionLocal(intersection, f) {\n        var max = 0;\n        var shown = false;\n        console.log(\"numberIntersectionLocal\");\n        var indexI = 0;\n        for (var i of intersection) {\n            var indexJ = 0;\n            if (this.arraysEqual(i.i1, f)){\n                indexI++;\n                continue;\n            }\n            var nb = 1;\n            var lowerBound = {i1: i.i1.slice(),\n                              i2: i.i2.slice()};\n\n            for (var j of intersection) {\n                if (indexJ <= indexI) {\n                    indexJ++;\n                    continue;\n                }\n                if (this.arraysEqual(j.i1, f)) continue;\n                if (euclideanDistance(lowerBound.i1, f) <= euclideanDistance(j.i1, f) && euclideanDistance(lowerBound.i2, f) > euclideanDistance(j.i1, f)) {\n                    nb++;\n                    if (nb > max) {\n                        max = nb;\n                    }\n                } else {\n                    nb = 1;\n                    lowerBound.i2 = j.i2.slice();\n                }\n                if (j.i2[0] < lowerBound.i2[0]) {\n                    lowerBound.i2 = j.i2.slice();\n                }\n\n                lowerBound.i1 = j.i1.slice();\n            }\n        }\n\n        return max;\n    }\n\n    /**\n     * Max number local intersection\n     * @param {Array} intersections\n     * @returns {number} max\n     */\n    maxNumberIntersectionLocal(intersections) {\n        var max = 0;\n        var iMax = 0;\n        for (var index in intersections) {\n            var inters = intersections[index].slice();\n            var f = inters[0].f.slice();\n            var nb = this.numberIntersectionLocal(inters, f);\n            if (nb > max) {\n                max = nb;\n                iMax = index;\n            }\n        }\n        return max+1;\n    }\n\n    /**\n     * Loading the data structure\n     * @param {boolean} useHeuristic heuristic for number of leaves\n     */\n    load(useHeuristic = false) {\n        var elements = [];\n        for (let i = 0; i < this.sectors.length; i++) {\n            let arc = this.sectors[i];\n            let intersectingI = this.intersectionIndices(this.sectors, arc, i);\n            elements.push(intersectingI);\n        }\n        var connectedComponents = [];\n        for (let i = 0; i < elements.length; i++) {\n            let cc = [];\n            this.connectedComponents(cc, elements, i, []);\n            connectedComponents.push(cc);\n        }\n        connectedComponents = this.removeDuplicates(connectedComponents);\n        var inters = this.intersections(this.sectors);\n        var inters2 = this.intersections(this.sectors, false);\n        if (useHeuristic) {\n            this.maxNumberLeaves = Math.max(this.maxNumberIntersectionLocal(inters), this.maxNumberIntersectionLocal(inters2));\n            this.maxNumberLeaves = this.maxNumberSelfIntersections(elements);\n            console.log(this.maxNumberLeaves);\n        }\n\n        var connectedSectors = [];\n        for (let i = 0; i < connectedComponents.length; i++) {\n            var connectedSector = this.connectedComponentToAngularSector(connectedComponents[i]);\n            connectedSectors.push(connectedSector);\n        }\n        var length = connectedSectors.length;\n        var indices = [...Array(length).keys()];\n        this.buildTreeRecursive(connectedSectors, this.tree, connectedComponents, indices);\n        console.log(this.tree);\n    }\n\n    /**\n     * Search function recursive\n     * @param {Array<number>} p point\n     * @param {Array<Node>} hits\n     * @param {Node} node current node\n     * @param {Object} number of hits\n     * @returns {void} nothing\n     */\n    searchRecursive(p, hits, node, number) {\n        number.cpt++;\n        var hasChildren = node.children;\n        if (!hasChildren) {return;}\n        var nbChildren = node.children.length;\n        var index = 0;\n        //If it is a sector, return all sectors from this node\n        while (index < nbChildren && node.children[index].value.radius) {\n            var currentChild = node.children[index].value;\n            var found = hits.findIndex(function(a) {\n                return a.center[0] === currentChild.center[0] &&\n                    a.center[1] === currentChild.center[1] &&\n                    a.alpha === currentChild.alpha &&\n                    a.omega === currentChild.omega;\n            });\n            if (found === -1)\n                hits.push(currentChild);\n            index++;\n        }\n\n        if (index >= nbChildren) { // a leaf was reached\n            return;\n        }\n        var childLeft = node.children[index];\n        var childRight = node.children[index + 1];\n        if (childLeft.value.isAbove(p)) {\n            this.searchRecursive(p, hits, childLeft, number);\n        }\n        else {\n            this.searchRecursive(p, hits, childRight, number);\n        }\n\n    }\n\n    /**\n     * Search function\n     * @param {Array<number>} p\n     * @param {Object} number of hits\n     * @returns {Array<Node>} the hits\n     */\n    search(p, number = {cpt : 0}) {\n        var hits = [];\n        this.searchRecursive(p, hits, this.tree, number);\n        return hits;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/astree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "class",
    "name": "Node",
    "memberof": "lib/astree.js",
    "static": true,
    "longname": "lib/astree.js~Node",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/astree.js",
    "importStyle": null,
    "description": "Class representing a node inside the tree",
    "lineNumber": 16,
    "deprecated": "use {@link DualRtree}",
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 65,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the node value"
      }
    ]
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "value",
    "memberof": "lib/astree.js~Node",
    "static": false,
    "longname": "lib/astree.js~Node#value",
    "access": "public",
    "description": "value",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "children",
    "memberof": "lib/astree.js~Node",
    "static": false,
    "longname": "lib/astree.js~Node#children",
    "access": "public",
    "description": "Children nodes",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "parent",
    "memberof": "lib/astree.js~Node",
    "static": false,
    "longname": "lib/astree.js~Node#parent",
    "access": "public",
    "description": "Parent node",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "setParentNode",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#setParentNode",
    "access": "public",
    "description": "Sets the parent node",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "getParentNode",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#getParentNode",
    "access": "public",
    "description": "Gets the parent node",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node} node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "node"
    },
    "params": []
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "addChild",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#addChild",
    "access": "public",
    "description": "Adds a child to the current node",
    "lineNumber": 61,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getChildren",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#getChildren",
    "access": "public",
    "description": "Gets the children associated with this node",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Node>} the children"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": "the children"
    },
    "params": []
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "removeChildren",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#removeChildren",
    "access": "public",
    "description": "Removes children",
    "lineNumber": 79,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "hasChild",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#hasChild",
    "access": "public",
    "description": "Checks whether this node has a given child",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} whether this node has this child"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "child to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "whether this node has this child"
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/astree.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~Node#toString",
    "access": "public",
    "description": "Utility function used to display the node",
    "lineNumber": 104,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} string representing the node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "string representing the node"
    },
    "params": []
  },
  {
    "__docId__": 78,
    "kind": "class",
    "name": "ASTree",
    "memberof": "lib/astree.js",
    "static": true,
    "longname": "lib/astree.js~ASTree",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/astree.js",
    "importStyle": "ASTree",
    "description": "Data structure used for angular sectors,\nbased on the lines delimiting each angular sector\nthe delineation is done according to the line which separates\nthe angular sectors into two balanced groups",
    "lineNumber": 124,
    "deprecated": "use {@link DualRtree}",
    "interface": false
  },
  {
    "__docId__": 79,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 131,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": "the angular sectors"
      },
      {
        "nullable": null,
        "types": [
          "number="
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "maximum number of leaves"
      }
    ]
  },
  {
    "__docId__": 80,
    "kind": "member",
    "name": "tree",
    "memberof": "lib/astree.js~ASTree",
    "static": false,
    "longname": "lib/astree.js~ASTree#tree",
    "access": "public",
    "description": "data structure",
    "lineNumber": 136,
    "type": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "member",
    "name": "sectors",
    "memberof": "lib/astree.js~ASTree",
    "static": false,
    "longname": "lib/astree.js~ASTree#sectors",
    "access": "public",
    "description": "angular sectors",
    "lineNumber": 142,
    "type": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "member",
    "name": "maxNumberLeaves",
    "memberof": "lib/astree.js~ASTree",
    "static": false,
    "longname": "lib/astree.js~ASTree#maxNumberLeaves",
    "access": "public",
    "description": "maximum number of leaves",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "addedSectors",
    "memberof": "lib/astree.js~ASTree",
    "static": false,
    "longname": "lib/astree.js~ASTree#addedSectors",
    "access": "public",
    "description": " processed sectors",
    "lineNumber": 154,
    "type": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "cpt",
    "memberof": "lib/astree.js~ASTree",
    "static": false,
    "longname": "lib/astree.js~ASTree#cpt",
    "access": "public",
    "description": "counter",
    "lineNumber": 160,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "sectorsIntersect",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#sectorsIntersect",
    "access": "public",
    "description": "Whether two sectors intersect",
    "lineNumber": 170,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherSector",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "intersectionIndices",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#intersectionIndices",
    "access": "public",
    "description": "Intersection indices in the array of sectors",
    "lineNumber": 205,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} indices"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc<"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "indices"
    }
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "connectedComponents",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#connectedComponents",
    "access": "public",
    "description": "Connected components of intersecting sectors",
    "lineNumber": 226,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": "the returned connected component"
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": "the sectors"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "current index"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "knownIndices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "arraysEqual",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#arraysEqual",
    "access": "public",
    "description": "Whether two arrays are equal",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "removeDuplicates",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#removeDuplicates",
    "access": "public",
    "description": "Removes the duplicates in an array",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} array without duplicates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array without duplicates"
    }
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "angleToVector",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#angleToVector",
    "access": "public",
    "description": "Converts an angle in degrees to a 2D vector",
    "lineNumber": 279,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} 2D vector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "2D vector"
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "angleToPlane",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#angleToPlane",
    "access": "public",
    "description": "Converts an angle to a 2D plane",
    "lineNumber": 293,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Plane}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isAlpha",
        "description": "starting or ending angle of the sector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Plane"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "complementaryPlane",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#complementaryPlane",
    "access": "public",
    "description": "Complementary plane : plane with normal with reversed direction",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Plane} complementary"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Plane"
        ],
        "spread": false,
        "optional": false,
        "name": "plane",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Plane"
      ],
      "spread": false,
      "description": "complementary"
    }
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "boundingBox",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#boundingBox",
    "access": "public",
    "description": "Bounding box of sectors",
    "lineNumber": 321,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>} the bounding box"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "cones",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "the bounding box"
    }
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "positionFromDirection",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#positionFromDirection",
    "access": "public",
    "description": "Position from direction",
    "lineNumber": 341,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} position"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "boundingBox",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cones",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "position"
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "minimumIntersectingElements",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#minimumIntersectingElements",
    "access": "public",
    "description": "Returns the connected component with minimum intersecting elements",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} elements with min intersection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<Object>>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "elements with min intersection"
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "separatingPlane",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#separatingPlane",
    "access": "public",
    "description": "Computes the best separating plane",
    "lineNumber": 390,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Plane} best plane"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isMinDifference",
        "description": "strategy used"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Plane"
      ],
      "spread": false,
      "description": "best plane"
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "differenceAboveBelowPlane",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#differenceAboveBelowPlane",
    "access": "public",
    "description": "Number of sectors above/below the plane",
    "lineNumber": 444,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} number of planes above/below plane"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Plane"
        ],
        "spread": false,
        "optional": false,
        "name": "plane",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "function to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "number of planes above/below plane"
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "connectedComponentToAngularSector",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#connectedComponentToAngularSector",
    "access": "public",
    "description": "Converts a connected component to an angular sector",
    "lineNumber": 479,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Arc} angular sector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": "angular sector"
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "sectorsFromIndices",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#sectorsFromIndices",
    "access": "public",
    "description": "Sectors from indices",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Arc>} sectors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": "sectors"
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "maxNumberIntersection",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#maxNumberIntersection",
    "access": "public",
    "description": "Function returning the maximum number of intersection for the given sectors",
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} max number of intersection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "max number of intersection"
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "numberIntersection",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#numberIntersection",
    "access": "public",
    "description": "Number of intersection",
    "lineNumber": 547,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the number of intersection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the number of intersection"
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "sortByNumberIntersection",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#sortByNumberIntersection",
    "access": "public",
    "description": "Sorting by number of intersection",
    "lineNumber": 562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Arc>} sorted"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": "sorted"
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "maxNumberSelfIntersections",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#maxNumberSelfIntersections",
    "access": "public",
    "description": "Computes the max number of self intersections",
    "lineNumber": 574,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "buildTreeRecursive",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#buildTreeRecursive",
    "access": "public",
    "description": "Computes the data structure",
    "lineNumber": 594,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "ccSectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "traversedNodes",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#traversedNodes",
    "access": "public",
    "description": "List of parent nodes until root",
    "lineNumber": 656,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Node>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "findPlaneInParents",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#findPlaneInParents",
    "access": "public",
    "description": "Checks whether a plane is already existing in a parent",
    "lineNumber": 672,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Plane"
        ],
        "spread": false,
        "optional": false,
        "name": "plane",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "found"
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "separateIntersectingSectors",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#separateIntersectingSectors",
    "access": "public",
    "description": "Separate sectors which intersect (no proper delineating plane)",
    "lineNumber": 691,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void} nothing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "modified node"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": "nothing"
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "positionSectorsIntersect",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#positionSectorsIntersect",
    "access": "public",
    "description": "Whether two sectors intersect",
    "lineNumber": 743,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean|Object} the intersection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherSector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean",
        "Object"
      ],
      "spread": false,
      "description": "the intersection"
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "intersections",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#intersections",
    "access": "public",
    "description": "Intersections between sectors",
    "lineNumber": 789,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} intersections"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "first",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "intersections"
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "numberIntersectionLocal",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#numberIntersectionLocal",
    "access": "public",
    "description": "Locally checks for intersections",
    "lineNumber": 813,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "intersection",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "point"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "maxNumberIntersectionLocal",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#maxNumberIntersectionLocal",
    "access": "public",
    "description": "Max number local intersection",
    "lineNumber": 859,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} max"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "intersections",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "max"
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "load",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#load",
    "access": "public",
    "description": "Loading the data structure",
    "lineNumber": 878,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useHeuristic",
        "description": "heuristic for number of leaves"
      }
    ],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "method",
    "name": "searchRecursive",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#searchRecursive",
    "access": "public",
    "description": "Search function recursive",
    "lineNumber": 919,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void} nothing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "point"
      },
      {
        "nullable": null,
        "types": [
          "Array<Node>"
        ],
        "spread": false,
        "optional": false,
        "name": "hits",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "current node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "of hits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": "nothing"
    }
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "search",
    "memberof": "lib/astree.js~ASTree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astree.js~ASTree#search",
    "access": "public",
    "description": "Search function",
    "lineNumber": 959,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Node>} the hits"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "of hits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": "the hits"
    }
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "lib/astreesectors.js",
    "content": "/**\n * @fileOverview Data structure based on separating sectors for angular sectors\n * @name astreesectors.js\n * @author Florent Grélard\n * @license\n */\nimport Arc from './arc.js';\nimport {halfLineIntersection, segmentIntersection} from './lineintersection.js';\nimport {euclideanDistance} from './distance.js';\nimport Plane from './plane.js';\nimport Sector from './sector.js';\n\n/**\n * Class representing a node inside the tree\n *  @deprecated use {@link DualRtree}\n */\nclass Node {\n    /**\n     * Constructor\n     * @param {Object} value the node value\n     */\n    constructor(value)  {\n        /**\n         * value\n         * @type {Object}\n         */\n        this.value = value;\n\n        /**\n         * Children nodes\n         * @type {Array<Node>}\n         */\n        this.children = [];\n\n        /**\n         * Parent node\n         * @type {Node}\n         */\n        this.parent = null;\n    }\n\n    /**\n     * Sets the parent node\n     * @param {Node} node\n     */\n    setParentNode(node) {\n        this.parent = node;\n    }\n\n    /**\n     * Gets the parent node\n     * @returns {Node} node\n     */\n    getParentNode() {\n        return this.parent;\n    }\n\n    /**\n     * Adds a child to the current node\n     * @param {Node} node\n     */\n    addChild(node) {\n        if (!this.hasChild(node)) {\n            node.setParentNode(this);\n            this.children[this.children.length] = node;\n        }\n    }\n\n    /**\n     * Gets the children associated with this node\n     * @returns {Array<Node>} the children\n     */\n    getChildren() {\n        return this.children;\n    }\n\n    /**\n     * Removes children\n     */\n    removeChildren () {\n        this.children = [];\n    }\n\n    /**\n     * Checks whether this node has a given child\n     * @param {Node} child child to test\n     * @returns {Boolean} whether this node has this child\n     */\n    hasChild(child) {\n        var childV = child.value;\n        for (let i = 0; i < this.children.length; i++) {\n            var currentChildV = this.children[i].value;\n            if (currentChildV.alpha && currentChildV.alpha === childV.alpha &&\n                currentChildV.omega && currentChildV.omega === childV.omega &&\n                currentChildV.center && currentChildV.center[0] === childV.center[0] && currentChildV.center[1] === childV.center[1])\n                return true;\n        }\n        return false;\n    }\n\n    /**\n     * Utility function used to display the node\n     * @returns {string} string representing the node\n     */\n    toString() {\n        var str = this.value.toString();\n        var children = this.children;\n\n        for (var i = 0; i < children.length; i++) {\n            var child = children[i];\n            str += child.toString() + \"\\n\";\n        }\n        str += \"\\n\\n\";\n\n        return str;\n    }\n}\n\n/**\n * Data structure used for angular sectors,\n * based on the sectors delimiting each angular sector\n * the delineation is done according to the sector which separate\n * the angular sectors into two balanced groups\n * @deprecated use {@link DualRtree}\n */\nexport default class ASTreeSectors {\n    /**\n     * Constructor\n     * @param {Array<Arc>} sectors the angular sectors\n     * @param {number=} n maximum number of leaves\n     */\n    constructor(sectors, n = 2) {\n        /**\n         * data structure\n         * @type {Node}\n         */\n        this.tree = new Node(new Sector([0,0], [0,0], [0,0]));\n\n        /**\n         * angular sectors\n         * @type {Array<Arc>}\n         */\n        this.sectors = sectors;\n\n        /**\n         * maximum number of leaves\n         * @type {number}\n         */\n        this.maxNumberLeaves = n;\n\n        /**\n         *  processed sectors\n         * @type {Array<Arc>}\n         */\n        this.addedSectors = [];\n\n    }\n\n\n    /**\n     * Converts sectors to half planes\n     * @param {Arc} sector\n     * @returns {Plane} half planes\n     */\n    convertArcToHalfPlanes(sector) {\n        var plane1 = this.angleToPlane(sector.alpha, sector.center, true);\n        var plane2 = this.angleToPlane(sector.omega, sector.center);\n        var sectorAsPlanes = new Sector(sector.center, plane1.normal, plane2.normal);\n\n        return sectorAsPlanes;\n    }\n\n\n    /**\n     * Whether two sectors intersect\n     * @param {Arc} sector\n     * @param {Arc} otherSector\n     * @returns {boolean}\n     */\n    sectorsIntersect(sector, otherSector) {\n        var f = sector.center;\n        var la = sector.fullGeometry[1].getFlatCoordinates();\n        var lo = sector.fullGeometry[2].getFlatCoordinates();\n        var fOther = otherSector.center;\n        var laOther = otherSector.fullGeometry[1].getFlatCoordinates();\n        var loOther = otherSector.fullGeometry[2].getFlatCoordinates();\n        var i1 = halfLineIntersection(f[0], f[1],\n                                      la[0], la[1],\n                                      fOther[0], fOther[1],\n                                      laOther[0], laOther[1]);\n        var i2 = halfLineIntersection(f[0], f[1],\n                                      la[0], la[1],\n                                      fOther[0], fOther[1],\n                                      loOther[0], loOther[1]);\n        var i3 = halfLineIntersection(f[0], f[1],\n                                      lo[0], lo[1],\n                                      fOther[0], fOther[1],\n                                      laOther[0], laOther[1]);\n        var i4 = halfLineIntersection(f[0], f[1],\n                                      lo[0], lo[1],\n                                      fOther[0], fOther[1],\n                                      loOther[0], loOther[1]);\n\n        return (i1 || i2 || i3 || i4);\n    }\n\n\n    /**\n     * Intersection indices in the array of sectors\n     * @param {Array<Arc<} sectors\n     * @param {Arc} sector\n     * @param {number} index\n     * @returns {Array<number>} indices\n     */\n    intersectionIndices(sectors, sector, index) {\n        var length = sectors.length;\n        var cpt = 0;\n        var intersectionIndexes = [];\n        for (var i = 0; i < length; i++) {\n            if (i === index) continue;\n            var otherSector = sectors[i];\n            if (this.sectorsIntersect(sector, otherSector)) {\n                intersectionIndexes.push(i);\n            }\n        }\n        return intersectionIndexes;\n    }\n\n    /**\n     * Connected components of intersecting sectors\n     * @param {Array<number>} cc the returned connected component\n     * @param {Array<Arc>} elements the sectors\n     * @param {number} index current index\n     * @param {Array<number>} knownIndices\n     */\n    connectedComponents(cc, elements, index, knownIndices) {\n        if (knownIndices.indexOf(index) >= 0 || index >= elements.length) return;\n        knownIndices.push(index);\n        cc.push(index);\n        var indices = elements[index];\n        for (var i = 0; i < indices.length; i++) {\n            var newIndex = indices[i];\n            this.connectedComponents(cc, elements, newIndex, knownIndices);\n        }\n    }\n\n    /**\n     * Whether two arrays are equal\n     * @param {Array} a\n     * @param {Array} b\n     * @returns {Boolean}\n     */\n    arraysEqual(a, b) {\n        if (a === b) return true;\n        if (a == null || b == null) return false;\n        if (a.length != b.length) return false;\n\n        var copyA = a.slice();\n        copyA.sort();\n        var copyB = b.slice();\n        copyB.sort();\n        for (var i = 0; i < copyA.length; ++i) {\n            if (copyA[i] !== copyB[i]) return false;\n        }\n        return true;\n    }\n\n\n    /**\n     * Removes the duplicates in an array\n     * @param {Array} cc\n     * @returns {Array} array without duplicates\n     */\n    removeDuplicates(cc) {\n        var that = this;\n        var unique = cc.filter(function(elem, index, self) {\n            return index === cc.findIndex(function(elem2) {\n                return that.arraysEqual(elem, elem2);\n            });\n        });\n        return unique;\n    }\n\n    /**\n     * Converts an angle in degrees to a 2D vector\n     * @param {number} angle\n     * @returns {Array<number>} 2D vector\n     */\n    angleToVector(angle) {\n        var rad = angle * Math.PI / 180;\n        var x = Math.cos(rad);\n        var y = Math.sin(rad);\n        return [x, y];\n    }\n\n    /**\n     * Converts an angle to a 2D plane\n     * @param {number} angle\n     * @param {Array<number>} center\n     * @param {Boolean=} isAlpha starting or ending angle of the sector\n     * @returns {Plane}\n     */\n    angleToPlane(angle, center, isAlpha = false) {\n        var vector = this.angleToVector(angle);\n\n        var orthogonalVector = [vector[1], -vector[0]];\n        if (isAlpha)\n            orthogonalVector = [-orthogonalVector[0], -orthogonalVector[1]];\n        var plane = new Plane(center, orthogonalVector);\n        return plane;\n    }\n\n    /**\n     * Complementary sector : sector with normal with reversed direction\n     * @param {Sector} sector\n     * @returns {Sector} complementary sector\n     */\n    complementarySector(sector) {\n        var center = sector.firstPlane.center;\n        var normal1 = sector.firstPlane.normal;\n        var normal2 = sector.secondPlane.normal;\n        var ort1 = [normal1[1], -normal1[0]];\n        var ort2 = [-normal2[1], normal2[0]];\n\n        var dirVector = [(ort1[0] + ort2[0]) / 2, (ort1[1] + ort2[1]) / 2];\n        var minusNormal1 = [-normal1[0], -normal1[1]];\n        var minusNormal2 = [-normal2[0], -normal2[1]];\n        var newCenter = [center[0] - dirVector[0],\n                         center[1] - dirVector[1]];\n        var compSector = new Sector(newCenter, minusNormal1, minusNormal2);\n        return compSector;\n    }\n\n\n    /**\n     * Bounding box of sectors\n     * @param {Array<Arc>} cones\n     * @returns {Array<Array<number>>} the bounding box\n     */\n    boundingBox(cones) {\n        var low = [Number.MAX_VALUE, Number.MAX_VALUE];\n        var up = [Number.MIN_VALUE, Number.MIN_VALUE];\n        for (var i = 0; i < cones.length; i++) {\n            var cone = cones[i];\n            var position = cone.position;\n            for (let j = 0; j < 2; j++) {\n                low[j] = (position[j] < low[j]) ? position[j] : low[j];\n                up[j] = (position[j] > up[j]) ? position[j] : up[j];\n            }\n        }\n        return [low, up];\n    }\n\n\n    /**\n     * Position from direction\n     * @param {Array<Array<number>>} boundingBox\n     * @param {Object} cones\n     * @returns {Array<number>} position\n     */\n    positionFromDirection(boundingBox, cones) {\n        var meanVector = [0,0];\n        for (let i = 0; i < cones.length; i++) {\n            var vector = cones[i].vector;\n            for (let j = 0; j < meanVector.length; j++)\n                meanVector[j] += vector[j];\n        }\n        var norm = euclideanDistance([0,0], meanVector);\n        for (let i = 0; i < meanVector.length; i++) {\n            meanVector[i] /= -norm;\n        }\n\n        var position = boundingBox[0];\n        if (meanVector[0] > 0) {\n            position[0] = boundingBox[1][0];\n        }\n        if (meanVector[1] > 0) {\n            position[1] = boundingBox[1][1];\n        }\n        return position;\n    }\n\n\n    /**\n     * Returns the connected component with minimum intersecting elements\n     * @param {Array<Array<Object>>} elements\n     * @returns {Array<Object>} elements with min intersection\n     */\n    minimumIntersectingElements(elements) {\n        var minElements = [];\n        var minLength = Number.MAX_VALUE;\n        for (let i = 0; i < elements.length; i++) {\n            if (elements[i].length < minLength)\n                minLength = elements[i].length;\n        }\n        for (let i = 0; i < elements.length; i++) {\n            if (elements[i].length === minLength) {\n                minElements.push(i);\n            }\n        }\n        return minElements;\n    }\n\n    /**\n     * List of parent nodes until root\n     * @param {Node} node\n     * @returns {Array<Node>}\n     */\n    traversedNodes(node) {\n        var parent = node;\n        var parentNodes = [];\n        while (parent) {\n            parentNodes.push(parent.value);\n            parent = parent.parent;\n        }\n        return parentNodes;\n    }\n\n    /**\n     * Sectors from indices\n     * @param {Array<number>} elements\n     * @returns {Array<Arc>} sectors\n     */\n    sectorsFromIndices(elements) {\n        var sectors = [];\n        for (let i = 0; i < elements.length; i++) {\n            var sector = this.sectors[elements[i]];\n            sectors.push(sector);\n        }\n        return sectors;\n    }\n\n    /**\n     * Function returning the maximum number of intersection for the given sectors\n     * @param {Array<Arc>} sectors\n     * @returns {number} max number of intersection\n     */\n    maxNumberIntersection(sectors) {\n        var nb = 0;\n        for (let index in sectors) {\n            var sector = sectors[index];\n            for (let index2 in sectors) {\n                if (index2 <= index) continue;\n                var otherSector = sectors[index2];\n                if (this.sectorsIntersect(sector, otherSector)) {\n                    nb++;\n                }\n            }\n        }\n        return nb;\n    }\n\n    /**\n     * Computes the max number of self intersections\n     * @param {Array} elements\n     * @returns {number}\n     */\n    maxNumberSelfIntersections(elements) {\n        var max = -1;\n        for (let indices of elements) {\n            var sectors = this.sectorsFromIndices(indices);\n            var nb = this.maxNumberIntersection(sectors);\n            if (nb > max) {\n                max = nb;\n            }\n        }\n        return max;\n    }\n\n    /**\n     * Checks whether a sector is already existing in a parent\n     * @param {Node} node\n     * @param {Arc} sector\n     * @returns {boolean} found\n     */\n    findSectorInParents(node, sector) {\n        var parent = node;\n        var plane2 = this.complementarySector(sector);\n        var found = false;\n        while (parent && !found) {\n            if (parent.value.equals(sector) || parent.value.equals(plane2))\n                found = true;\n            parent = parent.parent;\n        }\n        return found;\n    }\n\n    /**\n     * Computes the best separating sector\n     * @param {Array<Arc>} sectors\n     * @param {Node} node\n     * @param {Boolean=} isMinDifference strategy used\n     * @returns {Arc} best sector\n     */\n    separatingPlane(sectors, node, isMinDifference = false) {\n        var absDiff = ((a,b) => Math.abs(a-b));\n        var absDiffPositive = ((a,b) => (a === 0 || b === 0) ? 0 : Math.abs(a-b));\n        var func = (isMinDifference) ? absDiffPositive : absDiff;\n        var difference = (isMinDifference) ? -1 : Number.MAX_VALUE;\n\n        var parents = this.traversedNodes(node);\n\n        var bestSector;\n        for (let i = 0; i < sectors.length; i++) {\n            if (!isMinDifference && difference === 0) break;\n            var sector = sectors[i];\n            var sectorPlane = this.convertArcToHalfPlanes(sector);\n            var number = this.differenceAboveBelowPlane(sectorPlane, sectors, func);\n            var found = this.addedSectors.findIndex(function(op) {\n                return sectorPlane.equals(op);\n            });\n            found = this.findSectorInParents(node, sectorPlane);\n            var condition = (isMinDifference) ? number > difference : number < difference;\n            if (condition && !found) {\n                difference = number;\n                bestSector = sectorPlane;\n            }\n\n        }\n        console.log(node.value);\n        console.log(difference);\n        if (bestSector)\n            this.addedSectors.push(bestSector);\n        return bestSector;\n    }\n\n    /**\n     * Number of sectors above/below the sector\n     * @param {Arc} sector\n     * @param {Array<Arc>} sectors\n     * @param {Function} func function to use\n     * @returns {Object} number of planes above/below sector\n     */\n    differenceAboveBelowPlane(sector, sectors, func = Math.abs) {\n        var numberLeft = 0;\n        var numberRight = 0;\n        var compSector = this.complementarySector(sector);\n        for (let i = 0; i < sectors.length; i++) {\n            var otherSector = sectors[i];\n            var left = false, right = false;\n            if (sector.isSectorAbove(otherSector)) {\n                left = true;\n            }\n            if (compSector.isSectorAboveComplementary(otherSector)) {\n                right = true;\n            }\n            if (left  // && !right\n               )\n                numberLeft++;\n            if (right  // && !left\n               )\n                numberRight++;\n        }\n        return func(numberLeft, numberRight);\n    }\n\n    /**\n     * Converts a connected component to an angular sector\n     * @param {Object} cc\n     * @returns {Arc} angular sector\n     */\n    connectedComponentToSector(cc) {\n        var cones = [];\n        var minAlpha = 360;\n        var maxOmega = 0;\n        for (var i = 0; i < cc.length; i++) {\n            var arc = this.sectors[cc[i]];\n            var alpha = arc.alpha;\n            var omega = arc.omega;\n\n            if (alpha < minAlpha) {\n                minAlpha = alpha;\n            }\n\n            if (omega > maxOmega) {\n                maxOmega = omega;\n            }\n\n            var vector = this.angleToVector((alpha + omega) / 2);\n            cones.push({position: arc.center, vector: vector});\n        }\n        var bb = this.boundingBox(cones);\n        var position = this.positionFromDirection(bb, cones);\n        return new Arc(position, 100, minAlpha, maxOmega);\n    }\n\n    /**\n     * Computes the data structure\n     * @param {Array} ccSectors\n     * @param {Node} node\n     * @param {Array} cc\n     * @param {number} indices\n     */\n    buildTreeRecursive(ccSectors, node, cc, indices) {\n        if (indices.length === 0) return;\n        var currentCCSectors = [];\n        for (let i = 0; i < indices.length; i++) {\n            let cs = ccSectors[indices[i]];\n            currentCCSectors.push(cs);\n        }\n        var sector = ccSectors[indices[0]];\n        var sectorHalfPlanes = this.convertArcToHalfPlanes(sector);\n        var secondSector = this.complementarySector(sectorHalfPlanes);\n        var firstChild = new Node(sectorHalfPlanes);\n        var secondChild = new Node(secondSector);\n\n        if (indices.length === 1 || !sector) {\n            let currentSectors = [];\n            let ccIndices = [];\n            for (let index of indices) {\n                ccIndices = cc[index];\n                for (let ccIndex of ccIndices) {\n                    currentSectors.push(this.sectors[ccIndex]);\n                }\n            }\n\n            this.separateIntersectingSectors(currentSectors, node, ccIndices);\n            return;\n        }\n        node.addChild(firstChild);\n        node.addChild(secondChild);\n\n        var secondIndices = indices.slice(1,indices.length);\n        this.buildTreeRecursive(ccSectors, firstChild, cc,  [indices[0]]);\n        this.buildTreeRecursive(ccSectors, secondChild, cc, secondIndices);\n    }\n\n\n    /**\n     * Depth of a node\n     * @param {Node} node\n     * @returns {number} depth\n     */\n    depth(node) {\n        var parent = node;\n        var nb = 0;\n        while (parent) {\n            parent = parent.parent;\n            nb++;\n        }\n        return nb;\n    }\n\n    /**\n     * Separate sectors which intersect (no proper delineating sector)\n     * @param {Array<Arc>} sectors\n     * @param {Node} node modified node\n     * @param {Array<number>} cc\n     * @returns {void} nothing\n     */\n    separateIntersectingSectors(sectors, node, cc) {\n        var that = this;\n        var isLeaf = cc.every(function(element) {\n            return that.addedSectors.indexOf(element) !== -1;\n        });\n        var currentSector = node.value;\n        var bestSeparation = this.separatingPlane(sectors, node, false);\n        if (currentSector.firstPlane.normal[0] !== 0 && currentSector.firstPlane.normal[1] !== 0 && this.maxNumberLeaves <= this.depth(node) // - node.children.length\n            || !bestSeparation) {\n            var nodes = [];\n            for (var i  = 0; i < sectors.length; i++) {\n                let child = new Node(sectors[i]);\n                node.addChild(child);\n            }\n            return;\n        }\n\n        var compBestSeparation = this.complementarySector(bestSeparation);\n        var splitPlanes = [bestSeparation, compBestSeparation];\n        for (let j = 0; j < splitPlanes.length; j++) {\n            let splitPlane = splitPlanes[j];\n            let child = new Node(splitPlane);\n            child.setParentNode(node);\n            // Left child\n            // if (j === 0) {\n            //     child.addChild(new Node(associatedSector));\n            // }\n            let subsectors = [];\n            for (let k = 0; k < sectors.length; k++) {\n                let sector = sectors[k];\n                var isAbove;\n                if (j === 0)\n                    isAbove = splitPlane.isSectorAbove(sector);\n                else\n                    isAbove = splitPlane.isSectorAboveComplementary(sector);\n                // let isAddedSector = (sector.equals(bestSeparation));\n                if (isAbove //&& !isAddedSector\n                   ) {\n                       subsectors.push(sector);\n                   }\n            }\n\n            this.separateIntersectingSectors(subsectors, child, cc);\n            node.addChild(child);\n        }\n\n        return;\n    }\n\n    /**\n     * Number of intersections with half planes\n     * @param {Arc} sector\n     * @param {Array<Arc>} sectors\n     * @returns {number} number of intersections\n     */\n    numberIntersectionHalfPlanes(sector, sectors) {\n        var nb = 0;\n        for (let sector2 of sectors) {\n            if (sector.isSectorAbove(sector2)) {\n                nb++;\n            }\n        }\n        return nb;\n\n    }\n\n    /**\n     * Number intersection\n     * @param {Arc} sector\n     * @param {Array<Arc>} sectors\n     * @returns {number} nb\n     */\n    numberIntersection(sector, sectors) {\n        var nb = 0;\n        for (let sector2 of sectors) {\n            if (this.sectorsIntersect(sector, sector2)) {\n                nb++;\n            }\n        }\n        return nb;\n    }\n\n    /**\n     * Sorting by number intersecting\n     * @param {Array<Arc>} sectors\n     * @returns {void} sorted sectors\n     */\n    sortByNumberInTersection(sectors) {\n        var that = this;\n        sectors.sort(function(a,b) {\n            return that.numberIntersection(a, sectors) - that.numberIntersection(b, sectors);\n        });\n    }\n\n    /**\n     * Intersections between sectors\n     * @param {Arc} sector\n     * @param {Array<Arc>} sectors\n     * @returns {Array<Object>} intersections\n     */\n    intersections(sector, sectors) {\n        var inters = [];\n        inters.push(sector);\n        for (let sector2 of sectors) {\n            if (this.sectorsIntersect(sector, sector2)) {\n                inters.push(sector2);\n            }\n        }\n        return inters;\n    }\n\n\n    /**\n     * Build tree main function\n     * @param {Node} node\n     * @param {Array<Arc>} sectors\n     */\n    buildTreeIntersection(node, sectors) {\n        if (sectors.length === 0) return;\n        var sector = sectors.shift();\n        var inters = this.intersections(sector, sectors);\n        var converted = this.convertArcToHalfPlanes(sector);\n        var convertedComp = this.complementarySector(converted);\n        var child = new Node(converted);\n        child.setParentNode(node);\n        for (let s of inters) {\n            child.addChild(new Node(s));\n        }\n        var child2 = new Node(convertedComp);\n        node.addChild(child);\n        node.addChild(child2);\n        this.buildTreeIntersection(child2, sectors);\n    }\n\n    /**\n     * Loading the data structure\n     * @param {boolean} useHeuristic heuristic for number of leaves\n     */\n    load(useHeuristic = false) {\n        this.sortByNumberIntersection(this.sectors);\n        var index = 0;\n        this.buildTreeIntersection(this.tree, this.sectors);\n        // var elements = [];\n        // for (let i = 0; i < this.sectors.length; i++) {\n        //     let arc = this.sectors[i];\n        //     let intersectingI = this.intersectionIndices(this.sectors, arc, i);\n        //     elements.push(intersectingI);\n        // }\n        // if (useHeuristic) {\n        //     var nb = this.maxNumberSelfIntersections(elements);\n        //     this.nb = nb;\n        // }\n\n        // var connectedComponents = [];\n        // for (let i = 0; i < elements.length; i++) {\n        //     let cc = [];\n        //     this.connectedComponents(cc, elements, i, []);\n        //     connectedComponents.push(cc);\n        // }\n        // connectedComponents = this.removeDuplicates(connectedComponents);\n\n        // connectedComponents.sort(function(a,b) {\n        //     return (a.length - b.length);\n        // });\n\n        // var connectedSectors = [];\n        // for (let i = 0; i < connectedComponents.length; i++) {\n        //     var connectedSector = this.connectedComponentToSector(connectedComponents[i]);\n        //     connectedSectors.push(connectedSector);\n        // }\n\n        // var length = connectedSectors.length;\n        // var indices = [...Array(length).keys()];\n        // this.buildTreeRecursive(connectedSectors, this.tree, connectedComponents, indices);\n        // console.log(this.tree);\n    }\n\n    /**\n     * Search function recursive\n     * @param {Array<number>} p point\n     * @param {Array<Node>} hits\n     * @param {Node} node current node\n     * @param {Object} number of hits\n     * @returns {void} nothing\n     */\n    searchRecursive(p, hits, node, number) {\n        number++;\n        var hasChildren = node.children;\n        if (!hasChildren) return number;\n        var nbChildren = node.children.length;\n        var index = 0;\n        //If it is a sector, return all sectors from this node\n        while (index < nbChildren && node.children[index].value.radius) {\n            var currentChild = node.children[index].value;\n            var found = hits.findIndex(function(a) {\n                return a.center[0] === currentChild.center[0] &&\n                    a.center[1] === currentChild.center[1] &&\n                    a.alpha === currentChild.alpha &&\n                    a.omega === currentChild.omega;\n            });\n            if (found === -1)\n                hits.push(currentChild);\n            index++;\n        }\n\n        if (index >= nbChildren) { // a leaf was reached\n            return number;\n        }\n        var childLeft = node.children[index];\n        var childRight = node.children[index + 1];\n        if (childLeft.value.isAbove(p)) {\n            number = this.searchRecursive(p, hits, childLeft, number);\n        }\n        else {\n            number = this.searchRecursive(p, hits, childRight, number);\n        }\n        return number;\n    }\n\n    /**\n     * Search function\n     * @param {Array<number>} p\n     * @returns {Array<Node>} the hits\n     */\n    search(p) {\n        console.log(\"search\");\n        var hits = [];\n        var number = 0;\n        number = this.searchRecursive(p, hits, this.tree, number);\n        console.log(number);\n        return hits;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/astreesectors.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "Node",
    "memberof": "lib/astreesectors.js",
    "static": true,
    "longname": "lib/astreesectors.js~Node",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/astreesectors.js",
    "importStyle": null,
    "description": "Class representing a node inside the tree",
    "lineNumber": 17,
    "deprecated": "use {@link DualRtree}",
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 119,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "the node value"
      }
    ]
  },
  {
    "__docId__": 120,
    "kind": "member",
    "name": "value",
    "memberof": "lib/astreesectors.js~Node",
    "static": false,
    "longname": "lib/astreesectors.js~Node#value",
    "access": "public",
    "description": "value",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 121,
    "kind": "member",
    "name": "children",
    "memberof": "lib/astreesectors.js~Node",
    "static": false,
    "longname": "lib/astreesectors.js~Node#children",
    "access": "public",
    "description": "Children nodes",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "member",
    "name": "parent",
    "memberof": "lib/astreesectors.js~Node",
    "static": false,
    "longname": "lib/astreesectors.js~Node#parent",
    "access": "public",
    "description": "Parent node",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 123,
    "kind": "method",
    "name": "setParentNode",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#setParentNode",
    "access": "public",
    "description": "Sets the parent node",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "getParentNode",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#getParentNode",
    "access": "public",
    "description": "Gets the parent node",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node} node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "node"
    },
    "params": []
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "addChild",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#addChild",
    "access": "public",
    "description": "Adds a child to the current node",
    "lineNumber": 62,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "getChildren",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#getChildren",
    "access": "public",
    "description": "Gets the children associated with this node",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Node>} the children"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": "the children"
    },
    "params": []
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "removeChildren",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#removeChildren",
    "access": "public",
    "description": "Removes children",
    "lineNumber": 80,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "hasChild",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#hasChild",
    "access": "public",
    "description": "Checks whether this node has a given child",
    "lineNumber": 89,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} whether this node has this child"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "child to test"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "whether this node has this child"
    }
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/astreesectors.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~Node#toString",
    "access": "public",
    "description": "Utility function used to display the node",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} string representing the node"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "string representing the node"
    },
    "params": []
  },
  {
    "__docId__": 132,
    "kind": "class",
    "name": "ASTreeSectors",
    "memberof": "lib/astreesectors.js",
    "static": true,
    "longname": "lib/astreesectors.js~ASTreeSectors",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/astreesectors.js",
    "importStyle": "ASTreeSectors",
    "description": "Data structure used for angular sectors,\nbased on the sectors delimiting each angular sector\nthe delineation is done according to the sector which separate\nthe angular sectors into two balanced groups",
    "lineNumber": 126,
    "deprecated": "use {@link DualRtree}",
    "interface": false
  },
  {
    "__docId__": 133,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": "the angular sectors"
      },
      {
        "nullable": null,
        "types": [
          "number="
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "maximum number of leaves"
      }
    ]
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "tree",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#tree",
    "access": "public",
    "description": "data structure",
    "lineNumber": 137,
    "type": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "sectors",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#sectors",
    "access": "public",
    "description": "angular sectors",
    "lineNumber": 143,
    "type": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "maxNumberLeaves",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#maxNumberLeaves",
    "access": "public",
    "description": "maximum number of leaves",
    "lineNumber": 149,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "addedSectors",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#addedSectors",
    "access": "public",
    "description": " processed sectors",
    "lineNumber": 155,
    "type": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "method",
    "name": "convertArcToHalfPlanes",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#convertArcToHalfPlanes",
    "access": "public",
    "description": "Converts sectors to half planes",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Plane} half planes"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Plane"
      ],
      "spread": false,
      "description": "half planes"
    }
  },
  {
    "__docId__": 139,
    "kind": "method",
    "name": "sectorsIntersect",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#sectorsIntersect",
    "access": "public",
    "description": "Whether two sectors intersect",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "otherSector",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 140,
    "kind": "method",
    "name": "intersectionIndices",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#intersectionIndices",
    "access": "public",
    "description": "Intersection indices in the array of sectors",
    "lineNumber": 215,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} indices"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc<"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "indices"
    }
  },
  {
    "__docId__": 141,
    "kind": "method",
    "name": "connectedComponents",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#connectedComponents",
    "access": "public",
    "description": "Connected components of intersecting sectors",
    "lineNumber": 236,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": "the returned connected component"
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": "the sectors"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "index",
        "description": "current index"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "knownIndices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "arraysEqual",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#arraysEqual",
    "access": "public",
    "description": "Whether two arrays are equal",
    "lineNumber": 253,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 143,
    "kind": "method",
    "name": "removeDuplicates",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#removeDuplicates",
    "access": "public",
    "description": "Removes the duplicates in an array",
    "lineNumber": 274,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} array without duplicates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array without duplicates"
    }
  },
  {
    "__docId__": 144,
    "kind": "method",
    "name": "angleToVector",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#angleToVector",
    "access": "public",
    "description": "Converts an angle in degrees to a 2D vector",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} 2D vector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "2D vector"
    }
  },
  {
    "__docId__": 145,
    "kind": "method",
    "name": "angleToPlane",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#angleToPlane",
    "access": "public",
    "description": "Converts an angle to a 2D plane",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Plane}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isAlpha",
        "description": "starting or ending angle of the sector"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Plane"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 146,
    "kind": "method",
    "name": "complementarySector",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#complementarySector",
    "access": "public",
    "description": "Complementary sector : sector with normal with reversed direction",
    "lineNumber": 318,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Sector} complementary sector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Sector"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Sector"
      ],
      "spread": false,
      "description": "complementary sector"
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "boundingBox",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#boundingBox",
    "access": "public",
    "description": "Bounding box of sectors",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>} the bounding box"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "cones",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "the bounding box"
    }
  },
  {
    "__docId__": 148,
    "kind": "method",
    "name": "positionFromDirection",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#positionFromDirection",
    "access": "public",
    "description": "Position from direction",
    "lineNumber": 361,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} position"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<number>>"
        ],
        "spread": false,
        "optional": false,
        "name": "boundingBox",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cones",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "position"
    }
  },
  {
    "__docId__": 149,
    "kind": "method",
    "name": "minimumIntersectingElements",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#minimumIntersectingElements",
    "access": "public",
    "description": "Returns the connected component with minimum intersecting elements",
    "lineNumber": 389,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} elements with min intersection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Array<Object>>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "elements with min intersection"
    }
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "traversedNodes",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#traversedNodes",
    "access": "public",
    "description": "List of parent nodes until root",
    "lineNumber": 409,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Node>}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 151,
    "kind": "method",
    "name": "sectorsFromIndices",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#sectorsFromIndices",
    "access": "public",
    "description": "Sectors from indices",
    "lineNumber": 424,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Arc>} sectors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": "sectors"
    }
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "maxNumberIntersection",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#maxNumberIntersection",
    "access": "public",
    "description": "Function returning the maximum number of intersection for the given sectors",
    "lineNumber": 438,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} max number of intersection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "max number of intersection"
    }
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "maxNumberSelfIntersections",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#maxNumberSelfIntersections",
    "access": "public",
    "description": "Computes the max number of self intersections",
    "lineNumber": 458,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "elements",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "findSectorInParents",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#findSectorInParents",
    "access": "public",
    "description": "Checks whether a sector is already existing in a parent",
    "lineNumber": 476,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} found"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "found"
    }
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "separatingPlane",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#separatingPlane",
    "access": "public",
    "description": "Computes the best separating sector",
    "lineNumber": 495,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Arc} best sector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isMinDifference",
        "description": "strategy used"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": "best sector"
    }
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "differenceAboveBelowPlane",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#differenceAboveBelowPlane",
    "access": "public",
    "description": "Number of sectors above/below the sector",
    "lineNumber": 534,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} number of planes above/below sector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "func",
        "description": "function to use"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "number of planes above/below sector"
    }
  },
  {
    "__docId__": 157,
    "kind": "method",
    "name": "connectedComponentToSector",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#connectedComponentToSector",
    "access": "public",
    "description": "Converts a connected component to an angular sector",
    "lineNumber": 562,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Arc} angular sector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": "angular sector"
    }
  },
  {
    "__docId__": 158,
    "kind": "method",
    "name": "buildTreeRecursive",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#buildTreeRecursive",
    "access": "public",
    "description": "Computes the data structure",
    "lineNumber": 594,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "ccSectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 159,
    "kind": "method",
    "name": "depth",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#depth",
    "access": "public",
    "description": "Depth of a node",
    "lineNumber": 634,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} depth"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "depth"
    }
  },
  {
    "__docId__": 160,
    "kind": "method",
    "name": "separateIntersectingSectors",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#separateIntersectingSectors",
    "access": "public",
    "description": "Separate sectors which intersect (no proper delineating sector)",
    "lineNumber": 651,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void} nothing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "modified node"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "cc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": "nothing"
    }
  },
  {
    "__docId__": 161,
    "kind": "method",
    "name": "numberIntersectionHalfPlanes",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#numberIntersectionHalfPlanes",
    "access": "public",
    "description": "Number of intersections with half planes",
    "lineNumber": 706,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} number of intersections"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "number of intersections"
    }
  },
  {
    "__docId__": 162,
    "kind": "method",
    "name": "numberIntersection",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#numberIntersection",
    "access": "public",
    "description": "Number intersection",
    "lineNumber": 723,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} nb"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "nb"
    }
  },
  {
    "__docId__": 163,
    "kind": "method",
    "name": "sortByNumberInTersection",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#sortByNumberInTersection",
    "access": "public",
    "description": "Sorting by number intersecting",
    "lineNumber": 738,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void} sorted sectors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": "sorted sectors"
    }
  },
  {
    "__docId__": 164,
    "kind": "method",
    "name": "intersections",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#intersections",
    "access": "public",
    "description": "Intersections between sectors",
    "lineNumber": 751,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} intersections"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "sector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "intersections"
    }
  },
  {
    "__docId__": 165,
    "kind": "method",
    "name": "buildTreeIntersection",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#buildTreeIntersection",
    "access": "public",
    "description": "Build tree main function",
    "lineNumber": 768,
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "sectors",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "load",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#load",
    "access": "public",
    "description": "Loading the data structure",
    "lineNumber": 789,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "useHeuristic",
        "description": "heuristic for number of leaves"
      }
    ],
    "return": null
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "searchRecursive",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#searchRecursive",
    "access": "public",
    "description": "Search function recursive",
    "lineNumber": 836,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{void} nothing"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "point"
      },
      {
        "nullable": null,
        "types": [
          "Array<Node>"
        ],
        "spread": false,
        "optional": false,
        "name": "hits",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "current node"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "of hits"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "void"
      ],
      "spread": false,
      "description": "nothing"
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "search",
    "memberof": "lib/astreesectors.js~ASTreeSectors",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/astreesectors.js~ASTreeSectors#search",
    "access": "public",
    "description": "Search function",
    "lineNumber": 875,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Node>} the hits"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Node>"
      ],
      "spread": false,
      "description": "the hits"
    }
  },
  {
    "__docId__": 169,
    "kind": "file",
    "name": "lib/cluster.js",
    "content": "/**\n * @fileOverview Cluster for pictures\n * @name cluster.js\n * @author Florent Grélard\n * @license\n */\nimport Picture from './picture';\n\n/** Base class which allows to cluster pictures */\nexport default class Cluster {\n    /**\n     * Constructor\n     * @param {Array.<Picture>} pictures\n     * @param {String} label\n     */\n    constructor(pictures, label) {\n        /**\n         * pictures pertaining to this cluster\n         * @type {Array.<Picture>}\n         */\n        this.pictures = pictures;\n\n        /**\n         * a label characterizing this cluster\n         * @type {string|number}\n         */\n        this.label = label;\n    }\n\n    /**\n     * Checks whether a picture is inside this cluster\n     * @param {Picture} picture\n     * @returns {Boolean} true if picture inside cluster, false else\n     */\n    hasPicture(picture) {\n        for (var keyP in this.pictures) {\n            var filename = this.pictures[keyP].getProperties().filename;\n            if (filename === picture.filename)\n                return true;\n        }\n        return false;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/cluster.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 170,
    "kind": "class",
    "name": "Cluster",
    "memberof": "lib/cluster.js",
    "static": true,
    "longname": "lib/cluster.js~Cluster",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/cluster.js",
    "importStyle": "Cluster",
    "description": "Base class which allows to cluster pictures",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 171,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/cluster.js~Cluster",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/cluster.js~Cluster#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Picture>"
        ],
        "spread": false,
        "optional": false,
        "name": "pictures",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "pictures",
    "memberof": "lib/cluster.js~Cluster",
    "static": false,
    "longname": "lib/cluster.js~Cluster#pictures",
    "access": "public",
    "description": "pictures pertaining to this cluster",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Array.<Picture>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "label",
    "memberof": "lib/cluster.js~Cluster",
    "static": false,
    "longname": "lib/cluster.js~Cluster#label",
    "access": "public",
    "description": "a label characterizing this cluster",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string",
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "method",
    "name": "hasPicture",
    "memberof": "lib/cluster.js~Cluster",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/cluster.js~Cluster#hasPicture",
    "access": "public",
    "description": "Checks whether a picture is inside this cluster",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} true if picture inside cluster, false else"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Picture"
        ],
        "spread": false,
        "optional": false,
        "name": "picture",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "true if picture inside cluster, false else"
    }
  },
  {
    "__docId__": 175,
    "kind": "file",
    "name": "lib/clustering/clusteringstrategy.js",
    "content": "/**\n * @fileOverview Interface for cluster computation\n * @name clusteringstrategy.js\n * @author Florent Grelard\n * @license\n */\n\n/** Interface (abstract class) for cluster computation\n */\nexport default class ClusteringStrategy {\n\n    /**\n     * Deleted constructor\n     * @throws {TypeError} if called from abstract class\n     */\n    constructor() {\n        if (this.constructor === ClusteringStrategy) {\n            throw new TypeError(\"Can not construct abstract class.\");\n        }\n        if (this.computeClusters === ClusteringStrategy.prototype.computeClusters) {\n            throw new TypeError(\"Please implement abstract method.\");\n        }\n    }\n\n    /**\n     * Compute clusters\n     * @throws {TypeError} if called from abstract class\n     */\n    computeClusters() {\n        throw new TypeError(\"Do not call abstract method computeClusters from child.\");\n    }\n};\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/clustering/clusteringstrategy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 176,
    "kind": "class",
    "name": "ClusteringStrategy",
    "memberof": "lib/clustering/clusteringstrategy.js",
    "static": true,
    "longname": "lib/clustering/clusteringstrategy.js~ClusteringStrategy",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/clustering/clusteringstrategy.js",
    "importStyle": "ClusteringStrategy",
    "description": "Interface (abstract class) for cluster computation",
    "lineNumber": 10,
    "interface": false
  },
  {
    "__docId__": 177,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/clustering/clusteringstrategy.js~ClusteringStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/clustering/clusteringstrategy.js~ClusteringStrategy#constructor",
    "access": "public",
    "description": "Deleted constructor",
    "lineNumber": 16,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "if called from abstract class"
      }
    ]
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "computeClusters",
    "memberof": "lib/clustering/clusteringstrategy.js~ClusteringStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/clustering/clusteringstrategy.js~ClusteringStrategy#computeClusters",
    "access": "public",
    "description": "Compute clusters",
    "lineNumber": 29,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "if called from abstract class"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "file",
    "name": "lib/clustering/dendrogramstrategy.js",
    "content": "/**\n * @fileOverview Dendrogram based on distance from several pictures\n * @name dendrogramstrategy.js\n * @author Florent Grélard\n * @license\n */\nimport {euclideanDistance} from '../distance';\nimport Cluster from '../cluster';\nimport ClusteringStrategy from './clusteringstrategy';\n\n\n/** Distance strategy to cluster pictures\n */\nexport default class DistanceStrategy extends ClusteringStrategy {\n\n\n    /**\n     * Overrides constructor\n     * @param {Array<Picture>} pictures\n     */\n    constructor(pictures) {\n        super();\n        /**\n         * pictures\n         * @type {Array<Picture>}\n         */\n        this.pictures = pictures;\n    }\n\n\n    /**\n     * Dendrogram strategy\n     * @returns {Array<Cluster>} array of clusters\n     */\n    computeClusters() {\n        var indexes = [];\n        var clusters = [];\n        for (var i = 0; i < this.pictures.length; i++) {\n            var pic1 = this.pictures[i];\n            var pos1 = pic1.getProperties().position;\n            var [minImage, minDistance, index] = this.getClosestImage(pos1);\n            var pics = [];\n            // if (indexes.indexOf(i) === -1) {\n            //     indexes.push(i);\n            //     pics.push(pic1);\n            // }\n            // if (indexes.indexOf(index) === -1) {\n            //     indexes.push(index);\n            //     pics.push(minImage);\n            // }\n            pics.push(pic1);\n            pics.push(minImage);\n            var cluster = new Cluster(pics, minDistance);\n            clusters.push(cluster);\n        }\n        clusters.sort(function(a,b) {\n            return a.label < b.label;\n        });\n        return clusters;\n    }\n\n    /**\n     * Closest image from a given image\n     * @param {Array<number>} pos1\n     * @returns {Array<Object>} closest images, and distance\n     */\n    getClosestImage(pos1) {\n        var minDistance = Number.MAX_VALUE;\n        var minImage;\n        var index = 0;\n        for (var j = 0; j < this.pictures.length; j++) {\n            var image2 = this.pictures[j];\n            var pos2 = image2.getProperties().position;\n            var d12 = euclideanDistance(pos1, pos2);\n            if (d12 > 0 && d12 < minDistance) {\n                minDistance = d12;\n                minImage = image2;\n                index = j;\n            }\n        }\n        return [minImage, minDistance, index];\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/clustering/dendrogramstrategy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 180,
    "kind": "class",
    "name": "DistanceStrategy",
    "memberof": "lib/clustering/dendrogramstrategy.js",
    "static": true,
    "longname": "lib/clustering/dendrogramstrategy.js~DistanceStrategy",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/clustering/dendrogramstrategy.js",
    "importStyle": "DistanceStrategy",
    "description": "Distance strategy to cluster pictures",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "lib/clustering/clusteringstrategy.js~ClusteringStrategy"
    ]
  },
  {
    "__docId__": 181,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/clustering/dendrogramstrategy.js~DistanceStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/clustering/dendrogramstrategy.js~DistanceStrategy#constructor",
    "access": "public",
    "description": "Overrides constructor",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Picture>"
        ],
        "spread": false,
        "optional": false,
        "name": "pictures",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "pictures",
    "memberof": "lib/clustering/dendrogramstrategy.js~DistanceStrategy",
    "static": false,
    "longname": "lib/clustering/dendrogramstrategy.js~DistanceStrategy#pictures",
    "access": "public",
    "description": "pictures",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Array<Picture>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "computeClusters",
    "memberof": "lib/clustering/dendrogramstrategy.js~DistanceStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/clustering/dendrogramstrategy.js~DistanceStrategy#computeClusters",
    "access": "public",
    "description": "Dendrogram strategy",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Cluster>} array of clusters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Cluster>"
      ],
      "spread": false,
      "description": "array of clusters"
    },
    "params": []
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getClosestImage",
    "memberof": "lib/clustering/dendrogramstrategy.js~DistanceStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/clustering/dendrogramstrategy.js~DistanceStrategy#getClosestImage",
    "access": "public",
    "description": "Closest image from a given image",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} closest images, and distance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "pos1",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "closest images, and distance"
    }
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "lib/clustering/distancestrategy.js",
    "content": "/**\n * @fileOverview Distance Strategy\n * @name distancestrategy.js\n * @author Florent Grélard\n * @license\n */\nimport {euclideanDistance} from '../distance';\nimport Cluster from '../cluster';\nimport ClusteringStrategy from './clusteringstrategy';\n\n/** Distance strategy based on distance\n */\nexport default class DistanceStrategy extends ClusteringStrategy {\n\n\n    /**\n     * Overrides constructor\n     * @param {Array<Picture>} pictures\n     */\n    constructor(pictures) {\n        super();\n        /**\n         * pictures\n         * @type {Array<Picture>}\n         */\n        this.pictures = pictures;\n    }\n\n    /**\n     * Distance strategy: pictures contained in the arc of a givben picture\n     * @returns {Array<Cluster>} array of clusters\n     */\n    computeClusters() {\n        var indexes = [];\n        var clusters = [];\n        for (var i = 0; i < this.pictures.length; i++) {\n            if (indexes.indexOf(i) !== -1) continue;\n            var pic1 = this.pictures[i];\n            var pos1 = pic1.getProperties().position;\n            var r1 = pic1.getProperties().arc.radius;\n            var cluster = [];\n            for (var j = i+1; j < this.pictures.length; j++) {\n                if (indexes.indexOf(j) !== -1) continue;\n                var pic2 = this.pictures[j];\n                var pos2 = pic2.getProperties().position;\n                if (euclideanDistance(pos1, pos2) < r1) {\n                    indexes.push(j);\n                    cluster.push(pic2);\n                }\n            }\n            cluster.push(pic1);\n            clusters.push(new Cluster(cluster, pic1.getProperties().filename));\n        }\n        return clusters;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/clustering/distancestrategy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "class",
    "name": "DistanceStrategy",
    "memberof": "lib/clustering/distancestrategy.js",
    "static": true,
    "longname": "lib/clustering/distancestrategy.js~DistanceStrategy",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/clustering/distancestrategy.js",
    "importStyle": "DistanceStrategy",
    "description": "Distance strategy based on distance",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "lib/clustering/clusteringstrategy.js~ClusteringStrategy"
    ]
  },
  {
    "__docId__": 187,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/clustering/distancestrategy.js~DistanceStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/clustering/distancestrategy.js~DistanceStrategy#constructor",
    "access": "public",
    "description": "Overrides constructor",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Picture>"
        ],
        "spread": false,
        "optional": false,
        "name": "pictures",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "pictures",
    "memberof": "lib/clustering/distancestrategy.js~DistanceStrategy",
    "static": false,
    "longname": "lib/clustering/distancestrategy.js~DistanceStrategy#pictures",
    "access": "public",
    "description": "pictures",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Array<Picture>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "computeClusters",
    "memberof": "lib/clustering/distancestrategy.js~DistanceStrategy",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/clustering/distancestrategy.js~DistanceStrategy#computeClusters",
    "access": "public",
    "description": "Distance strategy: pictures contained in the arc of a givben picture",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Cluster>} array of clusters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Cluster>"
      ],
      "spread": false,
      "description": "array of clusters"
    },
    "params": []
  },
  {
    "__docId__": 190,
    "kind": "file",
    "name": "lib/datastetienne.js",
    "content": "/**\n * @fileOverview Isovist from real data St-Etienne\n * @name datastetienne.js\n * @author Florent Grélard\n * @license\n */\nimport Arc from './arc.js';\n\n/**\n * Sectors from months 02/2018 through 05/2018\n * @returns {Array<Arc>}  sectors\n */\nexport function sectorsStEtienne2345_r1500() {\n    var arcs = [new Arc([485538.20312252047,5692058.519576657],100, 86.94999999999997, 86.95),\n                new Arc([485168.37503644056,5690734.161387739],100, 115.58, 116.2102),\n                new Arc([485168.37503644056,5690734.161387739],100, 124.3367, 126.8656),\n                new Arc([485168.37503644056,5690734.161387739],100, 131.584, 131.7843),\n                new Arc([485168.37503644056,5690734.161387739],100, 132.3996, 134.0642),\n                new Arc([485168.37503644056,5690734.161387739],100, 137.2439, 140.0202),\n                new Arc([485168.37503644056,5690734.161387739],100, 141.8345, 144.067),\n                new Arc([485168.37503644056,5690734.161387739],100, 145.7131, 145.7323),\n                new Arc([485168.37503644056,5690734.161387739],100, 148.7939, 149.0292),\n                new Arc([485168.37503644056,5690734.161387739],100, 149.4426, 149.9998),\n                new Arc([485168.37503644056,5690734.161387739],100, 153.8889, 155.0113),\n                new Arc([485168.37503644056,5690734.161387739],100, 124.3367, 126.8656),\n                new Arc([485168.37503644056,5690734.161387739],100, 131.584, 131.7843),\n                new Arc([485168.37503644056,5690734.161387739],100, 132.3996, 134.0642),\n                new Arc([485168.37503644056,5690734.161387739],100, 137.2439, 140.0202),\n                new Arc([485168.37503644056,5690734.161387739],100, 141.8345, 144.067),\n                new Arc([485168.37503644056,5690734.161387739],100, 145.7131, 145.7323),\n                new Arc([485168.37503644056,5690734.161387739],100, 148.7939, 149.0292),\n                new Arc([485168.37503644056,5690734.161387739],100, 149.4426, 149.9998),\n                new Arc([485168.37503644056,5690734.161387739],100, 153.8889, 155.0113),\n                new Arc([485168.37503644056,5690734.161387739],100, 157.4755, 157.4982),\n                new Arc([485156.31542493793,5690754.432948245],100, 131.7623, 131.967),\n                new Arc([485156.31542493793,5690754.432948245],100, 132.592, 133.1519),\n                new Arc([485156.31542493793,5690754.432948245],100, 134.3131, 134.3905),\n                new Arc([485156.31542493793,5690754.432948245],100, 137.6653, 140.596),\n                new Arc([485156.31542493793,5690754.432948245],100, 142.4735, 144.7548),\n                new Arc([485156.31542493793,5690754.432948245],100, 150.2531, 150.4568),\n                new Arc([485156.31542493793,5690754.432948245],100, 154.4235, 155.5284),\n                new Arc([485156.31542493793,5690754.432948245],100, 164.5691, 164.5722),\n                new Arc([485156.31542493793,5690754.432948245],100, 167.17, 167.17000000000002),\n                new Arc([485014.0738533688,5690961.55804501],100, 124.9912, 125.7438),\n                new Arc([485014.0738533688,5690961.55804501],100, 136.2725, 136.7754),\n                new Arc([485014.0738533688,5690961.55804501],100, 136.9894, 137.0905),\n                new Arc([485014.0738533688,5690961.55804501],100, 142.584, 144.5994),\n                new Arc([485014.0738533688,5690961.55804501],100, 145.525, 145.5495),\n                new Arc([485014.0738533688,5690961.55804501],100, 146.7173, 147.9646),\n                new Arc([485014.0738533688,5690961.55804501],100, 150.9315, 151.4462),\n                new Arc([485014.0738533688,5690961.55804501],100, 152.7058, 152.7075),\n                new Arc([485014.0738533688,5690961.55804501],100, 153.5792, 153.6125),\n                new Arc([485014.0738533688,5690961.55804501],100, 155.8464, 155.9246),\n                new Arc([485014.0738533688,5690961.55804501],100, 136.2725, 136.7754),\n                new Arc([485014.0738533688,5690961.55804501],100, 136.9894, 137.0905),\n                new Arc([485014.0738533688,5690961.55804501],100, 142.584, 144.5994),\n                new Arc([485014.0738533688,5690961.55804501],100, 145.525, 145.5495),\n                new Arc([485014.0738533688,5690961.55804501],100, 146.7173, 147.9646),\n                new Arc([485014.0738533688,5690961.55804501],100, 150.9315, 151.4462),\n                new Arc([485014.0738533688,5690961.55804501],100, 152.7058, 152.7075),\n                new Arc([485014.0738533688,5690961.55804501],100, 153.5792, 153.6125),\n                new Arc([485014.0738533688,5690961.55804501],100, 155.8464, 155.9246),\n                new Arc([485014.0738533688,5690961.55804501],100, 160.7256, 161.4189),\n                new Arc([485014.0738533688,5690961.55804501],100, 174.0385, 174.0771),\n                new Arc([485014.0738533688,5690961.55804501],100, 175.4026, 175.41),\n                new Arc([484325.4391144893,5691660.089717437],100, 118.82999999999997, 118.83),\n                new Arc([484325.4391144893,5691660.089717437],100, 127.6683, 128.2392),\n                new Arc([484325.4391144893,5691660.089717437],100, 135.5018, 135.8781),\n                new Arc([484325.4391144893,5691660.089717437],100, 142.2552, 144.0219),\n                new Arc([484325.4391144893,5691660.089717437],100, 158.1129, 158.2047),\n                new Arc([484325.4391144893,5691660.089717437],100, 160.4881, 160.6486),\n                new Arc([484325.4391144893,5691660.089717437],100, 161.2959, 161.3652),\n                new Arc([486294.2479974915,5695593.157446534],100, 207.98999999999998, 207.99),\n                new Arc([482634.3105168548,5691842.113547831],100, 68.90999999999998, 68.91),\n                new Arc([482634.3105168548,5691842.113547831],100, 70.6277, 70.7682),\n                new Arc([481340.5306571908,5690449.923688883],100, 40.53999999999998, 40.54),\n                new Arc([481344.85974849935,5690455.2117497325],100, 62.28999999999998, 62.29),\n                new Arc([481332.8001369967,5690458.737125367],100, 34.9949, 35.3332),\n                new Arc([481332.8001369967,5690458.737125367],100, 51.91, 51.91000000000001),\n                new Arc([481327.2341624571,5690478.126716156],100, 79.53999999999998, 79.54),\n                new Arc([481366.19598423474,5690453.449062436],100, 106.4018, 106.7411),\n                new Arc([481366.19598423474,5690453.449062436],100, 125.91, 125.91000000000003),\n                new Arc([481867.75213442004,5690880.02950945],100, 63.59999999999998, 63.6),\n                new Arc([481867.75213442004,5690880.02950945],100, 67.8648, 69.2277),\n                new Arc([481867.75213442004,5690880.02950945],100, 69.8118, 69.8281),\n                new Arc([481856.9294061485,5690881.351587892],100, 29.71999999999998, 29.72),\n                new Arc([481856.9294061485,5690881.351587892],100, 67.4458, 68.803),\n                new Arc([481836.5208328363,5690877.826045827],100, 74.4362, 74.8056),\n                new Arc([481923.4118798167,5691043.528023928],100, 13.909999999999979, 13.91),\n                new Arc([481923.4118798167,5691043.528023928],100, 36.4949, 36.4957),\n                new Arc([481937.94525778136,5691061.596776155],100, 66.2019, 66.2057),\n                new Arc([481937.94525778136,5691061.596776155],100, 68.3549, 68.4935),\n                new Arc([481926.81330870197,5691063.800285021],100, 51.6286, 55.9099),\n                new Arc([481926.81330870197,5691063.800285021],100, 67.1952, 67.1968),\n                new Arc([481926.81330870197,5691063.800285021],100, 67.9174, 68.0166),\n                new Arc([481926.81330870197,5691063.800285021],100, 74.5717, 74.587),\n                new Arc([481926.81330870197,5691063.800285021],100, 76.3358, 77.0448),\n                new Arc([481926.81330870197,5691063.800285021],100, 78.9202, 81.7348),\n                new Arc([481926.81330870197,5691063.800285021],100, 82.8205, 82.892),\n                new Arc([481926.81330870197,5691063.800285021],100, 83.3738, 83.8344),\n                new Arc([481926.81330870197,5691063.800285021],100, 86.7075, 86.86000000000001),\n                new Arc([485038.81151798955,5693282.568258294],100, 86.7633, 86.7731),\n                new Arc([485038.81151798955,5693282.568258294],100, 97.004, 97.0049),\n                new Arc([485038.81151798955,5693282.568258294],100, 103.3591, 103.3596),\n                new Arc([485038.81151798955,5693282.568258294],100, 109.2191, 109.2505),\n                new Arc([485038.81151798955,5693282.568258294],100, 110.0021, 110.1976),\n                new Arc([485038.81151798955,5693282.568258294],100, 111.4514, 113.1316),\n                new Arc([485038.81151798955,5693282.568258294],100, 113.9604, 114.0282),\n                new Arc([485038.81151798955,5693282.568258294],100, 118.22, 118.22000000000003),\n                new Arc([485033.5547642576,5693279.041770288],100, 37.4407, 37.5644),\n                new Arc([485033.5547642576,5693279.041770288],100, 41.7863, 56.1376),\n                new Arc([485033.5547642576,5693279.041770288],100, 56.7664, 56.7822),\n                new Arc([485033.5547642576,5693279.041770288],100, 56.8095, 57.7034),\n                new Arc([485033.5547642576,5693279.041770288],100, 60.5475, 60.5641),\n                new Arc([485033.5547642576,5693279.041770288],100, 63.6733, 63.7877),\n                new Arc([485033.5547642576,5693279.041770288],100, 65.6951, 66.1),\n                new Arc([485033.5547642576,5693279.041770288],100, 67.9981, 68.0122),\n                new Arc([485033.5547642576,5693279.041770288],100, 68.0122, 68.0277),\n                new Arc([485047.160479799,5693275.515283671],100, 52.979999999999976, 56.0063),\n                new Arc([485047.160479799,5693275.515283671],100, 56.4587, 56.6543),\n                new Arc([485047.160479799,5693275.515283671],100, 57.2914, 57.3073),\n                new Arc([485047.160479799,5693275.515283671],100, 57.332, 58.2183),\n                new Arc([485047.160479799,5693275.515283671],100, 61.0872, 61.1128),\n                new Arc([485047.160479799,5693275.515283671],100, 61.3315, 61.3464),\n                new Arc([485047.160479799,5693275.515283671],100, 64.238, 64.37),\n                new Arc([485047.160479799,5693275.515283671],100, 66.3539, 66.6278),\n                new Arc([485047.160479799,5693275.515283671],100, 66.8363, 66.8469),\n                new Arc([485047.160479799,5693275.515283671],100, 68.6591, 68.6756),\n                new Arc([485047.160479799,5693275.515283671],100, 70.4219, 70.4295),\n                new Arc([485047.160479799,5693275.515283671],100, 71.0172, 71.0201),\n                new Arc([485047.160479799,5693275.515283671],100, 88.387, 88.4097),\n                new Arc([485805.06067961664,5687021.714330306],100, 21.869999999999994, 21.87),\n                new Arc([485805.06067961664,5687021.714330306],100, 25.3803, 25.4226),\n                new Arc([485805.06067961664,5687021.714330306],100, 42.535, 42.5429),\n                new Arc([485805.06067961664,5687021.714330306],100, 44.5454, 44.5629),\n                new Arc([485805.06067961664,5687021.714330306],100, 51.9315, 51.9421),\n                new Arc([485805.06067961664,5687021.714330306],100, 52.427, 53.502),\n                new Arc([485805.06067961664,5687021.714330306],100, 64.4446, 64.495),\n                new Arc([485794.237951345,5687027.881373262],100, 344.8461, 345.139),\n                new Arc([485794.237951345,5687027.881373262],100, 347.9192, 347.9249),\n                new Arc([485794.237951345,5687027.881373262],100, 347.9249, 347.9277),\n                new Arc([485794.237951345,5687027.881373262],100, 349.4121, 349.4266),\n                new Arc([485794.237951345,5687027.881373262],100, 359.258, 359.3533),\n                new Arc([485794.237951345,5687027.881373262],100, 363.8971, 364.1258),\n                new Arc([485794.237951345,5687027.881373262],100, 365.7045, 365.7202),\n                new Arc([485794.237951345,5687027.881373262],100, 367.9865, 368.3289),\n                new Arc([485794.237951345,5687027.881373262],100, 372.9689, 373.0028),\n                new Arc([485794.237951345,5687027.881373262],100, 379.5981, 379.6016),\n                new Arc([485794.237951345,5687027.881373262],100, 396.1595, 396.163),\n                new Arc([485754.34846714407,5687069.729276909],100, 47.93999999999998, 47.94),\n                new Arc([485754.34846714407,5687069.729276909],100, 48.9938, 49.0527),\n                new Arc([485754.34846714407,5687069.729276909],100, 49.532, 50.1272),\n                new Arc([485754.34846714407,5687069.729276909],100, 78.3279, 80.1924),\n                new Arc([485754.34846714407,5687069.729276909],100, 98.3793, 98.3983),\n                new Arc([485754.34846714407,5687069.729276909],100, 99.0364, 100.0596),\n                new Arc([485754.34846714407,5687069.729276909],100, 101.6787, 102.33999999999997),\n                new Arc([485680.75391489745,5687138.888872629],100, 341.7141, 341.9417),\n                new Arc([485680.75391489745,5687138.888872629],100, 342.6939, 344.4318),\n                new Arc([485680.75391489745,5687138.888872629],100, 344.6055, 345.998),\n                new Arc([485680.75391489745,5687138.888872629],100, 354.203, 354.8044),\n                new Arc([485719.715736675,5687104.529261495],100, 342.567, 342.8128),\n                new Arc([485719.715736675,5687104.529261495],100, 343.6658, 345.4972),\n                new Arc([485719.715736675,5687104.529261495],100, 345.675, 347.1257),\n                new Arc([485719.715736675,5687104.529261495],100, 355.499, 356.115),\n                new Arc([485719.715736675,5687104.529261495],100, 358.3182, 358.3362),\n                new Arc([485719.715736675,5687104.529261495],100, 360.6192, 360.949),\n                new Arc([485719.715736675,5687104.529261495],100, 362.6226, 362.6259),\n                new Arc([485719.715736675,5687104.529261495],100, 364.433, 364.4874),\n                new Arc([485719.715736675,5687104.529261495],100, 366.055, 366.1138),\n                new Arc([485771.97405318636,5687117.303973321],100, 115.7297, 116.2024),\n                new Arc([485771.97405318636,5687117.303973321],100, 117.0163, 117.4636),\n                new Arc([485771.97405318636,5687117.303973321],100, 118.2837, 124.2719),\n                new Arc([485771.97405318636,5687117.303973321],100, 129.0761, 129.895),\n                new Arc([485771.97405318636,5687117.303973321],100, 130.3318, 130.6762),\n                new Arc([485771.97405318636,5687117.303973321],100, 133.4118, 165.8119),\n                new Arc([485818.666395158,5687115.9824505625],100, 228.07000000000002, 228.3737),\n                new Arc([485818.666395158,5687115.9824505625],100, 231.5013, 238.776),\n                new Arc([485818.666395158,5687115.9824505625],100, 278.6861, 278.7423),\n                new Arc([485844.0225013942,5687118.184988598],100, 10.929999999999996, 10.93),\n                new Arc([485844.0225013942,5687118.184988598],100, 44.5984, 44.5996),\n                new Arc([485844.0225013942,5687118.184988598],100, 50.267, 50.2793),\n                new Arc([485844.0225013942,5687118.184988598],100, 50.6232, 50.6577),\n                new Arc([485844.0225013942,5687118.184988598],100, 51.177, 51.2403),\n                new Arc([485844.0225013942,5687118.184988598],100, 51.7786, 52.124),\n                new Arc([485871.233932477,5687121.268542762],100, 137.90000000000003, 167.1164),\n                new Arc([485871.233932477,5687121.268542762],100, 168.3951, 173.7621),\n                new Arc([485871.233932477,5687121.268542762],100, 175.4969, 177.1477),\n                new Arc([485871.233932477,5687121.268542762],100, 177.9722, 178.0599),\n                new Arc([485871.233932477,5687121.268542762],100, 179.6947, 189.7637),\n                new Arc([485871.233932477,5687121.268542762],100, 191.8428, 192.30000000000004),\n                new Arc([485900.30068840634,5687126.554638081],100, 213.08, 214.1076),\n                new Arc([485900.30068840634,5687126.554638081],100, 216.5217, 216.9501),\n                new Arc([485900.30068840634,5687126.554638081],100, 249.2841, 249.4026),\n                new Arc([485907.41276698484,5687132.721753233],100, 201.45000000000002, 206.3441),\n                new Arc([485907.41276698484,5687132.721753233],100, 208.8114, 214.2187),\n                new Arc([485907.41276698484,5687132.721753233],100, 216.5946, 217.0141),\n                new Arc([485907.41276698484,5687132.721753233],100, 248.2389, 248.7693),\n                new Arc([485907.41276698484,5687132.721753233],100, 250.9639, 251.0124),\n                new Arc([485916.6893912176,5687126.995146166],100, 46.8204, 46.8617),\n                new Arc([485916.6893912176,5687126.995146166],100, 53.9181, 55.0055),\n                new Arc([485916.6893912176,5687126.995146166],100, 68.1796, 68.1983),\n                new Arc([485916.6893912176,5687126.995146166],100, 88.3544, 89.1683),\n                new Arc([485972.658357422,5687152.1041427795],100, 47.3383, 47.3439),\n                new Arc([485972.658357422,5687152.1041427795],100, 55.0248, 55.0257),\n                new Arc([485972.658357422,5687152.1041427795],100, 55.2295, 56.7104),\n                new Arc([485972.658357422,5687152.1041427795],100, 61.8788, 62.0329),\n                new Arc([485972.658357422,5687152.1041427795],100, 71.3006, 71.3045),\n                new Arc([485972.658357422,5687152.1041427795],100, 91.4846, 92.5572),\n                new Arc([485992.7577099263,5687167.521982605],100, 62.4652, 62.681),\n                new Arc([485992.7577099263,5687167.521982605],100, 62.8428, 62.849),\n                new Arc([485992.7577099263,5687167.521982605],100, 93.035, 93.8419),\n                new Arc([485992.7577099263,5687167.521982605],100, 108.3521, 108.5427),\n                new Arc([485992.7577099263,5687167.521982605],100, 109.436, 110.6231),\n                new Arc([485992.7577099263,5687167.521982605],100, 111.86, 111.86000000000001),\n                new Arc([486034.50251897384,5687177.213209796],100, 198.36, 205.1829),\n                new Arc([486034.50251897384,5687177.213209796],100, 207.2579, 211.4087),\n                new Arc([486034.50251897384,5687177.213209796],100, 231.3068, 232.9365),\n                new Arc([486034.50251897384,5687177.213209796],100, 234.6134, 236.8099),\n                new Arc([485881.12899832526,5687071.931803573],100, 139.95, 165.0277),\n                new Arc([485881.12899832526,5687071.931803573],100, 166.2971, 169.5887),\n                new Arc([485881.12899832526,5687071.931803573],100, 171.1724, 175.222),\n                new Arc([485881.12899832526,5687071.931803573],100, 177.021, 187.2268),\n                new Arc([485881.12899832526,5687071.931803573],100, 189.2489, 194.35),\n                new Arc([485881.12899832526,5687071.931803573],100, 42.3811, 42.4037),\n                new Arc([485881.12899832526,5687071.931803573],100, 51.0926, 51.1441),\n                new Arc([485881.12899832526,5687071.931803573],100, 54.0641, 55.1294),\n                new Arc([485881.12899832526,5687071.931803573],100, 67.3722, 67.3888),\n                new Arc([485881.12899832526,5687071.931803573],100, 78.7492, 80.49000000000002),\n                new Arc([485881.12899832526,5687071.931803573],100, 170.76999999999998, 170.77),\n                new Arc([485881.12899832526,5687071.931803573],100, 171.1724, 175.222),\n                new Arc([485881.12899832526,5687071.931803573],100, 177.021, 187.2268),\n                new Arc([485881.12899832526,5687071.931803573],100, 189.2489, 202.4635),\n                new Arc([485881.12899832526,5687071.931803573],100, 205.1578, 208.6866),\n                new Arc([485866.9048411684,5687081.182421462],100, 189.844, 203.7494),\n                new Arc([485866.9048411684,5687081.182421462],100, 206.4729, 212.0082),\n                new Arc([485866.9048411684,5687081.182421462],100, 243.32, 243.32000000000002),\n                new Arc([485861.9573082442,5687083.825456901],100, 191.17000000000002, 204.1573),\n                new Arc([485861.9573082442,5687083.825456901],100, 206.8919, 212.553),\n                new Arc([485861.9573082442,5687083.825456901],100, 215.2089, 215.7256),\n                new Arc([485861.9573082442,5687083.825456901],100, 216.6067, 216.6161),\n                new Arc([485861.9573082442,5687083.825456901],100, 243.3903, 243.6561),\n                new Arc([485861.9573082442,5687083.825456901],100, 245.57, 245.57000000000002),\n                new Arc([487075.64897869865,5693928.37980361],100, 108.05, 108.3761),\n                new Arc([487075.64897869865,5693928.37980361],100, 115.1415, 115.233),\n                new Arc([487060.49715911853,5693924.412218386],100, 110.99, 110.99000000000001),\n                new Arc([487057.7141718486,5693928.37980361],100, 81.0044, 81.1563),\n                new Arc([487062.0432631573,5693930.143175378],100, 358.15999999999997, 358.16),\n                new Arc([487157.283271947,5693960.561393176],100, 297.97999999999996, 297.98),\n                new Arc([487157.283271947,5693960.561393176],100, 307.47999999999996, 307.48),\n                new Arc([487216.03522542125,5693964.088149761],100, 268.46999999999997, 269.4142),\n                new Arc([487216.03522542125,5693964.088149761],100, 293.9588, 294.4762),\n                new Arc([487463.7210924364,5693853.436824404],100, 338.96999999999997, 338.97),\n                new Arc([487463.7210924364,5693853.436824404],100, 367.188, 367.3093),\n                new Arc([487440.8387526621,5693830.954053027],100, 381.3022, 381.4677),\n                new Arc([487489.07719867263,5693855.641020715],100, 236.32999999999998, 236.33),\n                new Arc([487464.3395340518,5693853.877663621],100, 244.9081, 246.9971),\n                new Arc([487464.3395340518,5693853.877663621],100, 253.2549, 253.5957),\n                new Arc([487464.3395340518,5693853.877663621],100, 264.2474, 264.6603),\n                new Arc([487588.33707796317,5693913.391157557],100, 278.1915, 278.531),\n                new Arc([487588.33707796317,5693913.391157557],100, 282.9398, 283.0663),\n                new Arc([487450.73381851043,5693354.420754052],100, 219.17999999999998, 219.18),\n                new Arc([487441.76641508547,5693339.873883185],100, 271.85999999999996, 271.86),\n                new Arc([487472.99771666917,5693331.939236315],100, 178.57999999999998, 178.58),\n                new Arc([487459.3920011277,5693290.062049926],100, 165.07999999999998, 165.08),\n                new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n                new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n                new Arc([487481.03745767084,5692892.018156244],100, 78.13, 78.13000000000001),\n                new Arc([487511.9595384468,5692775.209077801],100, 335.86, 337.5986),\n                new Arc([487528.9666828735,5692759.781577637],100, 21.939999999999987, 21.94),\n                new Arc([487541.3355151838,5692575.094426166],100, 271.3692, 271.3952),\n                new Arc([487530.51278691227,5692562.311924237],100, 30.653, 30.9643),\n                new Arc([487530.51278691227,5692562.311924237],100, 56.24, 56.24000000000002),\n                new Arc([487543.5000608381,5692558.785720019],100, 108.4364, 108.4488),\n                new Arc([487433.4174532759,5693029.546270663],100, 386.0845, 386.189),\n                new Arc([484489.0169217938,5695998.817575407],100, 145.1299, 146.4196),\n                new Arc([484489.0169217938,5695998.817575407],100, 168.1311, 172.6034),\n                new Arc([484489.0169217938,5695998.817575407],100, 173.4981, 175.6415),\n                new Arc([484489.0169217938,5695998.817575407],100, 178.6501, 182.301),\n                new Arc([484487.78003856284,5695992.203404063],100, 114.8978, 115.1625),\n                new Arc([484487.78003856284,5695992.203404063],100, 119.0501, 119.4319),\n                new Arc([484487.78003856284,5695992.203404063],100, 130.1846, 130.2029),\n                new Arc([484487.78003856284,5695992.203404063],100, 130.6055, 131.1248),\n                new Arc([484487.78003856284,5695992.203404063],100, 135.8782, 137.3234),\n                new Arc([484487.78003856284,5695992.203404063],100, 138.6877, 138.8175),\n                new Arc([484487.78003856284,5695992.203404063],100, 144.8335, 146.0981),\n                new Arc([484504.78718298965,5696025.274309666],100, 147.32999999999998, 148.022),\n                new Arc([484504.78718298965,5696025.274309666],100, 164.9211, 164.9396),\n                new Arc([484504.78718298965,5696025.274309666],100, 169.7927, 174.5177),\n                new Arc([484504.78718298965,5696025.274309666],100, 175.4021, 176.7111),\n                new Arc([484504.78718298965,5696025.274309666],100, 179.7544, 183.7921),\n                new Arc([484504.78718298965,5696025.274309666],100, 198.6854, 198.6863),\n                new Arc([484504.78718298965,5696025.274309666],100, 199.6647, 199.6675),\n                new Arc([484507.5701702594,5696019.5420106035],100, 131.8911, 132.4502),\n                new Arc([484507.5701702594,5696019.5420106035],100, 137.3229, 138.6979),\n                new Arc([484507.5701702594,5696019.5420106035],100, 140.0513, 140.2308),\n                new Arc([484507.5701702594,5696019.5420106035],100, 164.6253, 164.6508),\n                new Arc([484507.5701702594,5696019.5420106035],100, 169.5002, 174.1508),\n                new Arc([484507.5701702594,5696019.5420106035],100, 175.0312, 176.4958),\n                new Arc([484507.5701702594,5696019.5420106035],100, 179.5194, 183.4518),\n                new Arc([484507.5701702594,5696019.5420106035],100, 90.9516, 91.0225),\n                new Arc([484507.5701702594,5696019.5420106035],100, 93.5292, 93.55),\n                new Arc([484507.5701702594,5696019.5420106035],100, 94.2293, 94.4127),\n                new Arc([484507.5701702594,5696019.5420106035],100, 94.8464, 95.0647),\n                new Arc([484507.5701702594,5696019.5420106035],100, 98.4502, 99.1651),\n                new Arc([484490.8722466403,5695993.526237944],100, 115.0898, 115.391),\n                new Arc([484490.8722466403,5695993.526237944],100, 119.2665, 119.6102),\n                new Arc([484473.8651022137,5695998.817575407],100, 129.2654, 129.2726),\n                new Arc([484473.8651022137,5695998.817575407],100, 129.9117, 129.9537),\n                new Arc([484473.8651022137,5695998.817575407],100, 130.3592, 130.8765),\n                new Arc([484473.8651022137,5695998.817575407],100, 135.6664, 137.1345),\n                new Arc([484473.8651022137,5695998.817575407],100, 138.5151, 138.6065),\n                new Arc([484473.8651022137,5695998.817575407],100, 144.7058, 145.9786),\n                new Arc([484082.39155959064,5695947.227168626],100, 330.59999999999997, 330.6442),\n                new Arc([484082.39155959064,5695947.227168626],100, 348.9894, 349.0571),\n                new Arc([484082.39155959064,5695947.227168626],100, 296.92, 296.9656),\n                new Arc([484082.39155959064,5695947.227168626],100, 336.52, 336.52000000000004),\n                new Arc([484080.8454555518,5695819.795729373],100, 317.65, 317.65000000000003),\n                new Arc([484207.62598673307,5695723.231245452],100, 24.519999999999992, 24.52),\n                new Arc([484207.62598673307,5695723.231245452],100, 60.5951, 60.6441),\n                new Arc([484207.62598673307,5695723.231245452],100, 1.469999999999981, 1.47),\n                new Arc([483619.4880103753,5695565.37921927],100, 363.5643, 363.5939),\n                new Arc([483634.6398299555,5695573.756770789],100, 63.4643, 63.5991),\n                new Arc([483634.6398299555,5695573.756770789],100, 65.1926, 65.3277),\n                new Arc([483634.6398299555,5695573.756770789],100, 72.3185, 72.7582),\n                new Arc([483634.6398299555,5695573.756770789],100, 73.9445, 74.9398),\n                new Arc([483634.6398299555,5695573.756770789],100, 78.7731, 84.0654),\n                new Arc([483634.6398299555,5695573.756770789],100, 86.4067, 86.5349),\n                new Arc([483689.0626921211,5695607.267055323],100, 355.088, 355.112),\n                new Arc([483689.0626921211,5695607.267055323],100, 360.9482, 360.9755),\n                new Arc([483689.0626921211,5695607.267055323],100, 387.1069, 387.1189),\n                new Arc([483730.189059553,5695655.769005219],100, 119.8516, 123.2622),\n                new Arc([483728.0245138987,5695647.832304518],100, 94.96999999999998, 94.97),\n                new Arc([483728.0245138987,5695647.832304518],100, 118.2902, 122.2171),\n                new Arc([483729.8798387453,5695645.627666681],100, 118.4459, 122.2834),\n                new Arc([483729.26139712974,5695654.446221285],100, 174.3675, 176.6382),\n                new Arc([483733.5904884384,5695657.091789354],100, 120.8429, 123.8761),\n                new Arc([484382.33574311703,5695496.154488483],100, 141.037, 151.8678),\n                new Arc([484382.33574311703,5695496.154488483],100, 169.253, 169.9659),\n                new Arc([484382.33574311703,5695496.154488483],100, 178.1123, 181.3965),\n                new Arc([484393.77691300405,5695513.350390714],100, 302.2735, 302.3138),\n                new Arc([483750.28841205745,5692732.893712345],100, 70.2, 73.449),\n                new Arc([483750.28841205745,5692732.893712345],100, 77.3372, 77.6422),\n                new Arc([483750.28841205745,5692732.893712345],100, 78.2813, 80.4422),\n                new Arc([483750.28841205745,5692732.893712345],100, 81.6306, 82.2981),\n                new Arc([483750.28841205745,5692732.893712345],100, 82.8377, 83.3266),\n                new Arc([483750.28841205745,5692732.893712345],100, 89.4388, 109.80000000000001),\n                new Arc([483750.28841205745,5692732.893712345],100, 244.1254, 244.1883),\n                new Arc([483750.28841205745,5692732.893712345],100, 253.117, 253.2209),\n                new Arc([483874.90439758427,5692661.9277673215],100, 243.32999999999998, 243.33),\n                new Arc([483874.90439758427,5692661.9277673215],100, 246.9612, 246.9687),\n                new Arc([483874.90439758427,5692661.9277673215],100, 247.6499, 251.7927),\n                new Arc([483874.90439758427,5692661.9277673215],100, 254.1701, 254.8956),\n                new Arc([483874.90439758427,5692661.9277673215],100, 258.0235, 258.0255),\n                new Arc([483874.90439758427,5692661.9277673215],100, 273.8736, 273.9313),\n                new Arc([483874.90439758427,5692661.9277673215],100, 274.7128, 277.2515),\n                new Arc([483874.90439758427,5692661.9277673215],100, 281.1907, 281.5664),\n                new Arc([483875.5228391998,5692661.046206327],100, 223.23999999999998, 223.24),\n                new Arc([483875.5228391998,5692661.046206327],100, 234.076, 234.0937),\n                new Arc([483875.5228391998,5692661.046206327],100, 236.5016, 236.5119),\n                new Arc([483875.5228391998,5692661.046206327],100, 236.5119, 236.5328),\n                new Arc([483875.5228391998,5692661.046206327],100, 238.7846, 238.8439),\n                new Arc([483875.5228391998,5692661.046206327],100, 246.9243, 246.9335),\n                new Arc([483875.5228391998,5692661.046206327],100, 247.6145, 251.7295),\n                new Arc([483875.5228391998,5692661.046206327],100, 254.1339, 254.8486),\n                new Arc([483875.5228391998,5692661.046206327],100, 257.9771, 257.979),\n                new Arc([483875.5228391998,5692661.046206327],100, 260.2166, 260.2509),\n                new Arc([488596.39691125794,5691342.328172981],100, 377.745, 377.832),\n                new Arc([488596.39691125794,5691342.328172981],100, 377.832, 378.1579),\n                new Arc([488596.39691125794,5691342.328172981],100, 380.0902, 380.1182),\n                new Arc([487498.3538229054,5693302.845591304],100, 356.7201, 356.7447),\n                new Arc([487537.9340862985,5693250.829916254],100, 117.6538, 117.6659),\n                new Arc([487537.9340862985,5693250.829916254],100, 117.6659, 117.6735),\n                new Arc([487374.97472060943,5690817.892043137],100, 214.3, 214.3207),\n                new Arc([487374.97472060943,5690817.892043137],100, 215.0533, 216.96),\n                new Arc([487396.62017715257,5690840.367247121],100, 306.5898, 306.703),\n                new Arc([487616.785392277,5690464.025191412],100, 157.4539, 159.2776),\n                new Arc([487616.785392277,5690464.025191412],100, 160.7911, 162.1653),\n                new Arc([487616.785392277,5690464.025191412],100, 164.2783, 164.6145),\n                new Arc([487297.6695186697,5690699.347293115],100, 208.067, 208.0812),\n                new Arc([487297.6695186697,5690699.347293115],100, 208.4897, 209.25),\n                new Arc([487258.7076968921,5690594.465142841],100, 70.6183, 70.7061),\n                new Arc([487258.7076968921,5690594.465142841],100, 71.6399, 71.6466),\n                new Arc([487258.7076968921,5690594.465142841],100, 72.0981, 72.1358),\n                new Arc([487258.7076968921,5690594.465142841],100, 75.1933, 75.2007),\n                new Arc([487168.1060002186,5690635.007677086],100, 376.2718, 376.3902),\n                new Arc([487168.1060002186,5690635.007677086],100, 376.5628, 376.6877),\n                new Arc([487216.34444622905,5690664.974016058],100, 128.388, 128.8815),\n                new Arc([487215.4167838059,5690664.974016058],100, 127.6535, 128.2958),\n                new Arc([487175.8365204126,5690701.550712811],100, 299.076, 299.0859),\n                new Arc([487175.8365204126,5690701.550712811],100, 318.5944, 318.6398),\n                new Arc([487172.4350915273,5690708.601659486],100, 318.274, 318.3154),\n                new Arc([488980.4491544948,5690183.761994997],100, 54.8224, 55.0088),\n                new Arc([488952.00084018084,5690179.355411029],100, 42.25, 42.4817),\n                new Arc([488945.1979824102,5690183.3213365],100, 81.9855, 82.0003),\n                new Arc([486124.1765532239,5691688.737290333],100, 122.75, 124.1707),\n                new Arc([486124.1765532239,5691688.737290333],100, 130.0008, 130.063),\n                new Arc([486124.1765532239,5691688.737290333],100, 130.1467, 130.1942),\n                new Arc([486124.1765532239,5691688.737290333],100, 141.3157, 141.3396),\n                new Arc([486114.89992899116,5691681.244839341],100, 105.4282, 105.4581),\n                new Arc([486114.89992899116,5691681.244839341],100, 119.285, 119.3319),\n                new Arc([486114.89992899116,5691681.244839341],100, 121.7655, 123.7149),\n                new Arc([486114.89992899116,5691681.244839341],100, 129.1083, 129.171),\n                new Arc([486114.89992899116,5691681.244839341],100, 130.9198, 130.9764),\n                new Arc([486114.89992899116,5691681.244839341],100, 105.4282, 105.4581),\n                new Arc([486114.89992899116,5691681.244839341],100, 119.285, 119.3319),\n                new Arc([486114.89992899116,5691681.244839341],100, 121.7655, 122.25),\n                new Arc([487050.9113140779,5691573.706821901],100, 77.3299, 77.4332),\n                new Arc([487050.9113140779,5691573.706821901],100, 78.132, 78.3129),\n                new Arc([487050.9113140779,5691573.706821901],100, 90.2078, 90.2144),\n                new Arc([489123.61838848726,5688301.4667415405],100, 331.75, 333.9192),\n                new Arc([489164.1263143037,5688332.30640581],100, 3.75, 30.0627),\n                new Arc([489014.15422254056,5688354.334802463],100, 157.704, 158.0681),\n                new Arc([489061.15578531986,5687979.859429233],100, 96.5258, 96.7054),\n                new Arc([489061.15578531986,5687979.859429233],100, 103.8533, 103.9698),\n                new Arc([489025.5953924276,5688328.341300164],100, 348.7129, 349.0719),\n                new Arc([489062.7018893587,5688231.857604047],100, 91.75, 92.9039),\n                new Arc([489306.9863274884,5688296.179952617],100, 91.75, 136.25),\n                new Arc([489046.3131865474,5688380.768949983],100, 94.75, 139.25),\n                new Arc([489022.50318435,5688366.670728261],100, 166.4126, 166.7599),\n                new Arc([489992.83807909803,5688761.869915968],100, 137.4628, 137.7472),\n                new Arc([488342.5266280878,5686790.012793644],100, 163.3789, 163.6473),\n                new Arc([488342.5266280878,5686790.012793644],100, 163.6473, 163.8338),\n                new Arc([488342.5266280878,5686790.012793644],100, 163.3789, 163.6473),\n                new Arc([488342.5266280878,5686790.012793644],100, 163.6473, 163.8338),\n                new Arc([488274.8072711886,5686737.153967272],100, 249.6759, 249.7956),\n                new Arc([488325.519483661,5686837.145510283],100, 160.8196, 161.0987),\n                new Arc([488325.519483661,5686837.145510283],100, 194.56, 194.56000000000003),\n                new Arc([488391.69273652154,5687387.339214568],100, 11.50999999999998, 11.51),\n                new Arc([488637.52327868994,5691774.239822345],100, 74.8679, 75.3968),\n                new Arc([488486.93274531123,5691940.839885505],100, 6.989999999999998, 6.99),\n                new Arc([488596.70613206574,5692027.2263242565],100, 21.610000000000003, 76.01),\n                new Arc([488563.9287264432,5692049.704564912],100, 356.2349, 356.4199),\n                new Arc([488599.4891193356,5692053.67131912],100, 72.8, 72.80000000000003),\n                new Arc([488606.9104187218,5692051.467566568],100, 42.75999999999998, 42.76),\n                new Arc([488606.9104187218,5692051.467566568],100, 30.449999999999978, 30.45),\n                new Arc([488609.38418518385,5692052.349067528],100, 3.0699999999999825, 3.07),\n                new Arc([488618.0423678011,5692058.960327477],100, 48.499999999999986, 48.5),\n                new Arc([488618.0423678011,5692058.960327477],100, 63.1546, 63.8607),\n                new Arc([488722.2497800159,5692024.581829062],100, 354.2828, 355.6212),\n                new Arc([488919.22343455843,5691972.573582442],100, 107.86999999999999, 107.87),\n                new Arc([488907.47304386355,5691975.658808983],100, 93.93999999999998, 93.94),\n                new Arc([488899.1240820541,5691987.118231144],100, 164.42, 164.42000000000002),\n                new Arc([488899.1240820541,5692024.581829062],100, 107.11999999999999, 107.12),\n                new Arc([488889.84745782136,5692048.3823139],100, 238.35, 238.35000000000002),\n                new Arc([488608.14730195276,5691960.673432908],100, 17.189999999999987, 17.19),\n                new Arc([488483.5313164259,5691984.03300066],100, 278.1434, 278.2033),\n                new Arc([488510.433526701,5691946.56957246],100, 17.819999999999983, 17.82),\n                new Arc([488500.84768166044,5691940.839885505],100, 78.5343, 79.2413),\n                new Arc([488500.84768166044,5691940.839885505],100, 101.2751, 101.8319),\n                new Arc([488500.84768166044,5691940.839885505],100, 106.0826, 106.0852),\n                new Arc([488441.16806576285,5691984.914494975],100, 281.1296, 281.137),\n                new Arc([488441.16806576285,5691984.914494975],100, 339.8106, 339.8613),\n                new Arc([488436.22053283884,5691956.2659741305],100, 359.4033, 359.8785),\n                new Arc([488436.22053283884,5691956.2659741305],100, 249.079, 249.3629),\n                new Arc([487757.7900806152,5690681.719955059],100, 227.9074, 228.3728),\n                new Arc([487757.7900806152,5690681.719955059],100, 272.4762, 272.7361),\n                new Arc([487770.7773545411,5690680.8385890685],100, 265.1283, 265.3933),\n                new Arc([487817.160475705,5690687.448836119],100, 57.11999999999999, 57.12),\n                new Arc([487823.0356710524,5690677.313125968],100, 33.989999999999995, 33.99),\n                new Arc([487823.0356710524,5690677.313125968],100, 38.2294, 41.7934),\n                new Arc([487814.37748843513,5690685.245419891],100, 17.449999999999978, 17.5998),\n                new Arc([487803.55476016353,5690683.482687303],100, 15.489999999999998, 15.49),\n                new Arc([487803.55476016353,5690683.482687303],100, 15.49, 15.5198),\n                new Arc([487803.55476016353,5690683.482687303],100, 24.49999999999999, 24.5),\n                new Arc([487788.71216139116,5690683.042004209],100, 246.70999999999998, 246.71),\n                new Arc([487788.71216139116,5690683.042004209],100, 283.2936, 283.4467),\n                new Arc([487788.71216139116,5690683.042004209],100, 283.4467, 283.911),\n                new Arc([487788.71216139116,5690683.042004209],100, 287.4811, 287.7419),\n                new Arc([487779.4355371584,5690638.973804422],100, 237.3379, 238.8588),\n                new Arc([488056.8066017184,5690102.240542655],100, 252.6449, 253.3368),\n                new Arc([488073.1953045295,5690120.748050485],100, 314.83, 369.22999999999996),\n                new Arc([488184.5147953229,5690107.528398135],100, 92.94999999999997, 92.95),\n                new Arc([488184.5147953229,5690107.528398135],100, 98.3666, 98.6621),\n                new Arc([488184.5147953229,5690107.528398135],100, 99.1086, 99.2711),\n                new Arc([488025.5753001347,5690293.927299191],100, 59.67999999999999, 59.68),\n                new Arc([488025.5753001347,5690293.927299191],100, 84.7195, 84.84),\n                new Arc([488044.43776940805,5690282.910707768],100, 191.3503, 191.4651),\n                new Arc([488044.43776940805,5690282.910707768],100, 195.268, 195.577),\n                new Arc([488103.18972288223,5690312.435203305],100, 116.57999999999997, 116.58),\n                new Arc([488041.6547821382,5690295.689955078],100, 124.37999999999998, 124.38),\n                new Arc([488052.16828960204,5690285.995352004],100, 97.11999999999999, 97.12),\n                new Arc([488208.01557671255,5691232.590676175],100, 162.9495, 163.0789),\n                new Arc([487996.5085442053,5691586.92863963],100, 287.63000000000005, 342.03000000000003),\n                new Arc([488003.311401976,5691596.183923661],100, 283.6386, 283.8566),\n                new Arc([488008.5681557079,5691571.503187512],100, 80.87, 80.87000000000002),\n                new Arc([488826.45719223074,5690525.278850826],100, 316.41, 370.81),\n                new Arc([488940.86889110156,5690806.434117728],100, 96.68999999999998, 96.69),\n                new Arc([488939.9412286782,5690868.1308123],100, 277.6402, 278.6237),\n                new Arc([488939.9412286782,5690868.1308123],100, 282.8955, 284.0757),\n                new Arc([487965.2772426217,5691093.76805943],100, 22.5138, 22.8283),\n                new Arc([487840.6612570947,5691081.869078169],100, 9.9613, 9.9649),\n                new Arc([487840.6612570947,5691081.869078169],100, 11.1131, 11.3241),\n                new Arc([487840.6612570947,5691081.869078169],100, 61.94, 61.94000000000001),\n                new Arc([487859.2145055602,5691110.955504731],100, 281.6039, 281.6051),\n                new Arc([487859.2145055602,5691110.955504731],100, 281.6051, 281.6173),\n                new Arc([487859.2145055602,5691110.955504731],100, 281.8546, 281.9236),\n                new Arc([487891.6826903749,5690982.2708182745],100, 13.909999999999979, 13.91),\n                new Arc([493916.5409087531,5690188.609239872],100, 76.63, 76.63000000000001),\n                new Arc([493931.69272833335,5690210.201544368],100, 64.05, 64.05000000000003),\n                new Arc([487213.25223815144,5690180.236727649],100, 75.6094, 75.6335),\n                new Arc([487213.25223815144,5690180.236727649],100, 75.9455, 75.9801),\n                new Arc([487213.25223815144,5690180.236727649],100, 77.6321, 79.2795),\n                new Arc([488957.2575939128,5690181.999361147],100, 54.32999999999997, 54.33),\n                new Arc([488784.4031623755,5687298.7949511185],100, 320.8209, 321.3478),\n                new Arc([488390.45585329045,5687299.675984252],100, 223.26, 223.26000000000002),\n                new Arc([488337.2698743559,5687156.949746723],100, 84.87999999999998, 84.88),\n                new Arc([490530.2638429834,5689709.625998666],100, 65.42000000000003, 65.4729),\n                new Arc([490530.2638429834,5689709.625998666],100, 35.60999999999997, 35.61),\n                new Arc([489828.3326093702,5688416.895744461],100, 40.36, 94.75999999999999),\n                new Arc([490086.22276304127,5688793.151756077],100, 56.0635, 56.2378),\n                new Arc([490113.74341493193,5688808.131830883],100, 6.949999999999978, 6.95),\n                new Arc([490113.74341493193,5688808.131830883],100, 33.2355, 33.5482),\n                new Arc([490145.90237893874,5689103.332535903],100, 334.5842, 334.8873),\n                new Arc([490145.90237893874,5689103.332535903],100, 336.3348, 336.3519),\n                new Arc([490645.6032042774,5689009.043491641],100, 111.8, 111.80000000000001),\n                new Arc([490650.2415163939,5688977.760897256],100, 43.199999999999974, 43.2),\n                new Arc([491029.9646683221,5689267.679832566],100, 278.3695, 278.6086),\n                new Arc([491029.9646683221,5689267.679832566],100, 331.78, 331.78000000000003),\n                new Arc([491049.4455792108,5689136.818603642],100, 347.53, 347.530001),\n                new Arc([491047.8994751721,5689183.5230651805],100, 43.2861, 43.3266),\n                new Arc([491046.3533711332,5689217.89065473],100, 21.199999999999978, 21.2),\n                new Arc([490717.9608732931,5689261.951859959],100, 264.2995, 264.3755),\n                new Arc([489901.61794080905,5689558.048783805],100, 2.889999999999997, 2.89),\n                new Arc([489890.4859917298,5689559.811294814],100, 306.8469, 306.9021),\n                new Arc([489890.4859917298,5689559.811294814],100, 21.21999999999998, 21.22),\n                new Arc([489717.0131185769,5689880.153432964],100, 52.519999999999996, 92.12),\n                new Arc([489083.7289042863,5689258.8675685385],100, 222.25, 222.25000000000003),\n                new Arc([489067.95864309056,5689244.767964126],100, 55.999999999999986, 56),\n                new Arc([489067.95864309056,5689244.767964126],100, 104.0019, 104.1289),\n                new Arc([489067.95864309056,5689244.767964126],100, 104.3178, 104.3857),\n                new Arc([489067.95864309056,5689244.767964126],100, 105.8141, 105.8324),\n                new Arc([489067.95864309056,5689244.767964126],100, 105.9619, 105.9848),\n                new Arc([488977.3569464172,5689331.569006175],100, 197.3797, 197.7558),\n                new Arc([488952.61928179645,5689305.132051459],100, 20.129999999999985, 20.13),\n                new Arc([488952.61928179645,5689305.132051459],100, 45.373, 46.2441),\n                new Arc([488952.61928179645,5689305.132051459],100, 49.1021, 49.775),\n                new Arc([489058.68201885786,5690321.248504425],100, 112.5867, 112.7003),\n                new Arc([489164.7447559192,5690533.211010033],100, 212.6526, 212.7769),\n                new Arc([489164.7447559192,5690533.211010033],100, 213.3008, 213.4917),\n                new Arc([489555.9090777345,5690950.981328211],100, 46.739999999999995, 46.74),\n                new Arc([489555.9090777345,5690950.981328211],100, 82.0909, 82.1358),\n                new Arc([489329.5594464548,5690960.235954726],100, 124.05, 124.05000000000001),\n                new Arc([489664.13636045007,5691378.466920215],100, 52.63999999999997, 52.64),\n                new Arc([489489.1173832585,5691544.6188916415],100, 98.55999999999999, 98.56),\n                new Arc([489895.43352465396,5691229.505705746],100, 102.99999999999999, 103),\n                new Arc([489895.43352465396,5691229.505705746],100, 103, 103.4586),\n                new Arc([489039.8195495845,5690553.922792213],100, 236.43, 236.7088),\n                new Arc([488387.0544244051,5691601.472661694],100, 14.459999999999969, 14.46),\n                new Arc([488426.9439086061,5691633.205155494],100, 86.82999999999997, 86.83),\n                new Arc([488106.5911517675,5692824.577257024],100, 82.89999999999999, 82.9),\n                new Arc([488095.76842349605,5692821.4917378435],100, 94.09, 94.09000000000003),\n                new Arc([487289.01133605244,5693465.947549609],100, 159.6918, 159.8453),\n                new Arc([487276.02406212664,5693437.735106368],100, 174.9647, 175.0436),\n                new Arc([487276.02406212664,5693437.735106368],100, 196.17, 196.17000000000004),\n                new Arc([487241.39133165753,5693515.760361856],100, 34.80999999999999, 34.81),\n                new Arc([487241.39133165753,5693515.760361856],100, 52.0306, 52.0343),\n                new Arc([487241.39133165753,5693515.760361856],100, 55.9843, 56.1558),\n                new Arc([490361.1200611391,5686646.854193942],100, 72.32999999999997, 72.33),\n                new Arc([490361.1200611391,5686646.854193942],100, 81.4116, 81.547),\n                new Arc([490352.4618785219,5686658.306797703],100, 301.7839, 301.8131),\n                new Arc([490352.4618785219,5686658.306797703],100, 313.4525, 314.81),\n                new Arc([490345.04057913565,5686653.0209787665],100, 55.61999999999999, 55.62),\n                new Arc([490345.04057913565,5686653.0209787665],100, 61.4139, 61.7839),\n                new Arc([490012.31898998684,5687027.881373262],100, 65.42999999999999, 65.43),\n                new Arc([490012.31898998684,5687027.881373262],100, 106.4296, 106.4321),\n                new Arc([490012.31898998684,5687027.881373262],100, 106.8502, 106.9752),\n                new Arc([490012.31898998684,5687027.881373262],100, 108.4798, 108.512),\n                new Arc([490012.31898998684,5687027.881373262],100, 113.3844, 113.4626),\n                new Arc([490001.18704090756,5687068.848266398],100, 34.62999999999998, 34.63),\n                new Arc([489884.3015755745,5687404.079024475],100, 73.84999999999998, 73.85),\n                new Arc([489884.3015755745,5687404.079024475],100, 109.1003, 109.1333),\n                new Arc([489861.4192358004,5687424.343046748],100, 44.719999999999985, 44.72),\n                new Arc([489576.31765104656,5688245.955613515],100, 85.30999999999999, 85.31),\n                new Arc([489204.6342401201,5688282.962993959],100, 250.0627, 251.1791),\n                new Arc([489934.0861256238,5688800.201199924],100, 314.8284, 315.3956),\n                new Arc([489934.0861256238,5688800.201199924],100, 327.8248, 328.3648),\n                new Arc([488645.8722404994,5691767.188036224],100, 124.702, 124.961),\n                new Arc([488645.8722404994,5691767.188036224],100, 125.3986, 125.7513),\n                new Arc([489901.92716161686,5688453.90383141],100, 139.55, 139.5746),\n                new Arc([489901.92716161686,5688453.90383141],100, 193.1631, 193.1837),\n                new Arc([490800.83204977255,5689218.33126571],100, 146.7893, 149.131)];\n    var arcs2 = [];\n    for (var arc of arcs) {\n        if (arc.omega - arc.alpha < 44) {\n            arcs2.push(arc);\n        }\n    }\n    return arcs2;\n}\n\n/**\n * Sectors from months 02/2018 through 05/2018 (radius 300)\n * @returns {Array<Arc>}  sectors\n */\nexport function sectorsStEtienne2345_r300() {\n    return [new Arc([485538.20312252047,5692058.519576657],100, 86.94999999999997, 86.95),\n            new Arc([485168.37503644056,5690734.161387739],100, 115.58, 155.18),\n            new Arc([485168.37503644056,5690734.161387739],100, 119.01, 158.61),\n            new Arc([485156.31542493793,5690754.432948245],100, 127.57000000000001, 167.17000000000002),\n            new Arc([485014.0738533688,5690961.55804501],100, 123.3893, 158.15000000000003),\n            new Arc([485014.0738533688,5690961.55804501],100, 135.81, 175.41),\n            new Arc([484325.4391144893,5691660.089717437],100, 118.82999999999997, 118.83),\n            new Arc([484325.4391144893,5691660.089717437],100, 126.9202, 128.2392),\n            new Arc([484325.4391144893,5691660.089717437],100, 132.9675, 135.8781),\n            new Arc([484325.4391144893,5691660.089717437],100, 142.2552, 144.0219),\n            new Arc([484325.4391144893,5691660.089717437],100, 147.7854, 173.22999999999996),\n            new Arc([486294.2479974915,5695593.157446534],100, 207.98999999999998, 207.99),\n            new Arc([482634.3105168548,5691842.113547831],100, 68.90999999999998, 68.91),\n            new Arc([482634.3105168548,5691842.113547831],100, 70.6277, 70.7682),\n            new Arc([481340.5306571908,5690449.923688883],100, 40.53999999999998, 40.54),\n            new Arc([481344.85974849935,5690455.2117497325],100, 62.28999999999998, 62.29),\n            new Arc([481332.8001369967,5690458.737125367],100, 34.9949, 35.3332),\n            new Arc([481332.8001369967,5690458.737125367],100, 51.91, 51.91000000000001),\n            new Arc([481327.2341624571,5690478.126716156],100, 79.53999999999998, 79.54),\n            new Arc([481366.19598423474,5690453.449062436],100, 106.4018, 106.7411),\n            new Arc([481366.19598423474,5690453.449062436],100, 125.91, 125.91000000000003),\n            new Arc([481867.75213442004,5690880.02950945],100, 63.59999999999998, 72.0789),\n            new Arc([481856.9294061485,5690881.351587892],100, 29.71999999999998, 29.72),\n            new Arc([481856.9294061485,5690881.351587892],100, 56.3307, 68.803),\n            new Arc([481836.5208328363,5690877.826045827],100, 52.3506, 63.6793),\n            new Arc([481836.5208328363,5690877.826045827],100, 74.4362, 74.8056),\n            new Arc([481923.4118798167,5691043.528023928],100, 13.909999999999979, 13.91),\n            new Arc([481923.4118798167,5691043.528023928],100, 31.7982, 42.8598),\n            new Arc([481937.94525778136,5691061.596776155],100, 32.050000000000026, 42.0128),\n            new Arc([481937.94525778136,5691061.596776155],100, 58.72, 71.65000000000003),\n            new Arc([481924.9579838555,5691080.106267476],100, 17.2689, 36.3031),\n            new Arc([481926.81330870197,5691063.800285021],100, 51.6286, 55.9099),\n            new Arc([481926.81330870197,5691063.800285021],100, 55.9099, 86.86000000000001),\n            new Arc([485038.81151798955,5693282.568258294],100, 78.62000000000002, 118.22000000000003),\n            new Arc([485047.160479799,5693275.515283671],100, 52.979999999999976, 92.57999999999998),\n            new Arc([485033.5547642576,5693279.041770288],100, 33.5111, 78.00000000000001),\n            new Arc([485805.06067961664,5687021.714330306],100, 21.869999999999994, 76.27),\n            new Arc([485794.237951345,5687027.881373262],100, 343.52000000000004, 397.92),\n            new Arc([485754.34846714407,5687069.729276909],100, 47.93999999999998, 102.33999999999997),\n            new Arc([485735.7952186785,5687179.856273578],100, 265.19, 273.7669),\n            new Arc([485735.7952186785,5687179.856273578],100, 286.378, 319.59),\n            new Arc([485680.75391489745,5687138.888872629],100, 303.8852, 356.95),\n            new Arc([485719.715736675,5687104.529261495],100, 340.75, 395.15),\n            new Arc([485771.97405318636,5687117.303973321],100, 112.73, 167.13),\n            new Arc([485818.666395158,5687115.9824505625],100, 228.07000000000002, 238.776),\n            new Arc([485818.666395158,5687115.9824505625],100, 269.4244, 271.7343),\n            new Arc([485818.666395158,5687115.9824505625],100, 276.8073, 279.9315),\n            new Arc([485844.0225013942,5687118.184988598],100, 10.929999999999996, 65.33),\n            new Arc([485871.233932477,5687121.268542762],100, 137.90000000000003, 192.30000000000004),\n            new Arc([485900.30068840634,5687126.554638081],100, 213.08, 219.909),\n            new Arc([485900.30068840634,5687126.554638081],100, 249.2841, 256.0601),\n            new Arc([485900.30068840634,5687126.554638081],100, 261.0756, 263.4411),\n            new Arc([485907.41276698484,5687132.721753233],100, 201.45000000000002, 219.9551),\n            new Arc([485907.41276698484,5687132.721753233],100, 248.2389, 255.85000000000002),\n            new Arc([485916.6893912176,5687126.995146166],100, 40.790000000000006, 95.19),\n            new Arc([485972.658357422,5687152.1041427795],100, 45.530000000000015, 99.93),\n            new Arc([485992.7577099263,5687167.521982605],100, 57.46000000000002, 111.86000000000001),\n            new Arc([486034.50251897384,5687177.213209796],100, 198.36, 252.76000000000002),\n            new Arc([485881.12899832526,5687071.931803573],100, 139.95, 194.35),\n            new Arc([485881.12899832526,5687071.931803573],100, 26.09000000000002, 80.49000000000002),\n            new Arc([485881.12899832526,5687071.931803573],100, 170.76999999999998, 208.6866),\n            new Arc([485866.9048411684,5687081.182421462],100, 188.92000000000002, 214.609),\n            new Arc([485866.9048411684,5687081.182421462],100, 243.32, 243.32000000000002),\n            new Arc([485861.9573082442,5687083.825456901],100, 191.17000000000002, 216.6161),\n            new Arc([485861.9573082442,5687083.825456901],100, 243.3903, 243.6561),\n            new Arc([485861.9573082442,5687083.825456901],100, 245.57, 245.57000000000002),\n            new Arc([487059.8787175029,5693926.616432178],100, 369.083, 374.2742),\n            new Arc([487059.8787175029,5693926.616432178],100, 378.0523, 380.174),\n            new Arc([487075.64897869865,5693928.37980361],100, 108.05, 108.3761),\n            new Arc([487075.64897869865,5693928.37980361],100, 115.1415, 115.233),\n            new Arc([487075.64897869865,5693928.37980361],100, 157.7834, 159.0591),\n            new Arc([487060.49715911853,5693924.412218386],100, 110.99, 110.99000000000001),\n            new Arc([487057.7141718486,5693928.37980361],100, 81.0044, 81.1563),\n            new Arc([487062.0432631573,5693930.143175378],100, 358.15999999999997, 358.16),\n            new Arc([487062.0432631573,5693930.143175378],100, 368.4426, 373.6568),\n            new Arc([487062.0432631573,5693930.143175378],100, 377.5308, 379.3874),\n            new Arc([487157.283271947,5693960.561393176],100, 297.97999999999996, 297.98),\n            new Arc([487157.283271947,5693960.561393176],100, 307.47999999999996, 307.48),\n            new Arc([487216.03522542125,5693964.088149761],100, 268.46999999999997, 269.4142),\n            new Arc([487216.03522542125,5693964.088149761],100, 293.9588, 294.4762),\n            new Arc([487463.7210924364,5693853.436824404],100, 338.96999999999997, 338.97),\n            new Arc([487463.7210924364,5693853.436824404],100, 367.188, 367.3093),\n            new Arc([487440.8387526621,5693830.954053027],100, 381.3022, 381.4677),\n            new Arc([487489.07719867263,5693855.641020715],100, 236.32999999999998, 236.33),\n            new Arc([487464.3395340518,5693853.877663621],100, 242.64000000000004, 246.9971),\n            new Arc([487464.3395340518,5693853.877663621],100, 253.2549, 253.5957),\n            new Arc([487464.3395340518,5693853.877663621],100, 264.2474, 264.6603),\n            new Arc([487588.33707796317,5693913.391157557],100, 278.1915, 278.531),\n            new Arc([487588.33707796317,5693913.391157557],100, 279.3944, 280.3684),\n            new Arc([487588.33707796317,5693913.391157557],100, 282.9398, 283.0663),\n            new Arc([487450.73381851043,5693354.420754052],100, 219.17999999999998, 219.18),\n            new Arc([487441.76641508547,5693339.873883185],100, 271.85999999999996, 271.86),\n            new Arc([487472.99771666917,5693331.939236315],100, 178.57999999999998, 178.58),\n            new Arc([487459.3920011277,5693290.062049926],100, 165.07999999999998, 165.08),\n            new Arc([487458.1551178967,5693272.429609019],100, 263.2596, 263.6077),\n            new Arc([487458.1551178967,5693272.429609019],100, 266.143, 268.19),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487481.03745767084,5692892.018156244],100, 78.13, 78.13000000000001),\n            new Arc([487511.9595384468,5692775.209077801],100, 335.86, 337.5986),\n            new Arc([487528.9666828735,5692759.781577637],100, 21.939999999999987, 21.94),\n            new Arc([487541.3355151838,5692575.094426166],100, 271.3692, 271.3952),\n            new Arc([487541.3355151838,5692575.094426166],100, 277.2577, 278.4055),\n            new Arc([487530.51278691227,5692562.311924237],100, 30.653, 30.9643),\n            new Arc([487530.51278691227,5692562.311924237],100, 56.24, 56.24000000000002),\n            new Arc([487543.5000608381,5692558.785720019],100, 105.902, 113.31),\n            new Arc([487433.4174532759,5693029.546270663],100, 386.0845, 386.189),\n            new Arc([484489.0169217938,5695998.817575407],100, 139.75, 194.15),\n            new Arc([484487.78003856284,5695992.203404063],100, 103.9249, 106.9173),\n            new Arc([484487.78003856284,5695992.203404063],100, 110.5716, 120.6488),\n            new Arc([484487.78003856284,5695992.203404063],100, 127.1846, 156.64),\n            new Arc([484504.78718298965,5696025.274309666],100, 147.32999999999998, 148.1085),\n            new Arc([484504.78718298965,5696025.274309666],100, 157.2585, 199.6675),\n            new Arc([484507.5701702594,5696019.5420106035],100, 131.69, 145.469),\n            new Arc([484507.5701702594,5696019.5420106035],100, 153.8978, 186.09),\n            new Arc([484507.5701702594,5696019.5420106035],100, 90.9516, 91.0225),\n            new Arc([484507.5701702594,5696019.5420106035],100, 91.2059, 93.55),\n            new Arc([484507.5701702594,5696019.5420106035],100, 94.2293, 94.4127),\n            new Arc([484507.5701702594,5696019.5420106035],100, 94.8464, 95.0647),\n            new Arc([484507.5701702594,5696019.5420106035],100, 98.4502, 99.1651),\n            new Arc([484490.8722466403,5695993.526237944],100, 104.6138, 108.6625),\n            new Arc([484490.8722466403,5695993.526237944],100, 112.4128, 123.0116),\n            new Arc([484473.8651022137,5695998.817575407],100, 104.0468, 107.2536),\n            new Arc([484473.8651022137,5695998.817575407],100, 110.728, 113.3407),\n            new Arc([484473.8651022137,5695998.817575407],100, 120.4806, 153.76),\n            new Arc([484082.39155959064,5695947.227168626],100, 330.59999999999997, 352.0885),\n            new Arc([484082.39155959064,5695947.227168626],100, 360.1912, 370.2),\n            new Arc([484082.39155959064,5695947.227168626],100, 296.92, 336.52000000000004),\n            new Arc([484082.39155959064,5695947.227168626],100, 266.67, 306.27000000000004),\n            new Arc([484081.77311797516,5695854.188810969],100, 305.5, 345.1),\n            new Arc([484080.8454555518,5695819.795729373],100, 278.05, 317.65000000000003),\n            new Arc([484089.19441736134,5695788.489321324],100, 296.58, 336.18),\n            new Arc([484207.62598673307,5695723.231245452],100, 24.519999999999992, 48.6282),\n            new Arc([484207.62598673307,5695723.231245452],100, 54.2249, 64.11999999999999),\n            new Arc([484207.62598673307,5695723.231245452],100, 1.469999999999981, 3.1747),\n            new Arc([484207.62598673307,5695723.231245452],100, 5.8237, 14.3309),\n            new Arc([484207.62598673307,5695723.231245452],100, 20.3279, 20.4107),\n            new Arc([484207.62598673307,5695723.231245452],100, 22.2225, 41.06999999999998),\n            new Arc([483619.4880103753,5695565.37921927],100, 348.96, 388.56),\n            new Arc([483634.6398299555,5695573.756770789],100, 61.5595, 88.6031),\n            new Arc([483634.6398299555,5695573.756770789],100, 91.7419, 95.4193),\n            new Arc([483689.0626921211,5695607.267055323],100, 347.88, 387.48),\n            new Arc([483730.189059553,5695655.769005219],100, 107.89, 113.5892),\n            new Arc([483730.189059553,5695655.769005219],100, 119.8516, 127.1199),\n            new Arc([483728.0245138987,5695647.832304518],100, 94.96999999999998, 112.2918),\n            new Arc([483728.0245138987,5695647.832304518],100, 118.2902, 125.2813),\n            new Arc([483729.8798387453,5695645.627666681],100, 107.45, 112.5105),\n            new Arc([483729.8798387453,5695645.627666681],100, 118.4459, 125.3484),\n            new Arc([483729.26139712974,5695654.446221285],100, 171.7703, 488.8397),\n            new Arc([483733.5904884384,5695657.091789354],100, 107.41000000000001, 114.5322),\n            new Arc([483733.5904884384,5695657.091789354],100, 120.8429, 128.1308),\n            new Arc([483743.79477509443,5695660.17828643],100, 130.11, 130.9341),\n            new Arc([483743.79477509443,5695660.17828643],100, 158.2109, 160.829),\n            new Arc([483743.79477509443,5695660.17828643],100, 181.3744, 182.4069),\n            new Arc([484382.33574311703,5695496.154488483],100, 129.89, 184.29),\n            new Arc([484393.77691300405,5695513.350390714],100, 302.2735, 302.3138),\n            new Arc([483750.28841205745,5692732.893712345],100, 70.2, 109.80000000000001),\n            new Arc([483750.28841205745,5692732.893712345],100, 214.5, 254.1),\n            new Arc([483874.90439758427,5692661.9277673215],100, 243.32999999999998, 282.93),\n            new Arc([483875.5228391998,5692661.046206327],100, 223.23999999999998, 262.84),\n            new Arc([488596.39691125794,5691342.328172981],100, 377.745, 377.832),\n            new Arc([488596.39691125794,5691342.328172981],100, 377.832, 378.1579),\n            new Arc([488596.39691125794,5691342.328172981],100, 380.0902, 380.1182),\n            new Arc([487632.86487428047,5693682.833677036],100, 272.9548, 275.9909),\n            new Arc([487498.3538229054,5693302.845591304],100, 349.8373, 350.6064),\n            new Arc([487498.3538229054,5693302.845591304],100, 354.183, 356.9068),\n            new Arc([487530.82200772007,5693259.205301139],100, 66.8604, 71.3873),\n            new Arc([487537.9340862985,5693250.829916254],100, 116.3609, 117.8289),\n            new Arc([487537.9340862985,5693250.829916254],100, 124.3875, 125.7909),\n            new Arc([488983.5413625724,5690194.337805377],100, 61.6089, 64.727),\n            new Arc([487374.97472060943,5690817.892043137],100, 214.3, 216.96),\n            new Arc([487374.97472060943,5690817.892043137],100, 228.5091, 263.7),\n            new Arc([487396.62017715257,5690840.367247121],100, 265.2, 269.634),\n            new Arc([487396.62017715257,5690840.367247121],100, 275.148, 287.9016),\n            new Arc([487396.62017715257,5690840.367247121],100, 306.5898, 306.703),\n            new Arc([487398.78472280694,5690843.452083442],100, 267.2, 269.0611),\n            new Arc([487398.78472280694,5690843.452083442],100, 274.6513, 287.1487),\n            new Arc([487616.785392277,5690464.025191412],100, 131.4967, 137.9459),\n            new Arc([487616.785392277,5690464.025191412],100, 139.6386, 140.9904),\n            new Arc([487616.785392277,5690464.025191412],100, 157.3026, 172.79999999999998),\n            new Arc([487390.4357609974,5690951.422024497],100, 242.6762, 282.8765),\n            new Arc([487356.1122513361,5690891.046835734],100, 223.0358, 224.7092),\n            new Arc([487356.1122513361,5690891.046835734],100, 230.8436, 235.0996),\n            new Arc([487356.1122513361,5690891.046835734],100, 243.3508, 264.25),\n            new Arc([487297.6695186697,5690699.347293115],100, 207.7047, 209.25),\n            new Arc([487279.11627020413,5690650.87219699],100, 165.4654, 171.25),\n            new Arc([487258.7076968921,5690594.465142841],100, 69.75, 79.1976),\n            new Arc([487258.7076968921,5690594.465142841],100, 80.81, 80.9093),\n            new Arc([487258.7076968921,5690594.465142841],100, 81.8536, 91.3174),\n            new Arc([487168.1060002186,5690635.007677086],100, 358.82, 360.8215),\n            new Arc([487168.1060002186,5690635.007677086],100, 374.3293, 378.1021),\n            new Arc([487168.1060002186,5690635.007677086],100, 383.2608, 385.5391),\n            new Arc([487216.34444622905,5690664.974016058],100, 128.388, 128.8815),\n            new Arc([487215.4167838059,5690664.974016058],100, 127.6535, 128.2958),\n            new Arc([487165.6322337566,5690681.279272055],100, 348.235, 351.9173),\n            new Arc([487175.8365204126,5690701.550712811],100, 294.75, 326.5994),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487172.4350915273,5690708.601659486],100, 305.75, 325.7492),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([488968.6987637999,5690163.491726695],100, 61.3088, 64.6375),\n            new Arc([488954.1653858352,5690173.626855112],100, 58.2266, 58.3582),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([488980.4491544948,5690183.761994997],100, 54.8224, 55.0088),\n            new Arc([488980.4491544948,5690183.761994997],100, 61.4169, 65.4386),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([488962.8235684525,5690166.576329782],100, 60.1541, 62.2861),\n            new Arc([487462.79343001306,5692955.933202974],100, 13.280000000000019, 67.68000000000002),\n            new Arc([487462.79343001306,5692955.933202974],100, 23.600000000000012, 78.00000000000001),\n            new Arc([488952.9285026042,5690171.864223257],100, 58.2052, 58.3128),\n            new Arc([488959.7313603749,5690182.440019579],100, 58.2431, 58.4024),\n            new Arc([488952.00084018084,5690179.355411029],100, 42.25, 42.4817),\n            new Arc([488945.1979824102,5690183.3213365],100, 81.9855, 82.0003),\n            new Arc([486124.1765532239,5691688.737290333],100, 122.75, 165.3342),\n            new Arc([486114.89992899116,5691681.244839341],100, 95.75, 140.25),\n            new Arc([486114.89992899116,5691681.244839341],100, 77.75, 122.25),\n            new Arc([487050.9113140779,5691573.706821901],100, 77.3299, 77.4332),\n            new Arc([487050.9113140779,5691573.706821901],100, 78.132, 78.3129),\n            new Arc([487050.9113140779,5691573.706821901],100, 87.1018, 90.5133),\n            new Arc([487045.6545603461,5691586.92863963],100, 86.2636, 89.3965),\n            new Arc([489123.61838848726,5688301.4667415405],100, 331.75, 333.9192),\n            new Arc([489164.1263143037,5688332.30640581],100, 3.75, 30.0627),\n            new Arc([489014.15422254056,5688354.334802463],100, 157.704, 158.0681),\n            new Arc([489061.15578531986,5687979.859429233],100, 96.5258, 96.7054),\n            new Arc([489061.15578531986,5687979.859429233],100, 99.7992, 103.2743),\n            new Arc([489061.15578531986,5687979.859429233],100, 103.8533, 103.9698),\n            new Arc([488978.5938296482,5688345.523437298],100, 358.2932, 368.25),\n            new Arc([489007.96980638534,5688357.4187823245],100, 351.1245, 362.25),\n            new Arc([489025.5953924276,5688328.341300164],100, 348.7129, 349.0719),\n            new Arc([489062.7018893587,5688231.857604047],100, 91.75, 92.9039),\n            new Arc([489306.9863274884,5688296.179952617],100, 91.75, 136.25),\n            new Arc([489046.3131865474,5688380.768949983],100, 94.75, 139.25),\n            new Arc([489022.50318435,5688366.670728261],100, 166.4126, 166.7599),\n            new Arc([489023.43084677326,5688365.349021113],100, 350.0704, 357.25),\n            new Arc([489014.77266415604,5688346.404573426],100, 356.7708, 381.7252),\n            new Arc([489204.6342401201,5688282.962993959],100, 250.0627, 251.1791),\n            new Arc([489217.3122932382,5688071.9348631995],100, 254.9, 257.3431),\n            new Arc([489874.09728891857,5688840.735609747],100, 233.4032, 239.718),\n            new Arc([489874.09728891857,5688840.735609747],100, 242.6907, 244.25),\n            new Arc([489934.0861256238,5688800.201199924],100, 314.8284, 315.3956),\n            new Arc([489934.0861256238,5688800.201199924],100, 317.785, 319.2751),\n            new Arc([489934.0861256238,5688800.201199924],100, 327.8248, 328.3648),\n            new Arc([489965.6266480153,5688777.290527716],100, 149.75, 151.519),\n            new Arc([489992.83807909803,5688761.869915968],100, 137.4628, 137.7472),\n            new Arc([489992.83807909803,5688761.869915968],100, 145.7046, 146.0651),\n            new Arc([489992.83807909803,5688761.869915968],100, 147.169, 151.3388),\n            new Arc([488342.5266280878,5686790.012793644],100, 135.1504, 136.668),\n            new Arc([488342.5266280878,5686790.012793644],100, 163.3789, 163.6473),\n            new Arc([488342.5266280878,5686790.012793644],100, 163.6473, 163.8338),\n            new Arc([488342.5266280878,5686790.012793644],100, 135.1504, 136.668),\n            new Arc([488342.5266280878,5686790.012793644],100, 163.3789, 163.6473),\n            new Arc([488342.5266280878,5686790.012793644],100, 163.6473, 163.8338),\n            new Arc([488274.8072711886,5686737.153967272],100, 249.6759, 249.7956),\n            new Arc([488263.67532210913,5686731.427613144],100, 313.8104, 314.0381),\n            new Arc([488325.519483661,5686837.145510283],100, 144.1214, 149.7723),\n            new Arc([488325.519483661,5686837.145510283],100, 158.1518, 160.8196),\n            new Arc([488325.519483661,5686837.145510283],100, 194.56, 194.56000000000003),\n            new Arc([488391.69273652154,5687387.339214568],100, 11.50999999999998, 11.51),\n            new Arc([488645.8722404994,5691767.188036224],100, 124.702, 124.961),\n            new Arc([488645.8722404994,5691767.188036224],100, 125.3986, 125.7513),\n            new Arc([488637.52327868994,5691774.239822345],100, 74.8679, 75.3968),\n            new Arc([488486.93274531123,5691940.839885505],100, 6.989999999999998, 6.99),\n            new Arc([488596.70613206574,5692027.2263242565],100, 21.610000000000003, 76.01),\n            new Arc([488563.9287264432,5692049.704564912],100, 356.2349, 356.4199),\n            new Arc([488563.9287264432,5692049.704564912],100, 358.5423, 361.19),\n            new Arc([488599.4891193356,5692053.67131912],100, 72.8, 72.80000000000003),\n            new Arc([488606.9104187218,5692051.467566568],100, 42.75999999999998, 42.76),\n            new Arc([488606.9104187218,5692051.467566568],100, 30.449999999999978, 30.45),\n            new Arc([488609.38418518385,5692052.349067528],100, 3.0699999999999825, 3.07),\n            new Arc([488618.0423678011,5692058.960327477],100, 48.499999999999986, 48.5),\n            new Arc([488722.2497800159,5692024.581829062],100, 354.2828, 355.6212),\n            new Arc([488919.22343455843,5691972.573582442],100, 107.86999999999999, 107.87),\n            new Arc([488907.47304386355,5691975.658808983],100, 93.93999999999998, 93.94),\n            new Arc([488899.1240820541,5691987.118231144],100, 164.42, 164.42000000000002),\n            new Arc([488899.1240820541,5692024.581829062],100, 107.11999999999999, 107.12),\n            new Arc([488889.84745782136,5692048.3823139],100, 238.35, 238.35000000000002),\n            new Arc([488608.14730195276,5691960.673432908],100, 17.189999999999987, 17.19),\n            new Arc([488483.5313164259,5691984.03300066],100, 278.1434, 278.2033),\n            new Arc([488510.433526701,5691946.56957246],100, 17.819999999999983, 17.82),\n            new Arc([488500.84768166044,5691940.839885505],100, 78.5343, 79.2413),\n            new Arc([488500.84768166044,5691940.839885505],100, 101.2751, 101.8319),\n            new Arc([488500.84768166044,5691940.839885505],100, 106.0826, 106.0852),\n            new Arc([488441.16806576285,5691984.914494975],100, 280.9901, 281.1296),\n            new Arc([488441.16806576285,5691984.914494975],100, 281.1296, 281.137),\n            new Arc([488441.16806576285,5691984.914494975],100, 339.8106, 339.8613),\n            new Arc([488436.22053283884,5691956.2659741305],100, 359.4033, 359.8785),\n            new Arc([488436.22053283884,5691956.2659741305],100, 249.079, 249.3629),\n            new Arc([488421.9963756819,5691917.921174346],100, 74.8397, 76.5644),\n            new Arc([488421.9963756819,5691917.921174346],100, 116.731, 119.1696),\n            new Arc([488421.9963756819,5691917.921174346],100, 74.8397, 76.5644),\n            new Arc([487757.7900806152,5690681.719955059],100, 227.9074, 228.3728),\n            new Arc([487757.7900806152,5690681.719955059],100, 272.4762, 272.7361),\n            new Arc([487770.7773545411,5690680.8385890685],100, 265.1283, 265.3933),\n            new Arc([487770.7773545411,5690680.8385890685],100, 298.874, 299.121),\n            new Arc([487817.160475705,5690687.448836119],100, 57.11999999999999, 57.12),\n            new Arc([487823.0356710524,5690677.313125968],100, 33.989999999999995, 33.99),\n            new Arc([487823.0356710524,5690677.313125968],100, 38.2294, 41.7934),\n            new Arc([487814.37748843513,5690685.245419891],100, 17.449999999999978, 17.5998),\n            new Arc([487803.55476016353,5690683.482687303],100, 15.489999999999998, 15.49),\n            new Arc([487803.55476016353,5690683.482687303],100, 15.49, 15.5198),\n            new Arc([487803.55476016353,5690683.482687303],100, 24.49999999999999, 24.5),\n            new Arc([487788.71216139116,5690683.042004209],100, 246.70999999999998, 246.71),\n            new Arc([487788.71216139116,5690683.042004209],100, 283.2936, 283.4467),\n            new Arc([487788.71216139116,5690683.042004209],100, 283.4467, 283.911),\n            new Arc([487788.71216139116,5690683.042004209],100, 287.4811, 287.7419),\n            new Arc([487779.4355371584,5690638.973804422],100, 237.3379, 238.8588),\n            new Arc([488056.8066017184,5690102.240542655],100, 252.6449, 253.3368),\n            new Arc([488056.8066017184,5690102.240542655],100, 259.5946, 260.8809),\n            new Arc([488073.1953045295,5690120.748050485],100, 314.83, 369.22999999999996),\n            new Arc([488184.5147953229,5690107.528398135],100, 92.94999999999997, 92.95),\n            new Arc([488184.5147953229,5690107.528398135],100, 98.3666, 98.6621),\n            new Arc([488184.5147953229,5690107.528398135],100, 99.1086, 99.2711),\n            new Arc([488025.5753001347,5690293.927299191],100, 59.67999999999999, 59.68),\n            new Arc([488025.5753001347,5690293.927299191],100, 84.7195, 84.84),\n            new Arc([488044.43776940805,5690282.910707768],100, 191.3503, 191.4651),\n            new Arc([488044.43776940805,5690282.910707768],100, 195.268, 195.577),\n            new Arc([488103.18972288223,5690312.435203305],100, 116.57999999999997, 116.58),\n            new Arc([488041.6547821382,5690295.689955078],100, 124.37999999999998, 124.38),\n            new Arc([488052.16828960204,5690285.995352004],100, 97.11999999999999, 97.12),\n            new Arc([488208.01557671255,5691232.590676175],100, 162.9495, 163.0789),\n            new Arc([487996.5085442053,5691586.92863963],100, 287.63000000000005, 342.03000000000003),\n            new Arc([488003.311401976,5691596.183923661],100, 283.6386, 283.8566),\n            new Arc([488008.5681557079,5691571.503187512],100, 80.87, 80.87000000000002),\n            new Arc([488826.45719223074,5690525.278850826],100, 316.41, 370.81),\n            new Arc([488940.86889110156,5690806.434117728],100, 96.68999999999998, 96.69),\n            new Arc([488939.9412286782,5690868.1308123],100, 277.6402, 278.6237),\n            new Arc([488939.9412286782,5690868.1308123],100, 282.8955, 284.0757),\n            new Arc([487965.2772426217,5691093.76805943],100, 13.54000000000001, 13.8348),\n            new Arc([487965.2772426217,5691093.76805943],100, 22.5138, 22.8283),\n            new Arc([487840.6612570947,5691081.869078169],100, 8.4029, 10.7852),\n            new Arc([487840.6612570947,5691081.869078169],100, 11.1131, 11.3241),\n            new Arc([487840.6612570947,5691081.869078169],100, 61.94, 61.94000000000001),\n            new Arc([487859.2145055602,5691110.955504731],100, 280.16, 281.9236),\n            new Arc([487891.6826903749,5690982.2708182745],100, 13.909999999999979, 13.91),\n            new Arc([493916.5409087531,5690188.609239872],100, 76.63, 76.63000000000001),\n            new Arc([493931.69272833335,5690210.201544368],100, 64.05, 64.05000000000003),\n            new Arc([487213.25223815144,5690180.236727649],100, 62.8, 96.6914),\n            new Arc([488957.2575939128,5690181.999361147],100, 54.32999999999997, 54.33),\n            new Arc([488957.2575939128,5690181.999361147],100, 55.6701, 57.6906),\n            new Arc([488784.4031623755,5687298.7949511185],100, 320.8209, 321.3478),\n            new Arc([488390.45585329045,5687299.675984252],100, 223.26, 223.26000000000002),\n            new Arc([488337.2698743559,5687156.949746723],100, 84.87999999999998, 84.88),\n            new Arc([490530.2638429834,5689709.625998666],100, 65.42000000000003, 65.4729),\n            new Arc([490530.2638429834,5689709.625998666],100, 35.60999999999997, 35.6562),\n            new Arc([489901.92716161686,5688453.90383141],100, 139.55, 139.5746),\n            new Arc([489901.92716161686,5688453.90383141],100, 140.0552, 141.4691),\n            new Arc([489901.92716161686,5688453.90383141],100, 149.6627, 149.7853),\n            new Arc([489901.92716161686,5688453.90383141],100, 193.1631, 193.1837),\n            new Arc([489901.92716161686,5688453.90383141],100, 193.2136, 499.55),\n            new Arc([489892.65053738403,5688443.330076676],100, 119.85000000000001, 134.5572),\n            new Arc([489892.65053738403,5688443.330076676],100, 140.2455, 140.6157),\n            new Arc([489828.3326093702,5688416.895744461],100, 40.36, 94.75999999999999),\n            new Arc([489764.32390216406,5688457.428419094],100, 93.1527, 93.195),\n            new Arc([489850.90572833666,5688861.002883471],100, 151.2971, 154.1051),\n            new Arc([489879.6632634582,5688846.903905587],100, 226.2393, 227.4359),\n            new Arc([490086.22276304127,5688793.151756077],100, 56.0635, 56.2378),\n            new Arc([490086.22276304127,5688793.151756077],100, 56.6236, 56.8244),\n            new Arc([490113.74341493193,5688808.131830883],100, 6.949999999999978, 6.95),\n            new Arc([490113.74341493193,5688808.131830883],100, 33.2355, 33.5482),\n            new Arc([490145.90237893874,5689103.332535903],100, 334.5842, 334.8873),\n            new Arc([490145.90237893874,5689103.332535903],100, 336.3348, 336.3519),\n            new Arc([490645.6032042774,5689009.043491641],100, 111.8, 111.80000000000001),\n            new Arc([490650.2415163939,5688977.760897256],100, 43.199999999999974, 43.2),\n            new Arc([490800.83204977255,5689218.33126571],100, 146.7893, 149.131),\n            new Arc([491029.9646683221,5689267.679832566],100, 278.3695, 278.6086),\n            new Arc([491029.9646683221,5689267.679832566],100, 279.3141, 283.4915),\n            new Arc([491029.9646683221,5689267.679832566],100, 331.78, 331.78000000000003),\n            new Arc([491042.9519422479,5689234.193275388],100, 346.6761, 356.0078),\n            new Arc([491049.4455792108,5689188.369768536],100, 358.96, 367.1163),\n            new Arc([491051.30090405734,5689169.864188014],100, 45.8096, 47.619),\n            new Arc([491053.15622890403,5689147.393177373],100, 372.2489, 375.1663),\n            new Arc([491050.9916832496,5689126.24404241],100, 53.3676, 53.4377),\n            new Arc([491049.4455792108,5689136.818603642],100, 347.53, 347.530001),\n            new Arc([491047.8994751721,5689183.5230651805],100, 3.0500000000000007, 8.024),\n            new Arc([491047.8994751721,5689183.5230651805],100, 43.2861, 43.6608),\n            new Arc([491046.3533711332,5689217.89065473],100, 21.199999999999978, 21.2),\n            new Arc([490717.9608732931,5689261.951859959],100, 264.2995, 264.3755),\n            new Arc([489901.61794080905,5689558.048783805],100, 2.889999999999997, 2.89),\n            new Arc([489890.4859917298,5689559.811294814],100, 303.78, 306.7307),\n            new Arc([489890.4859917298,5689559.811294814],100, 306.8469, 306.9021),\n            new Arc([489890.4859917298,5689559.811294814],100, 21.21999999999998, 21.22),\n            new Arc([489717.0131185769,5689880.153432964],100, 52.519999999999996, 92.12),\n            new Arc([489698.7690909192,5689933.471462691],100, 344.4286, 354.4986),\n            new Arc([489083.7289042863,5689258.8675685385],100, 222.25, 222.25000000000003),\n            new Arc([489067.95864309056,5689244.767964126],100, 55.999999999999986, 56),\n            new Arc([489067.95864309056,5689244.767964126],100, 103.9238, 106.0052),\n            new Arc([489067.95864309056,5689244.767964126],100, 106.1809, 106.2375),\n            new Arc([488977.3569464172,5689331.569006175],100, 197.3797, 197.7558),\n            new Arc([488952.61928179645,5689305.132051459],100, 20.129999999999985, 20.13),\n            new Arc([488952.61928179645,5689305.132051459],100, 45.373, 46.2441),\n            new Arc([488952.61928179645,5689305.132051459],100, 49.1021, 49.775),\n            new Arc([489058.68201885786,5690321.248504425],100, 111.5334, 112.123),\n            new Arc([489058.68201885786,5690321.248504425],100, 112.5867, 112.7003),\n            new Arc([489164.7447559192,5690533.211010033],100, 209.0545, 211.7253),\n            new Arc([489164.7447559192,5690533.211010033],100, 212.6526, 212.7769),\n            new Arc([489164.7447559192,5690533.211010033],100, 213.3008, 213.4917),\n            new Arc([489555.9090777345,5690950.981328211],100, 46.739999999999995, 46.74),\n            new Arc([489555.9090777345,5690950.981328211],100, 78.336, 82.9186),\n            new Arc([489329.5594464548,5690960.235954726],100, 124.05, 124.05000000000001),\n            new Arc([489362.64607288496,5691011.797620463],100, 222.8596, 227.81000000000003),\n            new Arc([489664.13636045007,5691378.466920215],100, 52.63999999999997, 52.64),\n            new Arc([489489.1173832585,5691544.6188916415],100, 98.55999999999999, 98.56),\n            new Arc([489859.25469014613,5691225.5393167585],100, 197.853, 198.27),\n            new Arc([489895.43352465396,5691229.505705746],100, 102.99999999999999, 103.4586),\n            new Arc([489895.43352465396,5691229.505705746],100, 108.4909, 119.7107),\n            new Arc([489039.8195495845,5690553.922792213],100, 236.43, 236.7088),\n            new Arc([488387.0544244051,5691601.472661694],100, 14.459999999999969, 14.46),\n            new Arc([488426.9439086061,5691633.205155494],100, 86.82999999999997, 86.83),\n            new Arc([488106.5911517675,5692824.577257024],100, 82.89999999999999, 82.9),\n            new Arc([488095.76842349605,5692821.4917378435],100, 94.09, 94.09000000000003),\n            new Arc([487289.01133605244,5693465.947549609],100, 154.2883, 159.8829),\n            new Arc([487276.02406212664,5693437.735106368],100, 174.9647, 175.0436),\n            new Arc([487276.02406212664,5693437.735106368],100, 196.17, 196.17000000000004),\n            new Arc([487232.73314904026,5693497.686654571],100, 203.64, 218.7426),\n            new Arc([487241.39133165753,5693515.760361856],100, 34.80999999999999, 34.81),\n            new Arc([487241.39133165753,5693515.760361856],100, 50.9611, 53.5271),\n            new Arc([487241.39133165753,5693515.760361856],100, 55.9843, 56.1558),\n            new Arc([487241.39133165753,5693515.760361856],100, 64.1614, 65.491),\n            new Arc([487241.39133165753,5693515.760361856],100, 75.0333, 79.1707),\n            new Arc([490619.93787723343,5686527.924174413],100, 89.6199, 92.0566),\n            new Arc([490619.93787723343,5686527.924174413],100, 100.622, 104.5125),\n            new Arc([490619.93787723343,5686527.924174413],100, 122.5653, 124.4248),\n            new Arc([490361.1200611391,5686646.854193942],100, 72.32999999999997, 72.33),\n            new Arc([490361.1200611391,5686646.854193942],100, 81.4116, 81.547),\n            new Arc([490352.4618785219,5686658.306797703],100, 301.7839, 301.8131),\n            new Arc([490352.4618785219,5686658.306797703],100, 311.1782, 311.6841),\n            new Arc([490352.4618785219,5686658.306797703],100, 312.4587, 314.81),\n            new Arc([490345.04057913565,5686653.0209787665],100, 55.61999999999999, 55.62),\n            new Arc([490345.04057913565,5686653.0209787665],100, 57.6477, 61.0102),\n            new Arc([490345.04057913565,5686653.0209787665],100, 61.4139, 61.7839),\n            new Arc([490012.31898998684,5687027.881373262],100, 65.42999999999999, 65.43),\n            new Arc([490012.31898998684,5687027.881373262],100, 106.4296, 106.4321),\n            new Arc([490012.31898998684,5687027.881373262],100, 106.8502, 106.9752),\n            new Arc([490012.31898998684,5687027.881373262],100, 107.1121, 113.9726),\n            new Arc([490001.18704090756,5687068.848266398],100, 34.62999999999998, 34.63),\n            new Arc([489884.3015755745,5687404.079024475],100, 73.84999999999998, 73.85),\n            new Arc([489884.3015755745,5687404.079024475],100, 108.9817, 113.44999999999999),\n            new Arc([489861.4192358004,5687424.343046748],100, 44.719999999999985, 44.72),\n            new Arc([489576.31765104656,5688245.955613515],100, 85.30999999999999, 85.31)];\n}\n\n/**\n * Sectors from months 02/2018\n * @param {number=} r radius\n * @returns {Array<Arc>}  sectors\n */\nexport function sectorsStEtienne(r=100) {\n    var arcs = [new Arc([490530.2638429834,5689709.625998666],r, 65.42000000000003, 65.4729),\n\n                new Arc([490530.2638429834,5689709.625998666],r, 35.60999999999997, 35.6562),\n\n                new Arc([489901.92716161686,5688453.90383141],r, 139.55, 139.5746),\n\n                new Arc([489901.92716161686,5688453.90383141],r, 140.0552, 141.4691),\n\n                new Arc([489901.92716161686,5688453.90383141],r, 149.6627, 149.7853),\n\n                new Arc([489901.92716161686,5688453.90383141],r, 193.1631, 193.1837),\n\n                new Arc([489901.92716161686,5688453.90383141],r, 193.2136, 199.55),\n\n                new Arc([489892.65053738403,5688443.330076676],r, 119.85000000000001, 134.5572),\n\n                new Arc([489892.65053738403,5688443.330076676],r, 140.2455, 140.6157),\n\n                new Arc([489764.32390216406,5688457.428419094],r, 93.1527, 93.195),\n\n                new Arc([489850.90572833666,5688861.002883471],r, 151.2971, 154.1051),\n\n                new Arc([489879.6632634582,5688846.903905587],r, 226.2393, 227.4359),\n\n                new Arc([490086.22276304127,5688793.151756077],r, 56.0635, 56.2378),\n\n                new Arc([490086.22276304127,5688793.151756077],r, 56.6236, 56.8244),\n\n                new Arc([490113.74341493193,5688808.131830883],r, 6.949999999999978, 6.95),\n\n                new Arc([490113.74341493193,5688808.131830883],r, 33.2355, 33.5482),\n\n                new Arc([490145.90237893874,5689103.332535903],r, 334.5842, 334.8873),\n\n                new Arc([490145.90237893874,5689103.332535903],r, 336.3348, 336.3519),\n\n                new Arc([490645.6032042774,5689009.043491641],r, 111.8, 111.80000000000001),\n\n                new Arc([490650.2415163939,5688977.760897256],r, 43.199999999999974, 43.2),\n\n                new Arc([490800.83204977255,5689218.33126571],r, 146.7893, 149.131),\n\n                new Arc([491029.9646683221,5689267.679832566],r, 278.3695, 278.6086),\n\n                new Arc([491029.9646683221,5689267.679832566],r, 279.3141, 283.4915),\n\n                new Arc([491029.9646683221,5689267.679832566],r, 331.78, 331.78000000000003),\n\n                new Arc([491042.9519422479,5689234.193275388],r, 346.6761, 356.0078),\n\n                new Arc([491049.4455792108,5689188.369768536],r, 358.96, 367.1163),\n\n                new Arc([491051.30090405734,5689169.864188014],r, 45.8096, 47.619),\n\n                new Arc([491053.15622890403,5689147.393177373],r, 372.2489, 375.1663),\n\n                new Arc([491050.9916832496,5689126.24404241],r, 53.3676, 53.4377),\n\n                new Arc([491049.4455792108,5689136.818603642],r, 347.53, 347.530001),\n\n                new Arc([491047.8994751721,5689183.5230651805],r, 3.0500000000000007, 8.024),\n\n                new Arc([491047.8994751721,5689183.5230651805],r, 43.2861, 43.6608),\n\n                new Arc([491046.3533711332,5689217.89065473],r, 21.199999999999978, 21.2),\n\n                new Arc([490717.9608732931,5689261.951859959],r, 264.2995, 264.3755),\n\n                new Arc([489901.61794080905,5689558.048783805],r, 2.889999999999997, 2.89),\n\n                new Arc([489890.4859917298,5689559.811294814],r, 303.78, 306.7307),\n\n                new Arc([489890.4859917298,5689559.811294814],r, 306.8469, 306.9021),\n\n                new Arc([489890.4859917298,5689559.811294814],r, 21.21999999999998, 21.22),\n\n                new Arc([489698.7690909192,5689933.471462691],r, 344.4286, 354.4986),\n\n                new Arc([489083.7289042863,5689258.8675685385],r, 222.25, 222.25000000000003),\n\n                new Arc([489067.95864309056,5689244.767964126],r, 55.999999999999986, 56),\n\n                new Arc([489067.95864309056,5689244.767964126],r, 103.9238, 106.0052),\n\n                new Arc([489067.95864309056,5689244.767964126],r, 106.1809, 106.2375),\n\n                new Arc([488977.3569464172,5689331.569006175],r, 197.3797, 197.7558),\n\n                new Arc([488952.61928179645,5689305.132051459],r, 20.129999999999985, 20.13),\n\n                new Arc([488952.61928179645,5689305.132051459],r, 45.373, 46.2441),\n\n                new Arc([488952.61928179645,5689305.132051459],r, 49.1021, 49.775),\n\n                new Arc([489058.68201885786,5690321.248504425],r, 111.5334, 112.123),\n\n                new Arc([489058.68201885786,5690321.248504425],r, 112.5867, 112.7003),\n\n                new Arc([489164.7447559192,5690533.211010033],r, 209.0545, 211.7253),\n\n                new Arc([489164.7447559192,5690533.211010033],r, 212.6526, 212.7769),\n\n                new Arc([489164.7447559192,5690533.211010033],r, 213.3008, 213.4917),\n\n                new Arc([489555.9090777345,5690950.981328211],r, 46.739999999999995, 46.74),\n\n                new Arc([489555.9090777345,5690950.981328211],r, 78.336, 82.9186),\n\n                new Arc([489329.5594464548,5690960.235954726],r, 124.05, 124.05000000000001),\n\n                new Arc([489362.64607288496,5691011.797620463],r, 222.8596, 227.81000000000003),\n\n                new Arc([489664.13636045007,5691378.466920215],r, 52.63999999999997, 52.64),\n\n                new Arc([489489.1173832585,5691544.6188916415],r, 98.55999999999999, 98.56),\n\n                new Arc([489859.25469014613,5691225.5393167585],r, 197.853, 198.27),\n\n                new Arc([489895.43352465396,5691229.505705746],r, 102.99999999999999, 103.4586),\n\n                new Arc([489895.43352465396,5691229.505705746],r, 108.4909, 119.7107),\n\n                new Arc([489039.8195495845,5690553.922792213],r, 236.43, 236.7088),\n\n                new Arc([488387.0544244051,5691601.472661694],r, 14.459999999999969, 14.46),\n\n                new Arc([488426.9439086061,5691633.205155494],r, 86.82999999999997, 86.83),\n\n                new Arc([488106.5911517675,5692824.577257024],r, 82.89999999999999, 82.9),\n\n                new Arc([488095.76842349605,5692821.4917378435],r, 94.09, 94.09000000000003),\n\n                new Arc([487289.01133605244,5693465.947549609],r, 154.2883, 159.8829),\n\n                new Arc([487276.02406212664,5693437.735106368],r, 174.9647, 175.0436),\n\n                new Arc([487276.02406212664,5693437.735106368],r, 196.17, 196.17000000000004),\n\n                new Arc([487232.73314904026,5693497.686654571],r, 203.64, 218.7426),\n\n                new Arc([487241.39133165753,5693515.760361856],r, 34.80999999999999, 34.81),\n\n                new Arc([487241.39133165753,5693515.760361856],r, 50.9611, 53.5271),\n\n                new Arc([487241.39133165753,5693515.760361856],r, 55.9843, 56.1558),\n\n                new Arc([487241.39133165753,5693515.760361856],r, 64.1614, 65.491),\n\n                new Arc([487241.39133165753,5693515.760361856],r, 75.0333, 79.1707),\n\n                new Arc([490619.93787723343,5686527.924174413],r, 89.6199, 92.0566),\n\n                new Arc([490619.93787723343,5686527.924174413],r, 100.622, 104.5125),\n\n                new Arc([490619.93787723343,5686527.924174413],r, 122.5653, 124.4248),\n\n                new Arc([490361.1200611391,5686646.854193942],r, 72.32999999999997, 72.33),\n\n                new Arc([490361.1200611391,5686646.854193942],r, 81.4116, 81.547),\n\n                new Arc([490352.4618785219,5686658.306797703],r, 301.7839, 301.8131),\n\n                new Arc([490352.4618785219,5686658.306797703],r, 311.1782, 311.6841),\n\n                new Arc([490352.4618785219,5686658.306797703],r, 312.4587, 314.81),\n\n                new Arc([490345.04057913565,5686653.0209787665],r, 55.61999999999999, 55.62),\n\n                new Arc([490345.04057913565,5686653.0209787665],r, 57.6477, 61.0102),\n\n                new Arc([490345.04057913565,5686653.0209787665],r, 61.4139, 61.7839),\n\n                new Arc([490012.31898998684,5687027.881373262],r, 65.42999999999999, 65.43),\n\n                new Arc([490012.31898998684,5687027.881373262],r, 106.4296, 106.4321),\n\n                new Arc([490012.31898998684,5687027.881373262],r, 106.8502, 106.9752),\n\n                new Arc([490012.31898998684,5687027.881373262],r, 107.1121, 113.9726),\n\n                new Arc([490001.18704090756,5687068.848266398],r, 34.62999999999998, 34.63),\n\n                new Arc([489884.3015755745,5687404.079024475],r, 73.84999999999998, 73.85),\n\n                new Arc([489884.3015755745,5687404.079024475],r, 108.9817, 113.44999999999999),\n\n                new Arc([489861.4192358004,5687424.343046748],r, 44.719999999999985, 44.72),\n\n                new Arc([489576.31765104656,5688245.955613515],r, 85.30999999999999, 85.31)];\n\n    var arcs2 = [];\n    for (var arc of arcs) {\n        if (arc.omega - arc.alpha > 1)\n            arcs2.push(arc);\n\n    }\n\n    arcs = arcs2;\n\n    var length = arcs.length;\n    for (var i  = 0; i < length; i++) {\n        arcs[i].computeGeometry();\n    }\n    arcs = arcs.slice(0,length);\n\n    return arcs;\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/datastetienne.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 191,
    "kind": "function",
    "name": "sectorsStEtienne2345_r1500",
    "memberof": "lib/datastetienne.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/datastetienne.js~sectorsStEtienne2345_r1500",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/datastetienne.js",
    "importStyle": "{sectorsStEtienne2345_r1500}",
    "description": "Sectors from months 02/2018 through 05/2018",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Arc>}  sectors"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": "sectors"
    },
    "params": []
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "sectorsStEtienne2345_r300",
    "memberof": "lib/datastetienne.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/datastetienne.js~sectorsStEtienne2345_r300",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/datastetienne.js",
    "importStyle": "{sectorsStEtienne2345_r300}",
    "description": "Sectors from months 02/2018 through 05/2018 (radius 300)",
    "lineNumber": 595,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Arc>}  sectors"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": "sectors"
    },
    "params": []
  },
  {
    "__docId__": 193,
    "kind": "function",
    "name": "sectorsStEtienne",
    "memberof": "lib/datastetienne.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/datastetienne.js~sectorsStEtienne",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/datastetienne.js",
    "importStyle": "{sectorsStEtienne}",
    "description": "Sectors from months 02/2018",
    "lineNumber": 1057,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Arc>}  sectors"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number="
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "radius"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Arc>"
      ],
      "spread": false,
      "description": "sectors"
    }
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "lib/distance.js",
    "content": "/**\n * Computes the euclidean distance between two points\n * @param {Array} point1\n * @param {Array} point2\n * @returns {Number} the euclidean distance between point 1 and point 2\n */\nexport function euclideanDistance(point1, point2) {\n    var sumDiffSq = 0;\n    for (var i = 0; i < point1.length; i++) {\n        sumDiffSq += Math.pow((point1[i] - point2[i]), 2);\n    }\n    return Math.sqrt(sumDiffSq);\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/distance.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "euclideanDistance",
    "memberof": "lib/distance.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/distance.js~euclideanDistance",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/distance.js",
    "importStyle": "{euclideanDistance}",
    "description": "Computes the euclidean distance between two points",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Number} the euclidean distance between point 1 and point 2"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "point1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "point2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "the euclidean distance between point 1 and point 2"
    }
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "lib/dual.js",
    "content": "/**\n * @fileOverview Affine dual\n * @name dual.js\n * @author Florent Grélard\n * @license\n */\nimport {angleToVector, boundingBox, bboxArrayToObject} from './geometry.js';\n\n/** Class representing the affine dual transform\n */\nexport default class Dual {\n\n    /**\n     * Primal line to dual line\n     * @param {Array<number>} vector coefficients\n     * @param {Array<number>} center position\n     * @param {Array<number>} g barycenter\n     * @param {boolean=} vertical whether the line is vertical\n     * @returns {Array<number>} the dual of the line, a point\n     */\n    static dualLine(vector, center, g, vertical = false) {\n        var centerNorm = [center[0] - g[0],\n                          center[1] - g[1]];\n        var x =  (vertical) ? vector[0] / vector[1] : vector[1] / vector[0];\n        var y = (vertical) ? centerNorm[0] - x * centerNorm[1] : centerNorm[1] - x * centerNorm[0];\n        return [x, -y];\n    }\n\n    /**\n     * Primal cone to dual cone\n     * @param {Arc} arc\n     * @param {Array<number>} g barycenter\n     * @param {boolean=} vertical whether the line is vertical\n     * @returns {Array<Array<number>>}  dual of a cone, a pair of coordinates\n     */\n    static dualCone(arc, g, vertical = false) {\n        var dual = [];\n        var firstVector = angleToVector(arc.alpha);\n        var secondVector = angleToVector(arc.omega);\n        var firstLine = this.dualLine(firstVector, arc.center, g, vertical);\n        var secondLine = this.dualLine(secondVector, arc.center, g, vertical);\n\n        var positions = [firstLine, secondLine];\n        return positions;\n    }\n\n    /**\n     * bounding dual rectangle of coordinates\n     * @param {Arc} arc\n     * @param {Array<number>} g barycenter\n     * @param {boolean=} vertical whether the sector contains the vertical line\n     * @returns {Array} the bounding box\n     */\n    static dualBoundingRectangle(arc, g, vertical = false) {\n        var dualArc = this.dualCone(arc, g, vertical);\n        var bbox = boundingBox(dualArc);\n        var bboxCoordinates = bboxArrayToObject(bbox, arc);\n        return [bboxCoordinates];\n    }\n\n    /**\n     * Intersection between primal point and rectangle\n     * @param {Array<number>} point request point\n     * @param {Array} rectangle the bounding box\n     * @returns {boolean} whether it intersects or not\n     */\n    static intersectionRequestRectangle(point, rectangle) {\n        var a = point[0];\n        var b = -point[1];\n        var low = [rectangle.minX, rectangle.minY];\n        var up = [rectangle.maxX, rectangle.maxY];\n\n        var lowI = [(low[1] - b) / a, a * low[0] + b];\n        var upI = [(up[1] - b) / a, a * up[0] + b];\n\n        var condition = ((lowI[0] >= low[0] && lowI[0] <= up[0]) ||\n                         (upI[0] >= low[0] && upI[0] <= up[0]) ||\n                         (lowI[1] >= low[1] && lowI[1] <= up[1]) ||\n                         (upI[1] >= low[1] && upI[1] <= up[1]));\n        return condition;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/dual.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "Dual",
    "memberof": "lib/dual.js",
    "static": true,
    "longname": "lib/dual.js~Dual",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/dual.js",
    "importStyle": "Dual",
    "description": "Class representing the affine dual transform",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "dualLine",
    "memberof": "lib/dual.js~Dual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dual.js~Dual.dualLine",
    "access": "public",
    "description": "Primal line to dual line",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} the dual of the line, a point"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": "coefficients"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": "position"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "barycenter"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "vertical",
        "description": "whether the line is vertical"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "the dual of the line, a point"
    }
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "dualCone",
    "memberof": "lib/dual.js~Dual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dual.js~Dual.dualCone",
    "access": "public",
    "description": "Primal cone to dual cone",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>}  dual of a cone, a pair of coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "barycenter"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "vertical",
        "description": "whether the line is vertical"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "dual of a cone, a pair of coordinates"
    }
  },
  {
    "__docId__": 200,
    "kind": "method",
    "name": "dualBoundingRectangle",
    "memberof": "lib/dual.js~Dual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dual.js~Dual.dualBoundingRectangle",
    "access": "public",
    "description": "bounding dual rectangle of coordinates",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} the bounding box"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "barycenter"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "vertical",
        "description": "whether the sector contains the vertical line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the bounding box"
    }
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "intersectionRequestRectangle",
    "memberof": "lib/dual.js~Dual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/dual.js~Dual.intersectionRequestRectangle",
    "access": "public",
    "description": "Intersection between primal point and rectangle",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether it intersects or not"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "request point"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "rectangle",
        "description": "the bounding box"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether it intersects or not"
    }
  },
  {
    "__docId__": 202,
    "kind": "file",
    "name": "lib/dualrtree.js",
    "content": "/**\n * @fileOverview Dual R-tree, using the R-bush library\n * @name dualrtree.js\n * @author Florent Grélard\n * @license\n */\nimport {centerOfMass} from './geometry.js';\nimport {euclideanDistance} from './distance.js';\nimport rbush from 'rbush';\n\n/** Dual R-tree constructed from different types of dualities\n * {@link PolarDual} and {@link Dual}\n */\nexport default class DualRtree {\n    /**\n     * Constructor\n     * @param {Duality} duality type of duality\n     * @param {number} branchingFactor\n     * @param {boolean=} divide creates two data structures if true (for vertical lines)\n     */\n    constructor(duality, branchingFactor, divide = false) {\n        /**\n         * Whether to create two data structures or not\n         * @type {boolean}\n         */\n        this.divide = divide;\n\n        /**\n         * Type of duality : polar or affine\n         * @type {Duality}\n         */\n        this.Duality = duality;\n\n        /**\n         * Origin (barycenter)\n         * @type {Array<number>}\n         */\n        this.origin = [];\n\n        /**\n         * Data structure\n         * @type {rbush}\n         */\n        this.rtree = rbush(branchingFactor);\n        if (this.divide) {\n            /**\n             * Data structure for vertical lines\n             * @type {rbush}\n             */\n            this.rtreeVertical = rbush(branchingFactor);\n        }\n    }\n\n\n    /**\n     * Dual representation of angular sectors\n     * @param {Arc} arcs\n     * @returns {Array<Object>} dual representation\n     */\n    dualRepresentation(arcs) {\n        var dual = [];\n        var dualVertical = [];\n        for (var arc of arcs) {\n            var bboxCoordinates = this.Duality.dualBoundingRectangle(arc, this.origin, false);\n            if (this.divide) {\n                var bboxCoordinatesVertical = this.Duality.dualBoundingRectangle(arc, this.origin, true);\n                var bboxH = bboxCoordinates[0];\n                var bboxV = bboxCoordinates[1];\n                var rectangleH = [ [bboxH.minX, bboxH.minY],\n                                   [bboxH.maxX, bboxH.maxY] ];\n                var rectangleV = [ [bboxV.minX, bboxV.minY],\n                                   [bboxV.maxX, bboxV.maxY] ];\n\n                var dH = euclideanDistance(rectangleH[0], rectangleH[1]);\n                var dV = euclideanDistance(rectangleV[0], rectangleV[1]);\n\n                if (dH <= dV) {\n                    dual.push(bboxCoordinates);\n                }\n                else {\n                    dualVertical.push(bboxCoordinatesVertical);\n                }\n            }\n            else {\n                for (let rect of bboxCoordinates) {\n                    dual.push(rect);\n                }\n            }\n\n\n        }\n        return [dual, dualVertical];\n    }\n\n    /**\n     * Inserts angular sectors into the data structure as their duals\n     * @param {Arc} arcs\n     * @returns {rbush} constructed dual R-tree\n     */\n    load(arcs) {\n        this.origin = centerOfMass(arcs.map(function(arc) {\n            return arc.center;\n        }));\n        var dual = this.dualRepresentation(arcs);\n        this.rtree.load(dual[0]);\n        if (this.divide) {\n            var dualY = dual[1];\n            this.rtreeVertical.load(dualY);\n        }\n    }\n\n    /**\n     * Search recursive in the dual R-tree\n     * @param {Array} hits\n     * @param {Node} node\n     * @param {Array} p current point\n     * @param {Object} number number of hits\n     */\n    searchRecursive(hits, node, p, number = {cpt: 0}) {\n        number.cpt++;\n        if (node.leaf) {\n            hits.push(...node.children);\n            return;\n        }\n        for (var child of node.children) {\n            var rectangle = {minX: child.minX,\n                             minY: child.minY,\n                             maxX: child.maxX,\n                             maxY: child.maxY};\n            if (this.Duality.intersectionRequestRectangle(p, rectangle)) {\n                this.searchRecursive(hits, child, p, number);\n            }\n        }\n        return;\n    }\n\n    /**\n     * Search function\n     * @param {Array<number>} p point to search for\n     * @returns {Object} hits and number of hits\n     */\n    search(p) {\n        var hits = [];\n        var request = [p[0] - this.origin[0],\n                       p[1] - this.origin[1]];\n        var number = {cpt : 0};\n        this.searchRecursive(hits, this.rtree.data, request, number);\n        if (this.divide) {\n            request = [request[1], request[0]];\n            this.searchRecursive(hits, this.rtreeVertical.data, request, number);\n        }\n        return {hits: hits, number: number};\n    }\n\n    /**\n     * Getter for the data structure\n     * @returns {Array} the data structure\n     */\n    dataStructure() {\n        return this.rtree.data;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/dualrtree.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 203,
    "kind": "class",
    "name": "DualRtree",
    "memberof": "lib/dualrtree.js",
    "static": true,
    "longname": "lib/dualrtree.js~DualRtree",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/dualrtree.js",
    "importStyle": "DualRtree",
    "description": "Dual R-tree constructed from different types of dualities\n{@link PolarDual} and {@link Dual}",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 204,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/dualrtree.js~DualRtree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Duality"
        ],
        "spread": false,
        "optional": false,
        "name": "duality",
        "description": "type of duality"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "branchingFactor",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "divide",
        "description": "creates two data structures if true (for vertical lines)"
      }
    ]
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "divide",
    "memberof": "lib/dualrtree.js~DualRtree",
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#divide",
    "access": "public",
    "description": "Whether to create two data structures or not",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "Duality",
    "memberof": "lib/dualrtree.js~DualRtree",
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#Duality",
    "access": "public",
    "description": "Type of duality : polar or affine",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Duality"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "origin",
    "memberof": "lib/dualrtree.js~DualRtree",
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#origin",
    "access": "public",
    "description": "Origin (barycenter)",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "rtree",
    "memberof": "lib/dualrtree.js~DualRtree",
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#rtree",
    "access": "public",
    "description": "Data structure",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "rbush"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "rtreeVertical",
    "memberof": "lib/dualrtree.js~DualRtree",
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#rtreeVertical",
    "access": "public",
    "description": "Data structure for vertical lines",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "rbush"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "dualRepresentation",
    "memberof": "lib/dualrtree.js~DualRtree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#dualRepresentation",
    "access": "public",
    "description": "Dual representation of angular sectors",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} dual representation"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arcs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "dual representation"
    }
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "load",
    "memberof": "lib/dualrtree.js~DualRtree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#load",
    "access": "public",
    "description": "Inserts angular sectors into the data structure as their duals",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{rbush} constructed dual R-tree"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arcs",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "rbush"
      ],
      "spread": false,
      "description": "constructed dual R-tree"
    }
  },
  {
    "__docId__": 213,
    "kind": "method",
    "name": "searchRecursive",
    "memberof": "lib/dualrtree.js~DualRtree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#searchRecursive",
    "access": "public",
    "description": "Search recursive in the dual R-tree",
    "lineNumber": 119,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "hits",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "current point"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "number",
        "description": "number of hits"
      }
    ],
    "return": null
  },
  {
    "__docId__": 214,
    "kind": "method",
    "name": "search",
    "memberof": "lib/dualrtree.js~DualRtree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#search",
    "access": "public",
    "description": "Search function",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} hits and number of hits"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "point to search for"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "hits and number of hits"
    }
  },
  {
    "__docId__": 215,
    "kind": "method",
    "name": "dataStructure",
    "memberof": "lib/dualrtree.js~DualRtree",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/dualrtree.js~DualRtree#dataStructure",
    "access": "public",
    "description": "Getter for the data structure",
    "lineNumber": 159,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} the data structure"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the data structure"
    },
    "params": []
  },
  {
    "__docId__": 216,
    "kind": "file",
    "name": "lib/exiftool-util.js",
    "content": "import transpose from 'transpose';\nimport Arc from './arc';\n\n/**\n * Converts lon lat to decimal values\n * @param {number} deg\n * @param {number} min\n * @param {number} sec\n * @returns {number} decimal\n */\nexport function lonLatToDecimal(deg, min, sec) {\n    return deg + min / 60 + sec / 3600;\n}\n\n\n/**\n * Converts raw exif to json\n * @param {string} metadata\n * @returns {json} converted json\n */\nexport function convertMetadataToJSON(metadata) {\n    const transposed = transpose(metadata.data);\n    const headers = transposed.shift();\n    const res = transposed.map(function(row) {\n        return row.reduce(function(acc, col, ind) {\n            acc[headers[ind]] = col;\n            return acc;\n        }, {});\n    })[0];\n    return res;\n}\n\n/**\n * Array of coordinates from a given string\n * @param {string} positionString\n * @returns {Array<number>} coordinates\n */\nexport function createPositionArray(positionString) {\n    var patt1 = /[0-9.]/g;\n    var patt2 = /[a-zA-Z]/g;\n    var arrayPos = [];\n    var numberString = \"\";\n    for (var i = 0; i < positionString.length; i++) {\n        var character = positionString.charAt(i);\n        if (character.match(patt1)) {\n            numberString += character;\n        }\n        else {\n            if (numberString != '')\n                arrayPos.push(Number(numberString));\n            numberString = '';\n        }\n    }\n    return arrayPos;\n}\n\n/**\n * Get position from metadata\n * @param {json} mapMetadata metadata\n * @returns {Array<number>}  position\n */\nexport function getPosition(mapMetadata) {\n    if (mapMetadata.hasOwnProperty('GPSPosition')) {\n        var positionString = mapMetadata.GPSPosition;\n        var positionSplit = positionString.split(\",\");\n        if (positionSplit.length >= 2) {\n            var firstPos = positionSplit[0];\n            var secondPos = positionSplit[1];\n            var fPosDMS = createPositionArray(firstPos);\n            var sPosDMS = createPositionArray(secondPos);\n            var fPosDec = lonLatToDecimal(fPosDMS[0], fPosDMS[1], fPosDMS[2]);\n            var sPosDec = lonLatToDecimal(sPosDMS[0], sPosDMS[1], sPosDMS[2]);\n            var lonLat = [sPosDec, fPosDec];\n            return lonLat;\n        }\n    }\n    return null;\n}\n\n/**\n * Computes the starting and ending angle of the visibility cone (=angular sector), corresponding to the field of view and the direction of the picture\n * @param {number} direction angle in degrees\n * @param {number} fov angle of aperture in degrees\n * @returns {Array<number>} angles of the visibility cone\n */\nexport function computeAlphaOmegaFromDir(direction, fov) {\n    var dirTrigRad = (360 - direction + 90) % 360;\n    var alpha = (dirTrigRad - fov / 2) % 360;\n    if (alpha < 0) {\n        alpha += 360;\n    }\n    var omega = (alpha + fov);\n    return [alpha, omega];\n}\n\n/**\n * Orientation of a picture\n * @param {json} mapMetadata\n * @param {Array} position\n * @returns {Arc} angular sector corresponding to the visibility cone\n */\nexport function getOrientation(mapMetadata, position) {\n    if (mapMetadata.hasOwnProperty('GPSImgDirection') &&\n        mapMetadata.hasOwnProperty('Orientation') &&\n        mapMetadata.hasOwnProperty('FOV')) {\n        var dir = mapMetadata.GPSImgDirection;\n        var orientation = mapMetadata.Orientation;\n        var fov = Number(mapMetadata.FOV.match(/[0-9.]+/g));\n        var angles = computeAlphaOmegaFromDir(dir, fov);\n        var radius = 300;\n        var arc = new Arc([position[0], position[1]], radius, angles[0], angles[1]);\n        arc.computeGeometry();\n        return arc;\n    }\n    return null;\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/exiftool-util.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 217,
    "kind": "function",
    "name": "lonLatToDecimal",
    "memberof": "lib/exiftool-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/exiftool-util.js~lonLatToDecimal",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/exiftool-util.js",
    "importStyle": "{lonLatToDecimal}",
    "description": "Converts lon lat to decimal values",
    "lineNumber": 11,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} decimal"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "deg",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "sec",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "decimal"
    }
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "convertMetadataToJSON",
    "memberof": "lib/exiftool-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/exiftool-util.js~convertMetadataToJSON",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/exiftool-util.js",
    "importStyle": "{convertMetadataToJSON}",
    "description": "Converts raw exif to json",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{json} converted json"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "json"
      ],
      "spread": false,
      "description": "converted json"
    }
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "createPositionArray",
    "memberof": "lib/exiftool-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/exiftool-util.js~createPositionArray",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/exiftool-util.js",
    "importStyle": "{createPositionArray}",
    "description": "Array of coordinates from a given string",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "positionString",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "coordinates"
    }
  },
  {
    "__docId__": 220,
    "kind": "function",
    "name": "getPosition",
    "memberof": "lib/exiftool-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/exiftool-util.js~getPosition",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/exiftool-util.js",
    "importStyle": "{getPosition}",
    "description": "Get position from metadata",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>}  position"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "json"
        ],
        "spread": false,
        "optional": false,
        "name": "mapMetadata",
        "description": "metadata"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "position"
    }
  },
  {
    "__docId__": 221,
    "kind": "function",
    "name": "computeAlphaOmegaFromDir",
    "memberof": "lib/exiftool-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/exiftool-util.js~computeAlphaOmegaFromDir",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/exiftool-util.js",
    "importStyle": "{computeAlphaOmegaFromDir}",
    "description": "Computes the starting and ending angle of the visibility cone (=angular sector), corresponding to the field of view and the direction of the picture",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} angles of the visibility cone"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": "angle in degrees"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fov",
        "description": "angle of aperture in degrees"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "angles of the visibility cone"
    }
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "getOrientation",
    "memberof": "lib/exiftool-util.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/exiftool-util.js~getOrientation",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/exiftool-util.js",
    "importStyle": "{getOrientation}",
    "description": "Orientation of a picture",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Arc} angular sector corresponding to the visibility cone"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "json"
        ],
        "spread": false,
        "optional": false,
        "name": "mapMetadata",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": "angular sector corresponding to the visibility cone"
    }
  },
  {
    "__docId__": 223,
    "kind": "file",
    "name": "lib/geometry.js",
    "content": "/**\n * @fileOverview Various geometry functions useful\n * @name geometry.js\n * @author Florent Grélard\n * @license\n */\nimport * as THREE from 'three';\n\n/**\n * Converts an angle in degrees to a 2D vector\n * @param {number} angle\n * @returns {Array} the 2D vector\n */\nexport function  angleToVector(angle) {\n    var rad = angle * Math.PI / 180;\n    var x = Math.cos(rad);\n    var y = Math.sin(rad);\n    return [x, y];\n}\n\n/**\n * Converts a 2D vector to an angle in degrees\n * @param {Array} vector\n * @param {Array} vectorRef axis\n * @returns {number} angle in radians\n */\nexport function vectorToAngle(vector, vectorRef) {\n    var dot = vectorRef[0]*vector[0] + vectorRef[1]*vector[1];\n    var det = vectorRef[0]*vector[1] - vectorRef[1]*vector[0];\n    var angle = Math.atan2(det, dot);\n    return angle;\n}\n\n\n/**\n * Bounding box of positions\n * @param {Array} positions\n * @returns {Array} bounding box\n */\nexport function boundingBox(positions) {\n    var low = [Number.MAX_VALUE, Number.MAX_VALUE];\n    var up = [-Number.MAX_VALUE, -Number.MAX_VALUE];\n    for (var i = 0; i < positions.length; i++) {\n        var position = positions[i];\n        for (let j = 0; j < 2; j++) {\n            low[j] = (position[j] < low[j]) ? position[j] : low[j];\n            up[j] = (position[j] > up[j]) ? position[j] : up[j];\n        }\n    }\n    return [low, up];\n}\n\n/**\n * Bounding box as an object\n * @param {Array} array\n * @param {Object} feature a reference to the original object, useful to keep track of it in a R-tree for instance\n * @returns {Object} the bounding box\n */\nexport function bboxArrayToObject(array, feature) {\n    return {minX: array[0][0],\n            minY: array[0][1],\n            maxX: array[1][0],\n            maxY: array[1][1],\n            feature: feature\n           };\n\n}\n\n/**\n * Barycenter\n * @param {Array} positions\n * @returns {Array} barycenter\n */\nexport function centerOfMass(positions) {\n    var g = [0,0];\n    for (var p of positions) {\n        g[0] += p[0];\n        g[1] += p[1];\n    }\n    g[0] /= positions.length;\n    g[1] /= positions.length;\n    return g;\n}\n\n\n/**\n * Orthogonal projection of a point onto a segment [a,b]\n * @param {Array} p\n * @param {Array} a\n * @param {Array} b\n * @returns {Array} the projection\n */\nexport function project( p, a, b ) {\n    var x1=a[0], y1=a[1], x2=b[0], y2=b[1], x3=p[0], y3=p[1];\n    var px = x2-x1, py = y2-y1, dAB = px*px + py*py;\n    var u = ((x3 - x1) * px + (y3 - y1) * py) / dAB;\n    var x = x1 + u * px, y = y1 + u * py;\n    return [x, y];\n}\n\n\n/**\n * Converts spherical coordinates to cartesian\n * @param {Object} spherical\n * @returns {Array} cartesian coordinates\n */\nexport function sphericalToCartesian(spherical) {\n    var phi = spherical.phi;\n    var theta = spherical.theta;\n    return [\n        spherical.norm * Math.sin(phi) * Math.cos(theta),\n        spherical.norm * Math.sin(phi) * Math.sin(theta),\n        spherical.norm * Math.cos(phi)\n    ];\n\n}\n\n\n/**\n * Converts cartesian coordinates to spherical\n * @param {Array} coord\n * @returns {Object} sphericals\n */\nexport function cartesianToSpherical( coord ) {\n    var x = coord[0];\n    var y = coord[1];\n    var z = coord[2];\n    var radius = Math.sqrt( x * x + y * y + z * z );\n    var theta = 0;\n    var phi = 0;\n\tif ( radius !== 0 ) {\n        theta = Math.atan2( y, x );\n        var clampedRatio = Math.min(Math.max((z/radius), -1), 1);\n\t\tphi = Math.acos( clampedRatio );\n    }\n\treturn {theta: theta, phi: phi, norm: radius};\n}\n\n\n/**\n * Computes the plane given 3 points\n * @param {Array} p1\n * @param {Array} p2\n * @param {Array} p3\n * @returns {THREE.Plane}\n */\nexport function planeFromThreePoints(p1, p2, p3) {\n    var plane = new THREE.Plane();\n    plane.setFromCoplanarPoints(new THREE.Vector3(p1[0], p1[1], p1[2]),\n                                new THREE.Vector3(p2[0], p2[1], p2[2]),\n                                new THREE.Vector3(p3[0], p3[1], p3[2]));\n    return plane;\n}\n\n/**\n * Intersection\n * @param {Array} point\n * @param {THREE.Plane} plane\n * @returns {THREE.Vector3|Boolean} the intersection\n */\nexport function intersectionLinePlane(point, plane) {\n    var v1 = new THREE.Vector3(point[0], point[1], point[2]);\n    v1 = v1.normalize();\n    var line = new THREE.Line3(new THREE.Vector3(0,0,0), v1.multiplyScalar(10000));\n    var target = new THREE.Vector3();\n    var intersects = plane.intersectLine(line, target);\n    if (intersects)\n        return target;\n    return intersects;\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/geometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 224,
    "kind": "function",
    "name": "angleToVector",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~angleToVector",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{angleToVector}",
    "description": "Converts an angle in degrees to a 2D vector",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} the 2D vector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the 2D vector"
    }
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "vectorToAngle",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~vectorToAngle",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{vectorToAngle}",
    "description": "Converts a 2D vector to an angle in degrees",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} angle in radians"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "vectorRef",
        "description": "axis"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "angle in radians"
    }
  },
  {
    "__docId__": 226,
    "kind": "function",
    "name": "boundingBox",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~boundingBox",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{boundingBox}",
    "description": "Bounding box of positions",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} bounding box"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "bounding box"
    }
  },
  {
    "__docId__": 227,
    "kind": "function",
    "name": "bboxArrayToObject",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~bboxArrayToObject",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{bboxArrayToObject}",
    "description": "Bounding box as an object",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} the bounding box"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": "a reference to the original object, useful to keep track of it in a R-tree for instance"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "the bounding box"
    }
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "centerOfMass",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~centerOfMass",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{centerOfMass}",
    "description": "Barycenter",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} barycenter"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "barycenter"
    }
  },
  {
    "__docId__": 229,
    "kind": "function",
    "name": "project",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~project",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{project}",
    "description": "Orthogonal projection of a point onto a segment [a,b]",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} the projection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the projection"
    }
  },
  {
    "__docId__": 230,
    "kind": "function",
    "name": "sphericalToCartesian",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~sphericalToCartesian",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{sphericalToCartesian}",
    "description": "Converts spherical coordinates to cartesian",
    "lineNumber": 107,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} cartesian coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "spherical",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "cartesian coordinates"
    }
  },
  {
    "__docId__": 231,
    "kind": "function",
    "name": "cartesianToSpherical",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~cartesianToSpherical",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{cartesianToSpherical}",
    "description": "Converts cartesian coordinates to spherical",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} sphericals"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "coord",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "sphericals"
    }
  },
  {
    "__docId__": 232,
    "kind": "function",
    "name": "planeFromThreePoints",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~planeFromThreePoints",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{planeFromThreePoints}",
    "description": "Computes the plane given 3 points",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{THREE.Plane}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "p1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "p2",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "p3",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Plane"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "intersectionLinePlane",
    "memberof": "lib/geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/geometry.js~intersectionLinePlane",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/geometry.js",
    "importStyle": "{intersectionLinePlane}",
    "description": "Intersection",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{THREE.Vector3|Boolean} the intersection"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "THREE.Plane"
        ],
        "spread": false,
        "optional": false,
        "name": "plane",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "THREE.Vector3",
        "Boolean"
      ],
      "spread": false,
      "description": "the intersection"
    }
  },
  {
    "__docId__": 234,
    "kind": "file",
    "name": "lib/grid.js",
    "content": "/**\n * @fileOverview Code to handle grid of pictures, based on Muuri\n * @name grid.js\n * @author Florent Grélard\n * @license\n */\n\nimport $ from 'jquery';\nimport Muuri from 'muuri';\n\n/**\n * Filters the grid according to values on HTML elements\n * @param {Muuri} grid\n * @returns {boolean} match\n */\nexport function filter(grid) {\n    var filterFieldValue = $('.filter-field').val();\n    grid.filter(function (item) {\n        var element = item.getElement();\n        var isFilterMatch = !filterFieldValue ? true : (element.getAttribute('label') || filterFieldValue) === filterFieldValue;\n        return isFilterMatch;\n    });\n}\n\n/**\n * Changes the number of columns inside the grid according to valyes on HTML elements\n * @param {Muuri} grid\n */\nexport function changeLayout(grid) {\n    var layoutFieldValue = $('.layout-field').val();\n    var elements = grid.getItems();\n    $.each(elements, function(i, item) {\n        item.getElement().className = \"item\" + layoutFieldValue + \" muuri-item\";\n    });\n    grid.refreshItems().layout();\n}\n\n/**\n * Creates an empty grid\n * @returns {Muuri}\n */\nexport function generateGrid() {\n    return new Muuri('.grid', {\n        items: '.item',\n        layout: {\n            fillGaps: true\n        },\n        dragEnabled: true,\n        dragStartPredicate: function(item, event) {\n            var elemWidth = $(item.getElement()).width();\n            var elemHeight = $(item.getElement()).height();\n            if (event.srcEvent.layerX < 10 ||\n                event.srcEvent.layerY < 10 ||\n                event.srcEvent.layerX > elemWidth ||\n                event.srcEvent.layerY > elemHeight)\n                return false;\n            return Muuri.ItemDrag.defaultStartPredicate(item, event);\n        }\n    });\n}\n\n/**\n * Adds an image to the grid\n * @param {Muuri} grid\n * @param {URL} url\n * @param {Array} images\n * @param {string} label\n * @param {number} count\n * @param {number} length\n */\nexport function loadImageAndFillGrid(grid, url, images, label, count, length) {\n    var i = new Image();\n    i.addEventListener('dragstart', function (e) {\n        e.preventDefault();\n    }, false);\n    i.onload = function(event) {\n        fillGrid(grid, i, images, label, count, length);\n    };\n    i.src = url;\n\n}\n\n/**\n * Fill a grid of images (callback function)\n * @param {Muuri} grid\n * @param {Image} image\n * @param {Array} images\n * @param {string} label\n * @param {number} count\n * @param {number} length\n */\nexport function fillGrid(grid, image, images, label, count, length) {\n    var divItem = $(\"<div/>\", {\n        class: \"item\" + ($('.layout-field').val() || \"\"),\n        \"label\": label.label,\n        \"distance\": label.distance\n    });\n    var divItemContent = $(\"<div/>\", {\n        class:\"item-content\"\n    });\n\n    divItemContent.append(image);\n    divItem.append(divItemContent);\n    images.push(divItem.get(0));\n    count.number++;\n    if (count.number >= length) {\n        grid.remove(grid.getItems(), {removeElements: true});\n        grid.add(images, {layout:true});\n        grid.refreshItems().layout();\n        document.body.className = 'images-loaded';\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/grid.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 235,
    "kind": "function",
    "name": "filter",
    "memberof": "lib/grid.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/grid.js~filter",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/grid.js",
    "importStyle": "{filter}",
    "description": "Filters the grid according to values on HTML elements",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} match"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Muuri"
        ],
        "spread": false,
        "optional": false,
        "name": "grid",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "match"
    }
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "changeLayout",
    "memberof": "lib/grid.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/grid.js~changeLayout",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/grid.js",
    "importStyle": "{changeLayout}",
    "description": "Changes the number of columns inside the grid according to valyes on HTML elements",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Muuri"
        ],
        "spread": false,
        "optional": false,
        "name": "grid",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "function",
    "name": "generateGrid",
    "memberof": "lib/grid.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/grid.js~generateGrid",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/grid.js",
    "importStyle": "{generateGrid}",
    "description": "Creates an empty grid",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Muuri}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Muuri"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 238,
    "kind": "function",
    "name": "loadImageAndFillGrid",
    "memberof": "lib/grid.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/grid.js~loadImageAndFillGrid",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/grid.js",
    "importStyle": "{loadImageAndFillGrid}",
    "description": "Adds an image to the grid",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Muuri"
        ],
        "spread": false,
        "optional": false,
        "name": "grid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "function",
    "name": "fillGrid",
    "memberof": "lib/grid.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/grid.js~fillGrid",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/grid.js",
    "importStyle": "{fillGrid}",
    "description": "Fill a grid of images (callback function)",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Muuri"
        ],
        "spread": false,
        "optional": false,
        "name": "grid",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Image"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "images",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "lib/heatmap.js",
    "content": "/**\n * @fileOverview Heatmap for polygon intersection\n * @name heatmap.js\n * @author Florent Grélard\n * @license\n */\nimport PluggableMap from 'ol/PluggableMap.js';\nimport {defaults as defaultControls} from 'ol/control/util.js';\nimport {defaults as defaultInteractions} from 'ol/interaction.js';\nimport {assign} from 'ol/obj.js';\nimport CanvasImageLayerRenderer from 'ol/renderer/canvas/ImageLayer.js';\nimport CanvasMapRenderer from 'ol/renderer/canvas/Map.js';\nimport CanvasTileLayerRenderer from 'ol/renderer/canvas/TileLayer.js';\nimport CanvasVectorLayerRenderer from 'ol/renderer/canvas/VectorLayer.js';\nimport CanvasVectorTileLayerRenderer from 'ol/renderer/canvas/VectorTileLayer.js';\nimport CanvasVectorLayerColormapRenderer from './vectorlayercolormaprenderer.js';\n\n/**\n Heatmap for polygon intersection\n */\nexport default class HeatMap extends PluggableMap {\n    /**\n     * Constructor\n     * @param {Object} options\n     */\n    constructor(options) {\n        options = assign({}, options);\n        if (!options.controls) {\n            options.controls = defaultControls();\n        }\n        if (!options.interactions) {\n            options.interactions = defaultInteractions();\n        }\n        super(options);\n    }\n\n\n    /**\n     * Create renderer: registers custom CanvasVectorLayerColormapRenderer for isovist intersection\n     * @returns {ol.CanvasMapRenderer}\n     */\n    createRenderer() {\n        var renderer = new CanvasMapRenderer(this);\n        renderer.registerLayerRenderers([\n            CanvasImageLayerRenderer,\n            CanvasTileLayerRenderer,\n            CanvasVectorLayerRenderer,\n            CanvasVectorTileLayerRenderer,\n            CanvasVectorLayerColormapRenderer\n        ]);\n        return renderer;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/heatmap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "class",
    "name": "HeatMap",
    "memberof": "lib/heatmap.js",
    "static": true,
    "longname": "lib/heatmap.js~HeatMap",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/heatmap.js",
    "importStyle": "HeatMap",
    "description": "Heatmap for polygon intersection",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "ol/PluggableMap.js~PluggableMap"
    ]
  },
  {
    "__docId__": 242,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/heatmap.js~HeatMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/heatmap.js~HeatMap#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 26,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 243,
    "kind": "method",
    "name": "createRenderer",
    "memberof": "lib/heatmap.js~HeatMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/heatmap.js~HeatMap#createRenderer",
    "access": "public",
    "description": "Create renderer: registers custom CanvasVectorLayerColormapRenderer for isovist intersection",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.CanvasMapRenderer}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.CanvasMapRenderer"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "lib/isovistsectors2d.js",
    "content": "/**\n * @fileOverview Isovist computation inspired from Suleiman et al, A New Algorithm for 3D Isovists.\n * Space is delimited by a set of segments, and visibility can be determined by circular sectors associated with these segments\n * @name isovistsectors2d.js\n * @author Florent Grelard\n * @license\n */\n\nimport LineString from 'ol/geom/LineString';\nimport Polygon from 'ol/geom/Polygon';\nimport * as Intersection from './lineintersection';\nimport {euclideanDistance} from './distance';\nimport Arc from './arc';\n\n/** Object containing segment and associated visibility sector\n */\nclass AngleToSegment {\n    /**\n     * Constructor\n     * @param {Arc} angle\n     * @param {ol.geom.LineString} segment\n     */\n    constructor(angle, segment) {\n        /**\n         * angle\n         * @type {Arc}\n         */\n        this.angle = angle;\n\n        /**\n         * segment\n         * @type {ol.geom.LineString}\n         */\n        this.segment = segment;\n    }\n}\n\n/** Class allowing to compute the isovist in 2D, inspired by Suleiman et al's 'A New Algorithm for 3D Isovists\"\n * the space is delimited by a set of segments and visibility can be determined by circular sectors associated with these segments\n */\nexport default class IsoVist {\n    /**\n     * Constructor\n     * @param {Arc} arc the field of view\n     * @param {Array.<ol.Feature>} segments segments in map\n     * @param {Boolean} isDisplayPartial if true display only partial visible segments, else display full visible segments\n     * @param {Boolean} isDisplayPolygon should display polygon or line segments\n     * @param {number} epsilon tolerance for intersection\n     */\n    constructor(arc, segments, isDisplayPartial = true, isDisplayPolygon = true, epsilon = 0.0001) {\n        /**\n         * arc the field of view\n         * @type {Arc}\n         */\n        this.arc = arc;\n\n        /**\n         * building segments\n         * @type {Array.<ol.Feature>} segments segments in map\n         */\n        this.segments = segments;\n\n        /**\n         * if true display only partial visible segments, else display full visible segments\n         * @type {Boolean}\n         */\n        this.isDisplayPartial = isDisplayPartial;\n\n        /**\n         * if true, displays polygon, else, union of line segments\n         * @type {Boolean}\n         */\n        this.isDisplayPolygon = isDisplayPolygon;\n\n        /**\n         * @type {number} epsilon tolerance for intersection\n         */\n         this.epsilon = epsilon;\n    }\n\n    /**\n     * Checks whether a segment is contained inside an arc\n     * @param {ol.geom.LineString} segment\n     * @returns {boolean} whether segment is inside\n     */\n    isInsideArc(segment) {\n        for (let i = 0; i < 1; i+=0.1) {\n            if (this.arc.geometry.intersectsCoordinate(segment.getCoordinateAt(i))) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Extracts all segments constituting a polygon\n     * @param {ol.geom.Polygon} polygon\n     * @param {Arc} arc\n     * @returns {Array} segments\n     */\n    segmentsFromPolygon(polygon, arc) {\n        var segments = [];\n        var polygonVertices = polygon.getCoordinates()[0];\n        for (let i = 0; i < polygonVertices.length-1; i++) {\n            var p1 = polygonVertices[i];\n            var p2 = polygonVertices[i+1];\n            var segment = new LineString([p1, p2]);\n            segments.push(segment);\n        }\n        return segments;\n    }\n\n    /**\n     * From all the segments in the building, extract only those visible in field of view\n     * @returns {Array.<ol.geom.LineString>} array of visible segments\n     */\n    segmentsIntersectingFOV() {\n        var segments = [];\n        var geometryArc = this.arc.geometry;\n        var extentArc = geometryArc.getExtent();\n        var that = this;\n        for (let f of this.segments) {\n            var geometryFeature = f.getGeometry();\n            if (euclideanDistance(geometryFeature.getFirstCoordinate(), that.arc.center) > 2 * that.arc.radius) continue;\n            if (geometryArc.intersectsExtent(geometryFeature.getExtent()) &&\n                geometryFeature.intersectsExtent(extentArc)) {\n                if (geometryFeature.getType() === \"Polygon\") {\n                    var segmentsPolygon = that.segmentsFromPolygon(geometryFeature, geometryArc);\n                    Array.prototype.push.apply(segments, segmentsPolygon);\n                }\n            }\n        }\n        return segments;\n    }\n\n\n\n    /**\n     * Checks whether a segment is blocking, that is to say it is fully visible from the point of view\n     * @param {ol.geom.LineString} segment\n     * @param {Array.<ol.geom.LineString>} segments all the segments\n     * @returns {Boolean} whether segment is blocking with respect to segments\n     */\n    isNonBlocking(segment, segments) {\n        var position = this.arc.center;\n        var p1 = segment.getFirstCoordinate();\n        var p2 = segment.getLastCoordinate();\n\n        var s1 = new LineString([position, p1]);\n        var s2 = new LineString([position, p2]);\n\n        var toPush = false;\n        var that = this;\n        for (let s of segments) {\n            if (Intersection.segmentsEqual(s, segment))\n                continue;\n            var i1 = Intersection.segmentsIntersect(s1, s);\n            var i2 = Intersection.segmentsIntersect(s2, s);\n            if (i1 || i2) {\n                if (i1) {\n                    if (euclideanDistance([i1.x, i1.y], p1) > that.epsilon &&\n                        euclideanDistance([i1.x, i1.y], p2) > that.epsilon)\n                        toPush = true;\n                }\n                if (i2) {\n                    if (euclideanDistance([i2.x , i2.y], p1) > that.epsilon &&\n                        euclideanDistance([i2.x , i2.y], p2) > that.epsilon)\n                        toPush = true;\n                }\n            }\n        }\n        return toPush;\n    }\n\n    /**\n     * Converts a point to the angle that it forms with the x-axis in degrees (theta in spherical coordinates)\n     * @param {Array} point\n     * @returns {number} angle in degree\n     */\n    angleFromCoordinates(point) {\n        var position = this.arc.center;\n        var v = [point[0] - position[0],\n                 point[1] - position[1]];\n\n        var dot = v[0];\n\n        var norm = Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));\n\n        var angle = Math.atan2(v[1], v[0]) * 360 / (2*Math.PI);\n        if (angle < 0)\n            angle += 360;\n        return angle;\n    }\n\n    /**\n     * Computes the angle that is blocked by a segment\n     * @param {ol.geom.LineString} segment\n     * @returns {Arc} the arc corresponding to segment\n     */\n    visionBlockingArc(segment) {\n        var radius = this.arc.radius;\n        var position = this.arc.center;\n        var p1 = segment.getFirstCoordinate();\n        var p2 = segment.getLastCoordinate();\n\n        var alpha = this.angleFromCoordinates(p1);\n        var omega = this.angleFromCoordinates(p2);\n\n        if (omega < alpha) {\n            var tmp = alpha;\n            alpha = omega;\n            omega = tmp;\n        }\n        var diffOA = omega - alpha;\n        var diffOA360 = 360+alpha-omega;\n        if (diffOA360 < diffOA) {\n            var tmp = alpha;\n            alpha = omega-360;\n            omega = tmp;\n        }\n        if (omega < this.arc.alpha) {\n            alpha += 360;\n            omega += 360;\n        }\n\n        return new Arc(position, radius, +alpha.toFixed(4), +omega.toFixed(4));\n    }\n\n    /**\n     * Merges consecutive arcs which have overlapping angles\n     * @param {Array.<Arc>} array\n     * @returns {Array.<Arc>} simplified array\n     */\n    mergeOverlappingAngles(array) {\n        if (array.length === 1) return array;\n        var that = this;\n        var trimmedArray = [];\n        array.sort(function(a,b) {\n            if (a.alpha === b.alpha)\n                return a.omega - b.omega;\n            return a.alpha - b.alpha;\n        });\n        var alpha = 0;\n        var omega = 0;\n\n        for (let i = 0; i < array.length - 1; i++) {\n            var current = array[i];\n            var next = array[i+1];\n\n            if (i === 0) {\n                alpha = current.alpha;\n            }\n            if (current.omega > omega) {\n                omega = current.omega;\n            }\n            if (omega < next.alpha) {\n                trimmedArray.push(new Arc(that.arc.center, that.arc.radius, alpha, omega));\n                alpha = next.alpha;\n            }\n            if (i === array.length - 2) {\n                trimmedArray.push(new Arc(that.arc.center, that.arc.radius, alpha, next.omega));\n            }\n        };\n        return trimmedArray;\n    }\n\n    /**\n     * Returns the complementary of blocked angles in the field of view\n     * @param {Array.<Arc>} blockedAngles\n     * @returns {Array.<Arc>} free angles\n     */\n    freeAngles(blockedAngles) {\n        var freeA = [];\n        var start = this.arc.alpha;\n        var end = this.arc.omega;\n        var that = this;\n        var index = 0;\n        while (index < blockedAngles.length) {\n            var currentBlocked = blockedAngles[index];\n            if (start < currentBlocked.alpha && start < end) {\n                freeA.push(new Arc(this.arc.center, this.arc.radius, start, currentBlocked.alpha));\n            }\n            if (index === blockedAngles.length - 1 && currentBlocked.omega > that.arc.alpha && currentBlocked.omega < end) {\n                freeA.push(new Arc(this.arc.center, this.arc.radius, currentBlocked.omega, end));\n            }\n            start = (currentBlocked.omega >= start) ? currentBlocked.omega : start;\n            index++;\n        }\n        return freeA;\n    }\n\n    /**\n     * For partially visible segments, extract the part that is visible from the point of view\n     * @param {Array} intersection start point of visible segment\n     * @param {ol.geom.LineString} segment full segment\n     * @param {Arc} arc\n     * @returns {ol.geom.LineString} visible segment\n     */\n    segmentPartVisible(intersection, segment, arc) {\n        var segStart = segment.getFirstCoordinate();\n        var segEnd = segment.getLastCoordinate();\n\n        var norm = euclideanDistance(segStart, segEnd);\n\n        var distStart = euclideanDistance(intersection, segStart);\n        var distEnd = euclideanDistance(intersection, segEnd);\n\n        var middle = [(intersection.x + (segStart[0] - segEnd[0]) / norm), (intersection.y + (segStart[1] - segEnd[1]) / norm) ];\n        var middle2 = [(intersection.x + (segEnd[0] - segStart[0]) / norm), (intersection.y + (segEnd[1] - segStart[1]) / norm) ];\n        var p;\n        if (arc.geometry.intersectsCoordinate(middle))\n            p = segStart;\n        else if (arc.geometry.intersectsCoordinate(middle2))\n            p = segEnd;\n        else {\n            p = [intersection.x, intersection.y];\n        }\n        var visibleSegment = new LineString([[intersection.x, intersection.y], p]);\n        return visibleSegment;\n    }\n\n    /**\n     * Computes partially visible segment(s) from a segment\n     * @param {Array.<Arc>} angles free angles\n     * @param {ol.geom.LineString} segment\n     * @returns {Array.<ol.geom.LineString, Array.<ol.geom.LineString> >} if it is partially visible : first argument = full segment, second argument = array of visible segments ; else null\n     */\n    partiallyVisibleSegments(angles, segment) {\n\n        var visibleSegment = null;\n        var position = this.arc.center;\n        var visibleSegments = [];\n        var that = this;\n        var ps1 = segment.getFirstCoordinate();\n        var ps2 = segment.getLastCoordinate();\n\n        for (let angle of angles) {\n            if (!angle.geometry)\n                angle.computeGeometry();\n            var r = that.arc.radius;\n            var alphaRad = angle.alpha * Math.PI / 180;\n            var omegaRad = angle.omega * Math.PI / 180;\n            var p1 = [position[0] + r * Math.cos(alphaRad),\n                      position[1] + r * Math.sin(alphaRad)];\n            var p2 = [position[0] + r * Math.cos(omegaRad),\n                      position[1] + r * Math.sin(omegaRad)];\n            var s1 = new LineString([position, p1]);\n            var s2 = new LineString([position, p2]);\n            var i1 = Intersection.segmentsIntersect(segment, s1);\n            var i2 = Intersection.segmentsIntersect(segment, s2);\n            if (i1 || i2) {\n                if (i1 && i2) {\n                    visibleSegment = new LineString([[i1.x, i1.y],\n                                                     [i2.x, i2.y]]);\n                }\n                else if (i1) {\n                    visibleSegment = that.segmentPartVisible(i1, segment, angle);\n                }\n                else if (i2) {\n                    visibleSegment = that.segmentPartVisible(i2, segment, angle);\n                }\n                visibleSegments.push(visibleSegment);\n            }\n            else {\n                var i3 = angle.geometry.intersectsCoordinate(ps1);\n                var i4 = angle.geometry.intersectsCoordinate(ps2);\n                if (i3 && i4) {\n                    visibleSegments.push(segment);\n                }\n            }\n        }\n\n        return (visibleSegments.length > 0) ? [segment, visibleSegments] : null;\n    }\n\n\n    /**\n     * Extract all fully visible segments\n     * @param {Array.<ol.geom.LineString>} segments all segments from buildings\n     * @returns {Array.<ol.geom.LineString>} fully visible segments\n     */\n    blockingSegments(segments) {\n        var blockingSegments = [];\n        var that = this;\n        for (let segment of segments) {\n            var nonBlocking = that.isNonBlocking(segment,\n                                                 segments);\n            if (!nonBlocking) {\n                blockingSegments.push(segment);\n            }\n        }\n        return  blockingSegments;\n    }\n\n    /**\n     * Extracts all partially visible segments, that is to say to those who are in the free vision field\n     * @param {Array.<ol.geom.LineString>} blockingSegments\n     * @param {Array.<ol.geom.LineString>} segments\n     * @returns {Array.<ol.geom.LineString>} partially visible segments\n     */\n    freeSegments(blockingSegments, segments) {\n        var blockingAngles = [];\n        var freeSegments = [];\n        var that = this;\n        for (let segment of blockingSegments) {\n            var blockingAngle = that.visionBlockingArc(segment);\n            blockingAngles.push(blockingAngle);\n        }\n        var trimmedBlockingAngles = this.mergeOverlappingAngles(blockingAngles);\n        var freeVisionAngles = this.freeAngles(trimmedBlockingAngles);\n        for (let segment of segments) {\n            if (blockingSegments.indexOf(segment) === -1) {\n                var visibleSegment = that.partiallyVisibleSegments(freeVisionAngles, segment);\n                if (visibleSegment && that.isInsideArc(visibleSegment[0]))\n                    freeSegments.push(visibleSegment);\n            }\n        }\n        return freeSegments;\n    }\n\n    /**\n     * Display visible parts of blocking segments\n     * @param {Array.<ol.geom.LineString>} blockingSegments\n     * @returns {Array.<ol.geom.LineString>} partially visible blocking segments\n     */\n    visibleBlockingSegments(blockingSegments) {\n        var that  = this;\n        var visibleSegments = [];\n        var position = this.arc.center;\n\n        //Computing blocking segments hidden by other segments\n        blockingSegments.sort(function(a,b) {\n            return euclideanDistance(a.getClosestPoint(position), position) - euclideanDistance(b.getClosestPoint(position), position);\n        });\n        var blockingAngles = [];\n        var freeSegments = [];\n        var freeVisionAngles = [this.arc];\n        for (let segment of blockingSegments) {\n            var blockingAngle = that.visionBlockingArc(segment);\n            var partial = false;\n            for (let angle of freeVisionAngles) {\n                if ((blockingAngle.alpha < angle.alpha && blockingAngle.omega <= angle.omega && blockingAngle.omega > angle.alpha) ||\n                    (blockingAngle.omega > angle.omega && blockingAngle.alpha >= angle.alpha && blockingAngle.alpha < angle.omega)) {\n                    var visibleSegment = that.partiallyVisibleSegments(freeVisionAngles, segment);\n                    if (visibleSegment)\n                        Array.prototype.push.apply(visibleSegments, visibleSegment[1]);\n                    partial = true;\n                }\n            }\n            var p1 = segment.getFirstCoordinate();\n            var p2 = segment.getLastCoordinate();\n            if (!partial && that.isInsideArc(segment))\n            {\n                Array.prototype.push.apply(visibleSegments, [segment]);\n            }\n\n            blockingAngles.push(blockingAngle);\n            var trimmedBlockingAngles = that.mergeOverlappingAngles(blockingAngles);\n            freeVisionAngles = that.freeAngles(trimmedBlockingAngles);\n        }\n\n        return visibleSegments;\n    }\n\n    /**\n     * Computes the isovist polygon from blocking segments\n     * @param {Array.<ol.geom.LineString>} blockingSegments\n     * @returns {Array.<ol.geom.Polygon>} the isovist\n     */\n    visibilityPolygon(blockingSegments) {\n        var polygon = [];\n        var that = this;\n        var anglesToSegments = [];\n        var blockingAngles = [];\n\n        for (let segment of blockingSegments) {\n            var blockingAngle = that.visionBlockingArc(segment);\n            let fc = segment.getFirstCoordinate();\n            let lc = segment.getLastCoordinate();\n            var angleFC = that.angleFromCoordinates(fc);\n            var angleLC = that.angleFromCoordinates(lc);\n            angleFC = (angleFC < that.arc.alpha - 1) ? angleFC+360 : angleFC;\n            angleLC = (angleLC < that.arc.alpha - 1) ? angleLC+360 : angleLC;\n            var first = (angleFC < angleLC) ? fc : lc;\n            var last = (angleFC < angleLC) ? lc : fc;\n            var orientedSegment = new LineString([first, last]);\n            let angleToSegment = new AngleToSegment(blockingAngle, orientedSegment);\n            blockingAngles.push(blockingAngle);\n            anglesToSegments.push(angleToSegment);\n        }\n        var trimmedBlockingAngles = this.mergeOverlappingAngles(blockingAngles);\n        var freeVisionAngles = this.freeAngles(trimmedBlockingAngles);\n        for (let angle of freeVisionAngles) {\n            if (angle.omega - angle.alpha < 0.5) continue;\n            angle.computeGeometry();\n            var freeSegment = new LineString([angle.fullGeometry[1].getFlatCoordinates(),\n                                              angle.fullGeometry[2].getFlatCoordinates()]);\n            let angleToSegment = new AngleToSegment(angle, freeSegment);\n            anglesToSegments.push(angleToSegment);\n        }\n\n        anglesToSegments.sort(function(a,b) {\n            if (a.angle.alpha === b.angle.alpha)\n                return a.angle.omega - b.angle.omega;\n            return a.angle.alpha - b.angle.alpha;\n        });\n        if (anglesToSegments.length > 0) {\n            polygon.push(this.arc.center);\n            polygon.push(anglesToSegments[0].segment.getFirstCoordinate());\n            for (let i = 0; i < anglesToSegments.length; i++) {\n                let fc = anglesToSegments[i].segment.getFirstCoordinate();\n                let lc = anglesToSegments[i].segment.getLastCoordinate();\n                polygon.push(fc);\n                polygon.push(lc);\n            }\n            polygon.push(this.arc.center);\n        }\n        return new Polygon([polygon]);\n    }\n\n\n\n\n    /**\n     * Main function\n     * @returns {Array.<ol.geom.Polygon>} isovist as the segments from buildings visible from the point of view\n     */\n    isovist() {\n        var visibleSegments = [];\n        var segments = this.segmentsIntersectingFOV();\n        var position = this.arc.center;\n        var blockingSegments = this.blockingSegments(segments);\n\n        if (this.isDisplayPartial) {\n            var visibleBlockingSegments = this.visibleBlockingSegments(blockingSegments);\n            Array.prototype.push.apply(visibleSegments, visibleBlockingSegments);\n        }\n        var freeSegments = this.freeSegments(blockingSegments, segments);\n\n        var partiallyVisible = [];\n        while (freeSegments.length > 0) {\n            freeSegments.sort(function(a,b) {\n                return euclideanDistance(position, a[0].getClosestPoint(position)) - euclideanDistance(position, b[0].getClosestPoint(position));\n            });\n            blockingSegments.push(freeSegments[0][0]);\n            partiallyVisible.push(freeSegments[0][1]);\n            freeSegments = this.freeSegments(blockingSegments, segments);\n        }\n\n        if (this.isDisplayPartial) {\n            for (let segments of partiallyVisible) {\n                Array.prototype.push.apply(visibleSegments, segments);\n            }\n        } else {\n            Array.prototype.push.apply(visibleSegments, blockingSegments);\n        }\n\n        if (this.isDisplayPolygon) {\n            var polygon = this.visibilityPolygon(visibleSegments);\n            return polygon;\n        }\n        return visibleSegments;\n    }\n}\n\n\n\n\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/isovistsectors2d.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "AngleToSegment",
    "memberof": "lib/isovistsectors2d.js",
    "static": true,
    "longname": "lib/isovistsectors2d.js~AngleToSegment",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/isovistsectors2d.js",
    "importStyle": null,
    "description": "Object containing segment and associated visibility sector",
    "lineNumber": 17,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/isovistsectors2d.js~AngleToSegment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~AngleToSegment#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "angle",
    "memberof": "lib/isovistsectors2d.js~AngleToSegment",
    "static": false,
    "longname": "lib/isovistsectors2d.js~AngleToSegment#angle",
    "access": "public",
    "description": "angle",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "segment",
    "memberof": "lib/isovistsectors2d.js~AngleToSegment",
    "static": false,
    "longname": "lib/isovistsectors2d.js~AngleToSegment#segment",
    "access": "public",
    "description": "segment",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "ol.geom.LineString"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "class",
    "name": "IsoVist",
    "memberof": "lib/isovistsectors2d.js",
    "static": true,
    "longname": "lib/isovistsectors2d.js~IsoVist",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/isovistsectors2d.js",
    "importStyle": "IsoVist",
    "description": "Class allowing to compute the isovist in 2D, inspired by Suleiman et al's 'A New Algorithm for 3D Isovists\"\nthe space is delimited by a set of segments and visibility can be determined by circular sectors associated with these segments",
    "lineNumber": 41,
    "interface": false
  },
  {
    "__docId__": 250,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": "the field of view"
      },
      {
        "nullable": null,
        "types": [
          "Array.<ol.Feature>"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": "segments in map"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDisplayPartial",
        "description": "if true display only partial visible segments, else display full visible segments"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDisplayPolygon",
        "description": "should display polygon or line segments"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "epsilon",
        "description": "tolerance for intersection"
      }
    ]
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "arc",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#arc",
    "access": "public",
    "description": "arc the field of view",
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "segments",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#segments",
    "access": "public",
    "description": "building segments",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Array.<ol.Feature>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "isDisplayPartial",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#isDisplayPartial",
    "access": "public",
    "description": "if true display only partial visible segments, else display full visible segments",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "isDisplayPolygon",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#isDisplayPolygon",
    "access": "public",
    "description": "if true, displays polygon, else, union of line segments",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "epsilon",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#epsilon",
    "access": "public",
    "description": "",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "method",
    "name": "isInsideArc",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#isInsideArc",
    "access": "public",
    "description": "Checks whether a segment is contained inside an arc",
    "lineNumber": 86,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether segment is inside"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether segment is inside"
    }
  },
  {
    "__docId__": 257,
    "kind": "method",
    "name": "segmentsFromPolygon",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#segmentsFromPolygon",
    "access": "public",
    "description": "Extracts all segments constituting a polygon",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} segments"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "polygon",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "segments"
    }
  },
  {
    "__docId__": 258,
    "kind": "method",
    "name": "segmentsIntersectingFOV",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#segmentsIntersectingFOV",
    "access": "public",
    "description": "From all the segments in the building, extract only those visible in field of view",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.LineString>} array of visible segments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.LineString>"
      ],
      "spread": false,
      "description": "array of visible segments"
    },
    "params": []
  },
  {
    "__docId__": 259,
    "kind": "method",
    "name": "isNonBlocking",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#isNonBlocking",
    "access": "public",
    "description": "Checks whether a segment is blocking, that is to say it is fully visible from the point of view",
    "lineNumber": 144,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} whether segment is blocking with respect to segments"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.LineString>"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": "all the segments"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "whether segment is blocking with respect to segments"
    }
  },
  {
    "__docId__": 260,
    "kind": "method",
    "name": "angleFromCoordinates",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#angleFromCoordinates",
    "access": "public",
    "description": "Converts a point to the angle that it forms with the x-axis in degrees (theta in spherical coordinates)",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} angle in degree"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "angle in degree"
    }
  },
  {
    "__docId__": 261,
    "kind": "method",
    "name": "visionBlockingArc",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#visionBlockingArc",
    "access": "public",
    "description": "Computes the angle that is blocked by a segment",
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Arc} the arc corresponding to segment"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": "the arc corresponding to segment"
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "mergeOverlappingAngles",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#mergeOverlappingAngles",
    "access": "public",
    "description": "Merges consecutive arcs which have overlapping angles",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<Arc>} simplified array"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "array",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Arc>"
      ],
      "spread": false,
      "description": "simplified array"
    }
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "freeAngles",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#freeAngles",
    "access": "public",
    "description": "Returns the complementary of blocked angles in the field of view",
    "lineNumber": 272,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<Arc>} free angles"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "blockedAngles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Arc>"
      ],
      "spread": false,
      "description": "free angles"
    }
  },
  {
    "__docId__": 264,
    "kind": "method",
    "name": "segmentPartVisible",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#segmentPartVisible",
    "access": "public",
    "description": "For partially visible segments, extract the part that is visible from the point of view",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.geom.LineString} visible segment"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "intersection",
        "description": "start point of visible segment"
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": "full segment"
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.geom.LineString"
      ],
      "spread": false,
      "description": "visible segment"
    }
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "partiallyVisibleSegments",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#partiallyVisibleSegments",
    "access": "public",
    "description": "Computes partially visible segment(s) from a segment",
    "lineNumber": 328,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.LineString, Array.<ol.geom.LineString> >} if it is partially visible : first argument = full segment, second argument = array of visible segments ; else null"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Arc>"
        ],
        "spread": false,
        "optional": false,
        "name": "angles",
        "description": "free angles"
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.LineString, Array.<ol.geom.LineString> >"
      ],
      "spread": false,
      "description": "if it is partially visible : first argument = full segment, second argument = array of visible segments ; else null"
    }
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "blockingSegments",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#blockingSegments",
    "access": "public",
    "description": "Extract all fully visible segments",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.LineString>} fully visible segments"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.LineString>"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": "all segments from buildings"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.LineString>"
      ],
      "spread": false,
      "description": "fully visible segments"
    }
  },
  {
    "__docId__": 267,
    "kind": "method",
    "name": "freeSegments",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#freeSegments",
    "access": "public",
    "description": "Extracts all partially visible segments, that is to say to those who are in the free vision field",
    "lineNumber": 401,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.LineString>} partially visible segments"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.LineString>"
        ],
        "spread": false,
        "optional": false,
        "name": "blockingSegments",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.LineString>"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.LineString>"
      ],
      "spread": false,
      "description": "partially visible segments"
    }
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "visibleBlockingSegments",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#visibleBlockingSegments",
    "access": "public",
    "description": "Display visible parts of blocking segments",
    "lineNumber": 426,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.LineString>} partially visible blocking segments"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.LineString>"
        ],
        "spread": false,
        "optional": false,
        "name": "blockingSegments",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.LineString>"
      ],
      "spread": false,
      "description": "partially visible blocking segments"
    }
  },
  {
    "__docId__": 269,
    "kind": "method",
    "name": "visibilityPolygon",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#visibilityPolygon",
    "access": "public",
    "description": "Computes the isovist polygon from blocking segments",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.Polygon>} the isovist"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.LineString>"
        ],
        "spread": false,
        "optional": false,
        "name": "blockingSegments",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "the isovist"
    }
  },
  {
    "__docId__": 270,
    "kind": "method",
    "name": "isovist",
    "memberof": "lib/isovistsectors2d.js~IsoVist",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors2d.js~IsoVist#isovist",
    "access": "public",
    "description": "Main function",
    "lineNumber": 528,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.Polygon>} isovist as the segments from buildings visible from the point of view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "isovist as the segments from buildings visible from the point of view"
    },
    "params": []
  },
  {
    "__docId__": 271,
    "kind": "file",
    "name": "lib/isovistsectors3d.js",
    "content": "/**\n * @fileOverview Isovist computation inspired from Suleiman et al, A New Algorithm for 3D Isovists.\n * Space is delimited by a set of polygons, and visibility can be determined by spherical coordinates associated with these segments\n * @name isovistsectors3d.js\n * @author Florent Grélard\n * @license\n */\n\nimport LineString from 'ol/geom/LineString';\nimport Polygon from 'ol/geom/Polygon';\nimport * as Intersection from './lineintersection';\nimport {euclideanDistance} from './distance';\nimport {boundingExtent, containsExtent, intersects, getIntersection, getArea} from 'ol/extent';\nimport Arc from './arc';\nimport IsoVist2D from './isovistsectors2d.js';\nimport {toLonLat} from 'ol/proj';\nimport {cartesianToSpherical, sphericalToCartesian, planeFromThreePoints, intersectionLinePlane} from './geometry';\n\n\n/** Object containing polygon and associated visibility sector\n */\nclass PolygonToAngle {\n    /**\n     * Constructor\n     * @param {ol.geom.Polygon} Polygon\n     * @param {ol.geom.Polygon} spherical extent\n     */\n    constructor(polygon, angle) {\n        /**\n         * polygon\n         * @type {ol.geom.Polygon}\n         */\n        this.polygon = polygon;\n\n        /**\n         * angle\n         * @type {ol.geom.Polygon}\n         */\n        this.angle = angle;\n    }\n}\n\n\n/** Object containing segment and associated visibility sector\n */\nclass AngleToSegment {\n    /**\n     * Constructor\n     * @param {Arc} angle\n     * @param {ol.geom.LineString} segment\n     */\n    constructor(angle, segment) {\n        /**\n         * angle\n         * @type {Arc}\n         */\n        this.angle = angle;\n\n        /**\n         * segment\n         * @type {ol.geom.LineString}\n         */\n        this.segment = segment;\n    }\n}\n\n/** Class allowing to compute the isovist in 3D, inspired by Suleiman et al's 'A New Algorithm for 3D Isovists\"\n * the space is delimited by a set of polygons and visibility can be determined by spherical coordiantes associated with these segments\n * WORK IN PROGRESS\n */\nexport default class IsoVist3D extends IsoVist2D {\n    /**\n     * Constructor\n     * @param {Arc} arc the field of view\n     * @param {Array.<ol.Feature>} segments segments in map\n     * @param {Boolean} isDisplayPartial if true display only partial visible segments, else display full visible segments\n     * @param {Boolean} isDisplayPolygon should display polygon or line segments\n     * @param {number} epsilon tolerance for intersection\n     */\n    constructor(arc, segments, isDisplayPartial = true, isDisplayPolygon = true, epsilon = 0.0001) {\n        super(arc, segments, isDisplayPartial, isDisplayPolygon, epsilon);\n        /**\n         * arc the field of view\n         * @type {Arc}\n         */\n        this.arc = arc;\n\n        /**\n         * building segments\n         * @type {Array.<ol.Feature>} segments segments in map\n         */\n        this.segments = segments;\n\n        /**\n         * if true display only partial visible segments, else display full visible segments\n         * @type {Boolean}\n         */\n        this.isDisplayPartial = isDisplayPartial;\n\n        /**\n         * if true, displays polygon, else, union of line segments\n         * @type {Boolean}\n         */\n        this.isDisplayPolygon = isDisplayPolygon;\n\n        /**\n         * @type {number} epsilon tolerance for intersection\n         */\n        this.epsilon = epsilon;\n    }\n\n\n\n    /**\n     * Converts a segment to a 3D polygon\n     * @param {ol.geom.LineString} segment\n     * @returns {ol.geom.Polygon} polygon\n     */\n    segmentTo3DPolygon(segment) {\n        var p1 = segment.getFirstCoordinate();\n        var p2 = segment.getLastCoordinate();\n        var p3 = [p2[0], p2[1], 0];\n        var p4 = [p1[0], p1[1], 0];\n        return new Polygon([[p1, p2, p3, p4]]);\n    }\n\n    /**\n     * Converts several segments to polygons\n     * @param {Array<ol.geom.LineString>} segments\n     * @returns {Array<ol.geom.Polygon>} polygons\n     */\n    segmentsToPolygons(segments) {\n        var polygons = [];\n        for (let segment of segments) {\n            var p = this.segmentTo3DPolygon(segment);\n            polygons.push(p);\n        }\n        return polygons;\n    }\n\n    /**\n     * Translation of polygons by reference vector\n     * @param {ol.geom.Polygon} polygon\n     * @param {Array<number>} reference\n     * @returns {ol.geom.Polygon} translated polygons\n     */\n    translatePolygon(polygon, reference) {\n        let coordsTranslated = [];\n        for (let coord of polygon.getCoordinates()[0]) {\n            var coordTranslated = [coord[0] - reference[0],\n                                   coord[1] - reference[1],\n                                   coord[2] - reference[2]];\n            coordsTranslated.push(coordTranslated);\n        }\n        return new Polygon([coordsTranslated]);\n    }\n\n    /**\n     * Converts a polygon in cartesian coordinates to spherical coordinates\n     * @param {ol.geom.Polygon} polygon\n     * @returns {Object} spherical coordinates\n     */\n    polygonToSphericalCoordinates(polygon) {\n        var sphericals = [];\n        // var coordinates = [];\n        for (let coord of polygon.getCoordinates()[0]) {\n            var coordTranslated = [coord[0] - this.arc.center[0],\n                                   coord[1] - this.arc.center[1],\n                                   coord[2] - this.arc.center[2]];\n            var sphericalNorm = cartesianToSpherical(coordTranslated);\n\n            // sphericalNorm.norm = 1;\n            // var c = sphericalToCartesian(sphericalNorm);\n            sphericals.push(sphericalNorm);\n            // coordinates.push(coordTranslated);\n        }\n        // var sphericalArray = sphericals.map(spherical => [spherical[0], spherical[1], spherical[2]]);\n        // var plane = planeFromThreePoints(coordinates[0], coordinates[1], coordinates[2]);\n        // intersectionLinePlane(sphericals[0], plane);\n        return sphericals;\n    }\n\n    /**\n     * Converts spherical coordinates to a polygon\n     * @param {Object} sphericals\n     * @returns {ol.geom.Polygon} polygon\n     */\n    sphericalCoordinatesToShape(sphericals) {\n        var coords = [];\n        for (let s of sphericals) {\n            var p = [s.theta, s.phi];\n            coords.push(p);\n        }\n        return new Polygon([coords]);\n    }\n\n    /**\n     * Converts several polygons to their polygonal shape\n     * @param {Array<ol.geom.Polygon>} polygons\n     * @returns {Array<Object>} objects\n     */\n    polygonsToAngle(polygons) {\n        var polyAngles = [];\n        for (let polygon of polygons) {\n            var spherical = this.polygonToSphericalCoordinates(polygon);\n            var angleShape = this.sphericalCoordinatesToShape(spherical);\n            var pToS = new PolygonToAngle(polygon, angleShape);\n            polyAngles.push(pToS);\n        }\n        return polyAngles;\n    }\n\n    /**\n     * Minimum distance of each corner in the polygon to the picture's position\n     * @param {ol.geom.Polygon} polygon\n     * @returns {number} min distance\n     */\n    polygonToMinDistance(polygon) {\n        var distance = Number.MAX_VALUE;\n        for (let coord of polygon.getCoordinates()[0]) {\n            let norm = euclideanDistance(coord, this.arc.center);\n            if (distance > norm) {\n                distance = norm;\n            }\n        }\n        return distance;\n    }\n\n    /**\n     * Checks whether a polygon is blocking, that is to say it is fully visible from the point of view\n     * @param {Object} polyAngle polygon to angle\n     * @param {Array.<Object>} polyAngles\n     * @returns {Boolean} whether polyAngle is blocking with respect to polyAngles\n     */\n    isNonBlocking(polyAngle, polyAngles) {\n        var poly = polyAngle.polygon;\n        var angle = polyAngle.angle;\n        var extent = angle.getExtent();\n        var intersecting = [];\n        var isBlocking = true;\n        for (let j = 0; j < polyAngles.length; j++) {\n            var polyAngle2 = polyAngles[j];\n            var poly2 = polyAngle2.polygon;\n            var angle2 = polyAngle2.angle;\n            var extent2 = angle2.getExtent();\n\n            if (angle.intersectsExtent(extent2) &&\n                angle2.intersectsExtent(extent) &&\n                getArea(getIntersection(extent, extent2)) > 0) {\n                intersecting.push(polyAngle2);\n            }\n        }\n        var minDCurrent = this.polygonToMinDistance(poly);\n        for (let e of intersecting) {\n            var minDOther = this.polygonToMinDistance(e.polygon);\n            if (minDOther < minDCurrent) {\n                isBlocking = false;\n            }\n        }\n        return !isBlocking;\n    }\n\n\n    /**\n     * Sort according to theta angle from spherical coordinates, then phi\n     * @param {Array<ol.geom.Polygon>} angles spherical coordinates\n     * @returns {Array<ol.geom.Polygon>} sorted angles\n     */\n    sortTheta(angles) {\n        var tmpAngles = angles.slice();\n        tmpAngles.sort(function(a, b) {\n            let extentA = a.getExtent();\n            let extentB = b.getExtent();\n            let thetaMinA = extentA[0];\n            let phiMinA = extentA[1];\n            let thetaMaxA = extentA[2];\n            let phiMaxA = extentA[3];\n            let thetaMinB = extentB[0];\n            let phiMinB = extentB[1];\n            let thetaMaxB = extentB[2];\n            let phiMaxB = extentB[3];\n            if (phiMinA === phiMinB && thetaMaxA === thetaMaxB && thetaMinA === thetaMinB)\n                return phiMaxA - phiMaxB;\n            if (thetaMaxA === thetaMaxB && thetaMinA === thetaMinB)\n                return phiMinA - phiMinB;\n            if (thetaMinA === thetaMinB)\n                return thetaMaxA - thetaMaxB;\n            return thetaMinA - thetaMinB;\n        });\n        return tmpAngles;\n    }\n\n\n    /**\n     * Minimum and maximum of angle\n     * @param {Array<ol.geom.Polygon>} angles\n     * @param {boolean=} theta theta or phi\n     * @returns {Array} min and max\n     */\n    minMaxAngle(angles, theta = false) {\n        var minX = Number.MAX_VALUE;\n        var maxX = -Number.MAX_VALUE;\n        for (let angle of angles) {\n            var extent = angle.getExtent();\n            var angleMin, angleMax;\n            if (theta) {\n                angleMin = extent[0];\n                angleMax = extent[2];\n            } else {\n                angleMin = extent[1];\n                angleMax = extent[3];\n            }\n\n            if (angleMin < minX) {\n                minX = angleMin;\n            }\n            if (angleMax > maxX) {\n                maxX = angleMax;\n            }\n        }\n        return [minX, maxX];\n    }\n\n\n    /**\n     * Computes the extent from a polygon\n     * @param {ol.extent.Extent} extent\n     * @returns {ol.geom.Polygon} polygon\n     */\n    polygonFromExtent(extent) {\n        var minX = extent[0];\n        var minY = extent[1];\n        var maxX = extent[2];\n        var maxY = extent[3];\n        var p1 = [minX, minY];\n        var p2 = [minX, maxY];\n        var p3 = [maxX, maxY];\n        var p4 = [maxX, minY];\n\n        return new Polygon([[ p1, p2, p3, p4 ]]);\n    }\n\n\n    /**\n     * Merges consecutive spherical coordinates\n     * @param {Array.<Object>} angles spherical coordinates\n     * @returns {Array.<Arc>} simplified array\n     */\n    mergeOverlappingAngles(angles) {\n        if (angles.length === 1) return angles;\n        var sortedAngles = this.sortTheta(angles);\n        let minX =  2 * Math.PI;\n        let minY =  2 * Math.PI;\n        let maxX = -2 * Math.PI;\n        let maxY = -2 * Math.PI;\n        var locallyIntersecting = [];\n        var trimmedArray = [];\n        for (let i= 0; i < sortedAngles.length - 1; i++) {\n            let current = sortedAngles[i];\n            let next = sortedAngles[i+1];\n\n            let extentCurrent = current.getExtent();\n            let extentNext = next.getExtent();\n            let thetaMinCurrent = extentCurrent[0];\n            let phiMinCurrent = extentCurrent[1];\n            let thetaMaxCurrent = extentCurrent[2];\n            let phiMaxCurrent = extentCurrent[3];\n\n            let thetaMinNext = extentNext[0];\n            let phiMinNext = extentNext[1];\n            let thetaMaxNext = extentNext[2];\n            let phiMaxNext = extentNext[3];\n            if (i === 0) {\n                minX = thetaMinCurrent;\n                minY = phiMinCurrent;\n            }\n            if (minY > phiMinCurrent) {\n                minY = phiMinCurrent;\n            }\n            if (thetaMaxCurrent > maxX) {\n                maxX = thetaMaxCurrent;\n            }\n            if (phiMaxCurrent > maxY) {\n                maxY = phiMaxCurrent;\n            }\n            if (maxX < thetaMinNext ||\n                maxY < phiMinNext) {\n                let newExtent = boundingExtent([[minX, minY], [maxX, maxY]]);\n                let newPolygon = this.polygonFromExtent(newExtent);\n                trimmedArray.push(newPolygon);\n                minX = thetaMinNext;\n                minY = phiMinNext;\n                locallyIntersecting = [];\n            }\n            if (i === sortedAngles.length - 2) {\n                if (maxX < thetaMaxNext) {\n                    maxX = thetaMaxNext;\n                }\n                if (maxY < phiMaxNext) {\n                    maxY = phiMaxNext;\n                }\n                if (minY > phiMinNext) {\n                    minY = phiMinNext;\n                }\n                let newExtent = boundingExtent([[minX, minY], [maxX, maxY]]);\n                let newPolygon = this.polygonFromExtent(newExtent);\n                trimmedArray.push(newPolygon);\n            }\n        }\n        return trimmedArray;\n    }\n\n    /**\n     * Whether a polygon is free, that is to say it is partially visible\n     * @param {Object} polyAngle\n     * @param {Array<Object>} blockingPolyAngles\n     * @returns {boolean} whether it is partially visible\n     */\n    isFree(polyAngle, blockingPolyAngles) {\n        var isFree = true;\n        var poly = polyAngle.polygon;\n        var angle = polyAngle.angle;\n        var extent = angle.getExtent();\n        for (let angle2 of blockingPolyAngles) {\n            var extent2 = angle2.getExtent();\n            if (Intersection.rectangleContains(extent2,extent)) {\n                isFree = false;\n            }\n        }\n        return isFree;\n    }\n\n    /**\n     * Extracts all partially visible polygons, that is to say to those who are in the free vision field\n     * @param {Array.<ol.geom.Polygon>} blockingPolyAngles\n     * @param {Array.<ol.geom.Polygon>} polyAngles\n     * @returns {Array.<ol.geom.Polygon>} partially visible polygons\n     */\n    freeSegments(blockingPolyAngles, polyAngles) {\n        var freeSegments = [];\n        var trimmedBlockingAngles = this.mergeOverlappingAngles(blockingPolyAngles.map(bAngle => bAngle.angle));\n        for (let polyAngle of polyAngles) {\n            var isFree = this.isFree(polyAngle, trimmedBlockingAngles);\n            if (blockingPolyAngles.indexOf(polyAngle) === -1 && isFree)\n                freeSegments.push(polyAngle);\n        }\n        return freeSegments;\n    }\n\n\n    /**\n     * Projects the spherical intersection in 2D, onto a 3D plane in cartesian coordinates\n     * @param {Object} partialPart\n     * @returns {ol.geom.Polygon} the 3D polygon in cartesian coordinates\n     */\n    projectIntersectionOnFace(partialPart) {\n        var face = partialPart.polygon;\n        var intersection = partialPart.intersection;\n        var coordsFace = face.getCoordinates()[0];\n        var coordsIntersection = intersection.getCoordinates()[0];\n        let cartesianIntersection = [];\n        for (let coord of coordsIntersection) {\n            let spherical = {theta: coord[0], phi: coord[1], norm: 1};\n            let cartesianCoord = sphericalToCartesian(spherical);\n            cartesianIntersection.push(cartesianCoord);\n        }\n\n        var plane = planeFromThreePoints(coordsFace[0], coordsFace[1], coordsFace[2]);\n        var p1 = intersectionLinePlane(cartesianIntersection[0], plane);\n        var p2 = intersectionLinePlane(cartesianIntersection[1], plane);\n        var p3 = intersectionLinePlane(cartesianIntersection[2], plane);\n        var p4 = intersectionLinePlane(cartesianIntersection[3], plane);\n        if (!p1 || !p2 || !p3 || !p4)\n            return new Polygon([[[0,0,0]]]);\n        var polygon = new Polygon([[ Object.values(p1), Object.values(p2), Object.values(p3), Object.values(p4)] ]);\n        var translatedPolygon = this.translatePolygon(polygon, [-this.arc.center[0],\n                                                                -this.arc.center[1],\n                                                                -this.arc.center[2]]);\n        return translatedPolygon;\n    }\n\n    /**\n     * Extracts polygon parts that are partially visible\n     * @param {Array<Object>} partialParts\n     * @returns {Array<ol.geom.Polygon>} array of polygons\n     */\n    partiallyVisiblePolygon(partialParts) {\n        let arrayPolygons =  [];\n        for (let partialPart of partialParts) {\n            let projectionPolygon = this.projectIntersectionOnFace(partialPart);\n            arrayPolygons.push(projectionPolygon);\n        }\n        return arrayPolygons;\n    }\n\n    /**\n     * Polygons that are partially visible\n     * @param {Array<Object>} blockingPolyAngles\n     * @returns {Array<ol.geom.Polygon>} the parts of polygons\n     */\n    visibleBlockingSegments(blockingPolyAngles) {\n        var that  = this;\n        var visibleSegments = [];\n        var position = this.arc.center;\n\n        //Computing blocking segments hidden by other segments\n        blockingPolyAngles.sort(function(a,b) {\n            return that.polygonToMinDistance(a.polygon) - that.polygonToMinDistance(b.polygon);\n        });\n        var visionField = [];\n        for (let polyAngle of blockingPolyAngles) {\n            let angleCurrent = polyAngle.angle;\n            let extentCurrent = angleCurrent.getExtent();\n            let polyCurrent = polyAngle.polygon;\n            let isPartial = false;\n            let coordinates = this.translatePolygon(polyCurrent, this.arc.center);\n            let partialParts = [];\n            for (let angleVision of visionField) {\n                let extentVision = angleVision.getExtent();\n                let intersection = getIntersection(extentCurrent, extentVision);\n                // let lowerBound = {theta: intersection[0], phi: intersection[1], norm: 1};\n                // let upperBound = {theta: intersection[2], phi: intersection[3], norm: 1};\n                // var extentCartesian = [sphericalToCartesian(lowerBound), sphericalToCartesian(upperBound)];\n                // extentCartesian = [].concat.apply([], extentCartesian);\n                let polyIntersection = this.polygonFromExtent(intersection);\n                // console.log(polyIntersection);\n                if (angleCurrent.intersectsExtent(extentVision) &&\n                    angleVision.intersectsExtent(extentCurrent) &&\n                    getArea(intersection) > 0)  {\n                    isPartial = true;\n                    let objIntersectionToSpherical = {intersection: polyIntersection, polygon: coordinates};\n                    this.projectIntersectionOnFace (objIntersectionToSpherical);\n                    partialParts.push(objIntersectionToSpherical);\n                }\n            }\n            if (isPartial) {\n                var arrayPolygons = this.partiallyVisiblePolygon(partialParts);\n                Array.prototype.push.apply(visibleSegments, arrayPolygons);\n            } else {\n                //visibleSegments.push(polyAngle.polygon);\n            }\n            //break;\n            visionField.push(polyAngle.angle);\n            visionField = this.mergeOverlappingAngles(visionField);\n\n        }\n        return visibleSegments;\n    }\n\n    /**\n     * Main function\n     * @returns {Array.<ol.geom.Polygon>} isovist as the polygons from buildings visible from the point of view\n     */\n    isovist() {\n        var visibleSegments = [];\n        var segments = this.segmentsIntersectingFOV();\n        var position = this.arc.center;\n\n        var polygons = this.segmentsToPolygons(segments);\n        var polyAngles = this.polygonsToAngle(polygons);\n        var blockingSegments = this.blockingSegments(polyAngles);\n        //var trimmed = this.mergeOverlappingAngles(toMerge);\n        var freeSegments = this.freeSegments(blockingSegments, polyAngles);\n        var partiallyVisible = [];\n        var that = this;\n        while (freeSegments.length > 0) {\n            freeSegments.sort(function(a,b) {\n                return that.polygonToMinDistance(a.polygon) - that.polygonToMinDistance(b.polygon);\n            });\n            blockingSegments.push(freeSegments[0]);\n            freeSegments = this.freeSegments(blockingSegments, polyAngles);\n        }\n        var visibleSegments = this.visibleBlockingSegments(blockingSegments);\n\n        var onlyPoly = blockingSegments.map(elem => elem.polygon);\n        onlyPoly = visibleSegments;\n        //var onlyPoly = trimmed;\n        //onlyPoly = blockingPoly.map(elem => elem.polygon);\n        //onlyPoly = polyAngles.map(elem => elem.angle);\n        console.log(onlyPoly.map(elem => elem.flatCoordinates));\n        return onlyPoly;\n\n\n        var position = this.arc.center;\n        var blockingSegments = this.blockingSegments(segments);\n\n        if (this.isDisplayPartial) {\n            var visibleBlockingSegments = this.visibleBlockingSegments(blockingSegments);\n            Array.prototype.push.apply(visibleSegments, visibleBlockingSegments);\n        }\n        var freeSegments = this.freeSegments(blockingSegments, segments);\n\n        var partiallyVisible = [];\n        while (freeSegments.length > 0) {\n            freeSegments.sort(function(a,b) {\n                return euclideanDistance(position, a[0].getClosestPoint(position)) - euclideanDistance(position, b[0].getClosestPoint(position));\n            });\n            blockingSegments.push(freeSegments[0][0]);\n            partiallyVisible.push(freeSegments[0][1]);\n            freeSegments = this.freeSegments(blockingSegments, segments);\n        }\n\n        if (this.isDisplayPartial) {\n            for (let segments of partiallyVisible) {\n                Array.prototype.push.apply(visibleSegments, segments);\n            }\n        } else {\n            Array.prototype.push.apply(visibleSegments, blockingSegments);\n        }\n        if (this.isDisplayPolygon) {\n            var polygon = this.visibilityPolygon(visibleSegments);\n\n            return polygon;\n        }\n        return visibleSegments;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/isovistsectors3d.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 272,
    "kind": "class",
    "name": "PolygonToAngle",
    "memberof": "lib/isovistsectors3d.js",
    "static": true,
    "longname": "lib/isovistsectors3d.js~PolygonToAngle",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/isovistsectors3d.js",
    "importStyle": null,
    "description": "Object containing polygon and associated visibility sector",
    "lineNumber": 22,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/isovistsectors3d.js~PolygonToAngle",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~PolygonToAngle#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "Polygon",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "spherical",
        "description": "extent"
      }
    ]
  },
  {
    "__docId__": 274,
    "kind": "member",
    "name": "polygon",
    "memberof": "lib/isovistsectors3d.js~PolygonToAngle",
    "static": false,
    "longname": "lib/isovistsectors3d.js~PolygonToAngle#polygon",
    "access": "public",
    "description": "polygon",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 275,
    "kind": "member",
    "name": "angle",
    "memberof": "lib/isovistsectors3d.js~PolygonToAngle",
    "static": false,
    "longname": "lib/isovistsectors3d.js~PolygonToAngle#angle",
    "access": "public",
    "description": "angle",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 276,
    "kind": "class",
    "name": "AngleToSegment",
    "memberof": "lib/isovistsectors3d.js",
    "static": true,
    "longname": "lib/isovistsectors3d.js~AngleToSegment",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/isovistsectors3d.js",
    "importStyle": null,
    "description": "Object containing segment and associated visibility sector",
    "lineNumber": 46,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/isovistsectors3d.js~AngleToSegment",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~AngleToSegment#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 52,
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 278,
    "kind": "member",
    "name": "angle",
    "memberof": "lib/isovistsectors3d.js~AngleToSegment",
    "static": false,
    "longname": "lib/isovistsectors3d.js~AngleToSegment#angle",
    "access": "public",
    "description": "angle",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 279,
    "kind": "member",
    "name": "segment",
    "memberof": "lib/isovistsectors3d.js~AngleToSegment",
    "static": false,
    "longname": "lib/isovistsectors3d.js~AngleToSegment#segment",
    "access": "public",
    "description": "segment",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "ol.geom.LineString"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 280,
    "kind": "class",
    "name": "IsoVist3D",
    "memberof": "lib/isovistsectors3d.js",
    "static": true,
    "longname": "lib/isovistsectors3d.js~IsoVist3D",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/isovistsectors3d.js",
    "importStyle": "IsoVist3D",
    "description": "Class allowing to compute the isovist in 3D, inspired by Suleiman et al's 'A New Algorithm for 3D Isovists\"\nthe space is delimited by a set of polygons and visibility can be determined by spherical coordiantes associated with these segments\nWORK IN PROGRESS",
    "lineNumber": 71,
    "interface": false,
    "extends": [
      "lib/isovistsectors2d.js~IsoVist2D"
    ]
  },
  {
    "__docId__": 281,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 80,
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": "the field of view"
      },
      {
        "nullable": null,
        "types": [
          "Array.<ol.Feature>"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": "segments in map"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDisplayPartial",
        "description": "if true display only partial visible segments, else display full visible segments"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "isDisplayPolygon",
        "description": "should display polygon or line segments"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "epsilon",
        "description": "tolerance for intersection"
      }
    ]
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "arc",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#arc",
    "access": "public",
    "description": "arc the field of view",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "segments",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#segments",
    "access": "public",
    "description": "building segments",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Array.<ol.Feature>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "isDisplayPartial",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#isDisplayPartial",
    "access": "public",
    "description": "if true display only partial visible segments, else display full visible segments",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "isDisplayPolygon",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#isDisplayPolygon",
    "access": "public",
    "description": "if true, displays polygon, else, union of line segments",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "epsilon",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#epsilon",
    "access": "public",
    "description": "",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "method",
    "name": "segmentTo3DPolygon",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#segmentTo3DPolygon",
    "access": "public",
    "description": "Converts a segment to a 3D polygon",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.geom.Polygon} polygon"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "segment",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": "polygon"
    }
  },
  {
    "__docId__": 288,
    "kind": "method",
    "name": "segmentsToPolygons",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#segmentsToPolygons",
    "access": "public",
    "description": "Converts several segments to polygons",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<ol.geom.Polygon>} polygons"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<ol.geom.LineString>"
        ],
        "spread": false,
        "optional": false,
        "name": "segments",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "polygons"
    }
  },
  {
    "__docId__": 289,
    "kind": "method",
    "name": "translatePolygon",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#translatePolygon",
    "access": "public",
    "description": "Translation of polygons by reference vector",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.geom.Polygon} translated polygons"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "polygon",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "reference",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": "translated polygons"
    }
  },
  {
    "__docId__": 290,
    "kind": "method",
    "name": "polygonToSphericalCoordinates",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#polygonToSphericalCoordinates",
    "access": "public",
    "description": "Converts a polygon in cartesian coordinates to spherical coordinates",
    "lineNumber": 163,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} spherical coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "polygon",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "spherical coordinates"
    }
  },
  {
    "__docId__": 291,
    "kind": "method",
    "name": "sphericalCoordinatesToShape",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#sphericalCoordinatesToShape",
    "access": "public",
    "description": "Converts spherical coordinates to a polygon",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.geom.Polygon} polygon"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "sphericals",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": "polygon"
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "polygonsToAngle",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#polygonsToAngle",
    "access": "public",
    "description": "Converts several polygons to their polygonal shape",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Object>} objects"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<ol.geom.Polygon>"
        ],
        "spread": false,
        "optional": false,
        "name": "polygons",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Object>"
      ],
      "spread": false,
      "description": "objects"
    }
  },
  {
    "__docId__": 293,
    "kind": "method",
    "name": "polygonToMinDistance",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#polygonToMinDistance",
    "access": "public",
    "description": "Minimum distance of each corner in the polygon to the picture's position",
    "lineNumber": 218,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} min distance"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "polygon",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "min distance"
    }
  },
  {
    "__docId__": 294,
    "kind": "method",
    "name": "isNonBlocking",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#isNonBlocking",
    "access": "public",
    "description": "Checks whether a polygon is blocking, that is to say it is fully visible from the point of view",
    "lineNumber": 235,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} whether polyAngle is blocking with respect to polyAngles"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "polyAngle",
        "description": "polygon to angle"
      },
      {
        "nullable": null,
        "types": [
          "Array.<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "polyAngles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "whether polyAngle is blocking with respect to polyAngles"
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "sortTheta",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#sortTheta",
    "access": "public",
    "description": "Sort according to theta angle from spherical coordinates, then phi",
    "lineNumber": 269,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<ol.geom.Polygon>} sorted angles"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<ol.geom.Polygon>"
        ],
        "spread": false,
        "optional": false,
        "name": "angles",
        "description": "spherical coordinates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "sorted angles"
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "minMaxAngle",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#minMaxAngle",
    "access": "public",
    "description": "Minimum and maximum of angle",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} min and max"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<ol.geom.Polygon>"
        ],
        "spread": false,
        "optional": false,
        "name": "angles",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "theta",
        "description": "theta or phi"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "min and max"
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "polygonFromExtent",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#polygonFromExtent",
    "access": "public",
    "description": "Computes the extent from a polygon",
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.geom.Polygon} polygon"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.extent.Extent"
        ],
        "spread": false,
        "optional": false,
        "name": "extent",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": "polygon"
    }
  },
  {
    "__docId__": 298,
    "kind": "method",
    "name": "mergeOverlappingAngles",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#mergeOverlappingAngles",
    "access": "public",
    "description": "Merges consecutive spherical coordinates",
    "lineNumber": 349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<Arc>} simplified array"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "angles",
        "description": "spherical coordinates"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Arc>"
      ],
      "spread": false,
      "description": "simplified array"
    }
  },
  {
    "__docId__": 299,
    "kind": "method",
    "name": "isFree",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#isFree",
    "access": "public",
    "description": "Whether a polygon is free, that is to say it is partially visible",
    "lineNumber": 419,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether it is partially visible"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "polyAngle",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "blockingPolyAngles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether it is partially visible"
    }
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "freeSegments",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#freeSegments",
    "access": "public",
    "description": "Extracts all partially visible polygons, that is to say to those who are in the free vision field",
    "lineNumber": 439,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.Polygon>} partially visible polygons"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.Polygon>"
        ],
        "spread": false,
        "optional": false,
        "name": "blockingPolyAngles",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array.<ol.geom.Polygon>"
        ],
        "spread": false,
        "optional": false,
        "name": "polyAngles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "partially visible polygons"
    }
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "projectIntersectionOnFace",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#projectIntersectionOnFace",
    "access": "public",
    "description": "Projects the spherical intersection in 2D, onto a 3D plane in cartesian coordinates",
    "lineNumber": 456,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.geom.Polygon} the 3D polygon in cartesian coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "partialPart",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": "the 3D polygon in cartesian coordinates"
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "partiallyVisiblePolygon",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#partiallyVisiblePolygon",
    "access": "public",
    "description": "Extracts polygon parts that are partially visible",
    "lineNumber": 487,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<ol.geom.Polygon>} array of polygons"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "partialParts",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "array of polygons"
    }
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "visibleBlockingSegments",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#visibleBlockingSegments",
    "access": "public",
    "description": "Polygons that are partially visible",
    "lineNumber": 501,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<ol.geom.Polygon>} the parts of polygons"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Object>"
        ],
        "spread": false,
        "optional": false,
        "name": "blockingPolyAngles",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "the parts of polygons"
    }
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "isovist",
    "memberof": "lib/isovistsectors3d.js~IsoVist3D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/isovistsectors3d.js~IsoVist3D#isovist",
    "access": "public",
    "description": "Main function",
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.geom.Polygon>} isovist as the polygons from buildings visible from the point of view"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.geom.Polygon>"
      ],
      "spread": false,
      "description": "isovist as the polygons from buildings visible from the point of view"
    },
    "params": []
  },
  {
    "__docId__": 305,
    "kind": "file",
    "name": "lib/layers.js",
    "content": "/**\n * @fileOverview Layers added to the OpenLayers Map\n * @name layers.js\n * @author Florent Grélard\n * @license\n */\nimport Vector from 'ol/source/Vector';\nimport VectorLayer from 'ol/layer/Vector';\nimport OLCluster from 'ol/source/Cluster';\nimport VectorLayerColormap from './vectorlayercolormap';\nimport Overlay from 'ol/Overlay';\nimport Group from 'ol/layer/Group';\nimport * as styles from './styles';\nimport OLImage from 'ol/layer/Image';\nimport ImageStatic from 'ol/source/ImageStatic';\n\n/**\n * overlay\n * @type {ol.Overlay}\n */\nexport var overlay = new Overlay({\n    element: document.getElementById('none')\n});\n\n/**\n * Overlay layer group\n * @type {ol.layer.Group}\n */\nexport var overlayGroup = new Group({\n    title: 'Calques',\n    combine: false,\n    layers: []\n});\n\n/**\n * Layers displayed on click\n * @type {ol.layer.Group}\n */\nexport var onClickGroup = new Group({\n    title: 'Au clic',\n    combine: false,\n    layers: []\n});\n\n\n/**\n * Source vector for picture clusters\n * @type {ol.source.Vector}\n */\nexport var source = new Vector();\n\n\n/**\n * Picture clusters\n * @type {ol.layer.Cluster}\n */\nexport var clusterSource = new OLCluster({\n    source: source\n});\n\n\n/**\n * Source vector for visibility cones on click (in pale orange)\n * @type {ol.source.Vector}\n */\nexport var vectorLayerArc = new Vector();\n\n\n/**\n * Layer for visibility cones\n * @type {ol.layer.Vector}\n */\nexport var arcs = new VectorLayer({\n    title: 'Cônes de visibilité',\n    source: vectorLayerArc,\n    style: styles.setStyleArcs\n});\n\n\n/**\n * Layer for thumbnails of pictures\n * @type {ol.layer.Image}\n */\nexport var thumbnails = new OLImage({\n    title: 'Vignettes'\n});\n\n/**\n * Layer for picture clusters\n * @type {ol.layer.Vector}\n */\nexport var olClusters = new VectorLayer({\n    title:'Photographies',\n    source: clusterSource,\n    style: styles.setStyleClusters\n});\n\n\n/**\n * Source vector for isovists on click (in pale green)\n * @type {ol.source.Vector}\n */\nexport var lineSource = new Vector();\n\n\n/**\n * Layer for isovists on click (in pale green)\n * @type {ol.layer.Vector}\n */\nexport var lines = new VectorLayer({\n    title: 'Polygones de visibilité',\n    source: lineSource,\n    style: styles.setStylePolygonIsovist\n});\n\n\n/**\n * Source vector for building segments, when selecting area (in blue)\n * @type {ol.source.Vector}\n */\nexport var inputLineSource = new Vector();\n\n\n/**\n * Layer for building segments, when selecting area (in blue)\n * @type {ol.layer.Vector}\n */\nexport var inputLines = new VectorLayer({\n    title: 'Cadastre',\n    source: inputLineSource,\n    style : styles.setStyleInput\n});\n\n/**\n * Empty image necessary for heatmap\n * @type {ol.source.ImageStatic}\n */\nexport var imageStatic = new ImageStatic({url:'', imageExtent:[0,0,0,0]});\n\n/**\n * Source vector for heatmap of isovist intersection\n * @type {ol.source.Vector}\n */\nexport var polygonSource = new Vector();\n\n/**\n * Layer for heatmap\n * @type {VectorLayerColormap}\n */\nexport var vectorLayerColormap = new VectorLayerColormap({\n    title: 'Intersection des polygones',\n    source: imageStatic,\n    style: styles.setStylePolygonColormapIsovist,\n    vectorSource: polygonSource,\n    scale: false\n});\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/layers.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 306,
    "kind": "variable",
    "name": "overlay",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~overlay",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{overlay}",
    "description": "overlay",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "ol.Overlay"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 307,
    "kind": "variable",
    "name": "overlayGroup",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~overlayGroup",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{overlayGroup}",
    "description": "Overlay layer group",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Group"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 308,
    "kind": "variable",
    "name": "onClickGroup",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~onClickGroup",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{onClickGroup}",
    "description": "Layers displayed on click",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Group"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 309,
    "kind": "variable",
    "name": "source",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~source",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{source}",
    "description": "Source vector for picture clusters",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "ol.source.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 310,
    "kind": "variable",
    "name": "clusterSource",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~clusterSource",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{clusterSource}",
    "description": "Picture clusters",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Cluster"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 311,
    "kind": "variable",
    "name": "vectorLayerArc",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~vectorLayerArc",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{vectorLayerArc}",
    "description": "Source vector for visibility cones on click (in pale orange)",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "ol.source.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 312,
    "kind": "variable",
    "name": "arcs",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~arcs",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{arcs}",
    "description": "Layer for visibility cones",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 313,
    "kind": "variable",
    "name": "thumbnails",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~thumbnails",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{thumbnails}",
    "description": "Layer for thumbnails of pictures",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Image"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 314,
    "kind": "variable",
    "name": "olClusters",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~olClusters",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{olClusters}",
    "description": "Layer for picture clusters",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 315,
    "kind": "variable",
    "name": "lineSource",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~lineSource",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{lineSource}",
    "description": "Source vector for isovists on click (in pale green)",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "ol.source.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 316,
    "kind": "variable",
    "name": "lines",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~lines",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{lines}",
    "description": "Layer for isovists on click (in pale green)",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 317,
    "kind": "variable",
    "name": "inputLineSource",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~inputLineSource",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{inputLineSource}",
    "description": "Source vector for building segments, when selecting area (in blue)",
    "lineNumber": 121,
    "type": {
      "nullable": null,
      "types": [
        "ol.source.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 318,
    "kind": "variable",
    "name": "inputLines",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~inputLines",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{inputLines}",
    "description": "Layer for building segments, when selecting area (in blue)",
    "lineNumber": 128,
    "type": {
      "nullable": null,
      "types": [
        "ol.layer.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 319,
    "kind": "variable",
    "name": "imageStatic",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~imageStatic",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{imageStatic}",
    "description": "Empty image necessary for heatmap",
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "ol.source.ImageStatic"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 320,
    "kind": "variable",
    "name": "polygonSource",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~polygonSource",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{polygonSource}",
    "description": "Source vector for heatmap of isovist intersection",
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "ol.source.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "vectorLayerColormap",
    "memberof": "lib/layers.js",
    "static": true,
    "longname": "lib/layers.js~vectorLayerColormap",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/layers.js",
    "importStyle": "{vectorLayerColormap}",
    "description": "Layer for heatmap",
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "VectorLayerColormap"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "lib/lineintersection.js",
    "content": "/**\n * @fileOverview Intersections between shapes\n * @name lineintersection.js\n * @author Florent Grélard\n * @license\n */\nimport bigdecimal from 'bigdecimal';\n\n/**\n * Error tolerance epsilon\n * @type {number}\n */\nexport var epsilon = 0.000001;\n\n/**\n * Change the value of {@link epsilon}\n * @param {number} eps\n */\nexport function setEpsilon(eps) {\n    epsilon = eps;\n}\n\n/**\n * Checks if number b is in the interval [a, c+epsilon]\n * @param {Number} a lower bound\n * @param {Number} b value to check\n * @param {Number} c upper bound\n * @returns {Boolean} Between coordinates\n */\nfunction between(a, b, c) {\n    return a-epsilon <= b && b <= c+epsilon;\n}\n\n\n/**\n * Mean absolute difference of b between a and c\n * @param {number} a first value\n * @param {number} b value to check\n * @param {number} c second value\n * @returns {number} mean absolute difference\n */\nfunction averageDiff(a, b, c) {\n    return (Math.abs(a - b) + Math.abs(c - b)) / 2;\n}\n\n\n/**\n * Exact Intersection segment\n * @param {number} x1 First segment first point x\n * @param {number} y1 First segment first point y\n * @param {number} x2 First segment second point x\n * @param {number} y2 First segment second point y\n * @param {number} x3 Second segment first point x\n * @param {number} y3 Second segment first point y\n * @param {number} x4 Second segment second point x\n * @param {number} y4 Second segment second point y\n * @returns {Boolean|{x,y}} the intersection, if it exists\n */\nexport function segmentIntersectionExact(x1,y1,x2,y2, x3,y3,x4,y4) {\n    var bx1 = bigdecimal.BigDecimal(x1.toString());\n    var bx2 = bigdecimal.BigDecimal(x2.toString());\n    var bx3 = bigdecimal.BigDecimal(x3.toString());\n    var bx4 = bigdecimal.BigDecimal(x4.toString());\n    var by1 = bigdecimal.BigDecimal(y1.toString());\n    var by2 = bigdecimal.BigDecimal(y2.toString());\n    var by3 = bigdecimal.BigDecimal(y3.toString());\n    var by4 = bigdecimal.BigDecimal(y4.toString());\n\n    var x1y2 = bx1.multiply(by2);\n    var y1x2 = by1.multiply(bx2);\n    var x3x4 = bx3.subtract(bx4);\n    var x1x2 = bx1.subtract(bx2);\n    var x3y4 = bx3.multiply(by4);\n    var y3x4 = by3.multiply(bx4);\n    var y3y4 = by3.subtract(by4);\n    var y1y2 = by1.subtract(by2);\n\n\n    var detX12 = (x1y2.subtract(y1x2)).multiply(x3x4);\n    var detX34 = (x3y4.subtract(y3x4)).multiply(x1x2);\n    var detV = (x1x2.multiply(y3y4)).subtract((y1y2.multiply(x3x4)));\n\n    var detY12 = (x1y2.subtract(y1x2)).multiply(y3y4);\n    var detY34 = (x3y4.subtract(y3x4)).multiply(y1y2);\n\n\n    var x = ((detX12.subtract(detX34)).divide(detV, 0)).floatValue();\n\n    var y = ((detY12.subtract(detY34)).divide(detV, 0)).floatValue();\n\n    if (isNaN(x)||isNaN(y)) {\n        return false;\n    } else {\n        if (x1>=x2) {\n            if (!between(x2, x, x1)) {return false;}\n        } else {\n            if (!between(x1, x, x2)) {return false;}\n        }\n        if (y1>=y2) {\n            if (!between(y2, y, y1)) {return false;}\n        } else {\n            if (!between(y1, y, y2)) {return false;}\n        }\n        if (x3>=x4) {\n            if (!between(x4, x, x3)) {return false;}\n        } else {\n            if (!between(x3, x, x4)) {return false;}\n        }\n        if (y3>=y4) {\n            if (!between(y4, y, y3)) {return false;}\n        } else {\n            if (!between(y3, y, y4)) {return false;}\n        }\n    }\n\n    return {x: x,y: y};\n}\n\n\n/**\n * Intersection segment\n * @param {number} x1 First segment first point x\n * @param {number} y1 First segment first point y\n * @param {number} x2 First segment second point x\n * @param {number} y2 First segment second point y\n * @param {number} x3 Second segment first point x\n * @param {number} y3 Second segment first point y\n * @param {number} x4 Second segment second point x\n * @param {number} y4 Second segment second point y\n * @returns {Boolean|{x,y}} the intersection, if it exists\n */\nexport function segmentIntersection(x1,y1,x2,y2, x3,y3,x4,y4) {\n    var x=((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4)) /\n            ((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));\n    var y=((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4)) /\n        ((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));\n    if (isNaN(x)||isNaN(y)) {\n        return false;\n    } else {\n        if (x1>=x2) {\n            if (!between(x2, x, x1)) {return false;}\n        } else {\n            if (!between(x1, x, x2)) {return false;}\n        }\n        if (y1>=y2) {\n            if (!between(y2, y, y1)) {return false;}\n        } else {\n            if (!between(y1, y, y2)) {return false;}\n        }\n        if (x3>=x4) {\n            if (!between(x4, x, x3)) {return false;}\n        } else {\n            if (!between(x3, x, x4)) {return false;}\n        }\n        if (y3>=y4) {\n            if (!between(y4, y, y3)) {return false;}\n        } else {\n            if (!between(y3, y, y4)) {return false;}\n        }\n    }\n    return {x: x,y: y};\n}\n\n/**\n * Intersection line\n * @param {number} x1 First segment first point x\n * @param {number} y1 First segment first point y\n * @param {number} x2 First segment second point x\n * @param {number} y2 First segment second point y\n * @param {number} x3 Second segment first point x\n * @param {number} y3 Second segment first point y\n * @param {number} x4 Second segment second point x\n * @param {number} y4 Second segment second point y\n * @returns {Boolean|{x,y}} the intersection, if it exists\n */\nexport function lineIntersection(x1,y1,x2,y2, x3,y3,x4,y4) {\n    var x=((x1*y2-y1*x2)*(x3-x4)-(x1-x2)*(x3*y4-y3*x4)) /\n            ((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));\n    var y=((x1*y2-y1*x2)*(y3-y4)-(y1-y2)*(x3*y4-y3*x4)) /\n        ((x1-x2)*(y3-y4)-(y1-y2)*(x3-x4));\n    if (isNaN(x)||isNaN(y)) {\n        return false;\n    }\n    return {x: x,y: y};\n}\n\n\n\n/**\n* Intersection half-line and line\n * @param {number} x1 First segment first point x\n * @param {number} y1 First segment first point y\n * @param {number} x2 First segment second point x\n * @param {number} y2 First segment second point y\n * @param {number} x3 Second segment first point x\n * @param {number} y3 Second segment first point y\n * @param {number} x4 Second segment second point x\n * @param {number} y4 Second segment second point y\n * @returns {Boolean|{x,y}} the intersection, if it exists\n */\nexport function halfLineAndLineIntersection(x1,y1,x2,y2, x3,y3,x4,y4) {\n    var intersection = lineIntersection(x1,y1,x2,y2, x3,y3,x4,y4);\n    if (!intersection) return false;\n    var x = intersection.x;\n    var y = intersection.y;\n    if (x1>=x2) {\n        if (x > x1) {return false;}\n    } else {\n        if (x < x1) {return false;}\n    }\n    if (y1>=y2) {\n        if (y > y1) {return false;}\n    } else {\n        if (y < y1) {return false;}\n    }\n    return {x: x,y: y};\n}\n\n/**\n * Intersection half line\n * @param {number} x1 First segment first point x\n * @param {number} y1 First segment first point y\n * @param {number} x2 First segment second point x\n * @param {number} y2 First segment second point y\n * @param {number} x3 Second segment first point x\n * @param {number} y3 Second segment first point y\n * @param {number} x4 Second segment second point x\n * @param {number} y4 Second segment second point y\n * @returns {Boolean|{x,y}} the intersection, if it exists\n */\nexport function halfLineIntersection(x1,y1,x2,y2, x3,y3,x4,y4) {\n    var obj = halfLineAndLineIntersection(x1,y1,x2,y2, x3,y3,x4,y4);\n    if (!obj) return false;\n    var x=obj.x;\n    var y=obj.y;\n    if (x3>=x4) {\n        if (x > x3) {return false;}\n    } else {\n        if (x < x3) {return false;}\n    }\n    if (y3>=y4) {\n        if (y > y3) {return false;}\n    } else {\n        if (y < y3) {return false;}\n    }\n    return {x: x,y: y};\n}\n\n\n/**\n * Helper function to check if there is intersection between two segments represented as linestring objects\n * @param {ol.geom.LineString} s1 first linestring segment\n * @param {ol.geom.LineString} s2 second linestring segment\n * @returns {Boolean|{x,y}} the intersection, if it exists\n */\nexport function segmentsIntersect(s1, s2) {\n    var pS1F = s1.getFirstCoordinate();\n    var pS1L = s1.getLastCoordinate();\n    var pS2F = s2.getFirstCoordinate();\n    var pS2L = s2.getLastCoordinate();\n\n\n    var intersection = segmentIntersection(pS1F[0], pS1F[1],\n                                           pS1L[0], pS1L[1],\n                                           pS2F[0], pS2F[1],\n                                           pS2L[0], pS2L[1]);\n    return intersection;\n}\n\n/**\n * Helper function to check if there is intersection between two half lines represented as linestring objects where first coordinate is the start of the half line\n * @param {ol.geom.LineString} s1 first linestring half lines\n * @param {ol.geom.LineString} s2 second linestring half lines\n * @returns {Boolean|{x,y}} the intersection, if it exists\n */\nexport function halfLinesIntersect(s1, s2) {\n    var pS1F = s1.getFirstCoordinate();\n    var pS1L = s1.getLastCoordinate();\n    var pS2F = s2.getFirstCoordinate();\n    var pS2L = s2.getLastCoordinate();\n\n\n    var intersection = halfLineIntersection(pS1F[0], pS1F[1],\n                                           pS1L[0], pS1L[1],\n                                           pS2F[0], pS2F[1],\n                                           pS2L[0], pS2L[1]);\n    return intersection;\n}\n\n/**\n * Checks whether a point belongs to a segment\n * @param {Array<number>} p the point\n * @param {ol.geom.LineString} s the segment\n * @returns {boolean} whether p belongs to s\n */\nexport function onSegment(p, s) {\n    var p1 = s.getFirstCoordinate();\n    var p2 = s.getLastCoordinate();\n\n    var x1 = p1[0];\n    var x2 = p2[0];\n    var y1 = p1[1];\n    var y2 = p2[1];\n\n    var x = p[0];\n    var y = p[1];\n\n    if (x1 < x2) {\n        if (!between(x1, x, x2)) return false;\n    }\n    else {\n        if (!between(x2, x, x1)) return false;\n    }\n\n    if (y1 < y2) {\n        if (!between(y1, y, y2)) return false;\n    }\n    else {\n        if (!between(y2, y, y1)) return false;\n    }\n\n    return true;\n}\n\n\n/**\n * Checks whether two segments have the same coordinates\n * @param {ol.geom.LineString} s1\n * @param {ol.geom.LineString} s2\n * @returns {boolean} whether the segments are the same\n */\nexport function segmentsEqual(s1, s2) {\n    return (s1.getFirstCoordinate()[0] === s2.getFirstCoordinate()[0] &&\n            s1.getFirstCoordinate()[1] === s2.getFirstCoordinate()[1] &&\n            s1.getLastCoordinate()[0] === s2.getLastCoordinate()[0] &&\n            s1.getLastCoordinate()[1] === s2.getLastCoordinate()[1]);\n}\n\n/**\n * Checks whether two rectangles intersect, that is to say they overlap\n * @param {Object} a\n * @param {Object} b\n * @returns {boolean} whether rectangles intersect\n */\nexport function rectanglesIntersect(a, b) {\n    var x = Math.max(a.minX, b.minX);\n    var num1 = Math.min(a.maxX, b.maxX);\n    var y = Math.max(a.minY, b.minY);\n    var num2 = Math.min(a.maxY, b.maxY);\n    if (num1 >= x && num2 >= y)\n        return {minX: x, minY: y, maxX: num1, maxY:num2};\n    else\n        return false;\n}\n\n/**\n * Checks whether a rectangle is entirely contained inside another rectangle\n * @param {Array<number>} r1\n * @param {Array<number>} r2\n * @returns {boolean} whether r2 is entirely contained in r1\n */\nexport function rectangleContains(r1, r2) {\n    var r1minX = r1[0];\n    var r1minY = r1[1];\n    var r1maxX = r1[2];\n    var r1maxY = r1[3];\n\n    var r2minX = r2[0];\n    var r2minY = r2[1];\n    var r2maxX = r2[2];\n    var r2maxY = r2[3];\n\n    return (r2minX >= r1minX && r2minX <= r1maxX &&\n            r2maxX >= r1minX && r2maxX <= r1maxX &&\n            r2minY >= r1minY && r2minY <= r1maxY &&\n            r2maxY >= r1minY && r2maxY <= r1maxY);\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/lineintersection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "variable",
    "name": "epsilon",
    "memberof": "lib/lineintersection.js",
    "static": true,
    "longname": "lib/lineintersection.js~epsilon",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{epsilon}",
    "description": "Error tolerance epsilon",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 324,
    "kind": "function",
    "name": "setEpsilon",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~setEpsilon",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{setEpsilon}",
    "description": "Change the value of {@link epsilon}",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "eps",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 325,
    "kind": "function",
    "name": "between",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~between",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": null,
    "description": "Checks if number b is in the interval [a, c+epsilon]",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} Between coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "lower bound"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "value to check"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "upper bound"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "Between coordinates"
    },
    "ignore": true
  },
  {
    "__docId__": 326,
    "kind": "function",
    "name": "averageDiff",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~averageDiff",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": null,
    "description": "Mean absolute difference of b between a and c",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} mean absolute difference"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": "first value"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": "value to check"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "second value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "mean absolute difference"
    },
    "ignore": true
  },
  {
    "__docId__": 327,
    "kind": "function",
    "name": "segmentIntersectionExact",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~segmentIntersectionExact",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{segmentIntersectionExact}",
    "description": "Exact Intersection segment",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|{x,y}} the intersection, if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "First segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "First segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "First segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "First segment second point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x3",
        "description": "Second segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y3",
        "description": "Second segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x4",
        "description": "Second segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y4",
        "description": "Second segment second point y"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "{x,y}"
      ],
      "spread": false,
      "description": "the intersection, if it exists"
    }
  },
  {
    "__docId__": 328,
    "kind": "function",
    "name": "segmentIntersection",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~segmentIntersection",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{segmentIntersection}",
    "description": "Intersection segment",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|{x,y}} the intersection, if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "First segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "First segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "First segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "First segment second point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x3",
        "description": "Second segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y3",
        "description": "Second segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x4",
        "description": "Second segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y4",
        "description": "Second segment second point y"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "{x,y}"
      ],
      "spread": false,
      "description": "the intersection, if it exists"
    }
  },
  {
    "__docId__": 329,
    "kind": "function",
    "name": "lineIntersection",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~lineIntersection",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{lineIntersection}",
    "description": "Intersection line",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|{x,y}} the intersection, if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "First segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "First segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "First segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "First segment second point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x3",
        "description": "Second segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y3",
        "description": "Second segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x4",
        "description": "Second segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y4",
        "description": "Second segment second point y"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "{x,y}"
      ],
      "spread": false,
      "description": "the intersection, if it exists"
    }
  },
  {
    "__docId__": 330,
    "kind": "function",
    "name": "halfLineAndLineIntersection",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~halfLineAndLineIntersection",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{halfLineAndLineIntersection}",
    "description": "Intersection half-line and line",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|{x,y}} the intersection, if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "First segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "First segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "First segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "First segment second point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x3",
        "description": "Second segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y3",
        "description": "Second segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x4",
        "description": "Second segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y4",
        "description": "Second segment second point y"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "{x,y}"
      ],
      "spread": false,
      "description": "the intersection, if it exists"
    }
  },
  {
    "__docId__": 331,
    "kind": "function",
    "name": "halfLineIntersection",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~halfLineIntersection",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{halfLineIntersection}",
    "description": "Intersection half line",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|{x,y}} the intersection, if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "First segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "First segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "First segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "First segment second point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x3",
        "description": "Second segment first point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y3",
        "description": "Second segment first point y"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x4",
        "description": "Second segment second point x"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y4",
        "description": "Second segment second point y"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "{x,y}"
      ],
      "spread": false,
      "description": "the intersection, if it exists"
    }
  },
  {
    "__docId__": 332,
    "kind": "function",
    "name": "segmentsIntersect",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~segmentsIntersect",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{segmentsIntersect}",
    "description": "Helper function to check if there is intersection between two segments represented as linestring objects",
    "lineNumber": 256,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|{x,y}} the intersection, if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "s1",
        "description": "first linestring segment"
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "s2",
        "description": "second linestring segment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "{x,y}"
      ],
      "spread": false,
      "description": "the intersection, if it exists"
    }
  },
  {
    "__docId__": 333,
    "kind": "function",
    "name": "halfLinesIntersect",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~halfLinesIntersect",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{halfLinesIntersect}",
    "description": "Helper function to check if there is intersection between two half lines represented as linestring objects where first coordinate is the start of the half line",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Boolean|{x,y}} the intersection, if it exists"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "s1",
        "description": "first linestring half lines"
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "s2",
        "description": "second linestring half lines"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean",
        "{x,y}"
      ],
      "spread": false,
      "description": "the intersection, if it exists"
    }
  },
  {
    "__docId__": 334,
    "kind": "function",
    "name": "onSegment",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~onSegment",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{onSegment}",
    "description": "Checks whether a point belongs to a segment",
    "lineNumber": 296,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether p belongs to s"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "the point"
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "the segment"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether p belongs to s"
    }
  },
  {
    "__docId__": 335,
    "kind": "function",
    "name": "segmentsEqual",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~segmentsEqual",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{segmentsEqual}",
    "description": "Checks whether two segments have the same coordinates",
    "lineNumber": 332,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether the segments are the same"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "s1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.geom.LineString"
        ],
        "spread": false,
        "optional": false,
        "name": "s2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the segments are the same"
    }
  },
  {
    "__docId__": 336,
    "kind": "function",
    "name": "rectanglesIntersect",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~rectanglesIntersect",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{rectanglesIntersect}",
    "description": "Checks whether two rectangles intersect, that is to say they overlap",
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether rectangles intersect"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether rectangles intersect"
    }
  },
  {
    "__docId__": 337,
    "kind": "function",
    "name": "rectangleContains",
    "memberof": "lib/lineintersection.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/lineintersection.js~rectangleContains",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/lineintersection.js",
    "importStyle": "{rectangleContains}",
    "description": "Checks whether a rectangle is entirely contained inside another rectangle",
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether r2 is entirely contained in r1"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "r1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "r2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether r2 is entirely contained in r1"
    }
  },
  {
    "__docId__": 338,
    "kind": "file",
    "name": "lib/picture.js",
    "content": "/**\n * @fileOverview Base class to represent a picture/photograph (metadata, isovist and image)\n * @name picture.js\n * @author Florent Grélard\n * @license\n */\n\nimport Point from 'ol/geom/Point';\nimport IsoVist from './isovistsectors2d';\n\n/**\n * Base class to represent a picture/photograph (metadata, isovist and image)\n */\nexport default class Picture {\n\n    /**\n     * Constructor\n     * @param {string} filename the path to the picture in the database\n     * @param {Array<number>} position location of the picture\n     * @param {Arc} arc the visibility cone\n     */\n    constructor(filename, position, arc) {\n        /**\n         * The path to the picture in the database\n         * @type {string}\n         */\n        this.filename = filename;\n\n        /**\n         * Location of the picture\n         * @type {Array<number>}\n         */\n        this.position = position;\n\n        /**\n         * Visibility cone\n         * @type {Arc}\n         */\n        this.arc = arc;\n\n        /**\n         * Geometry used to display a picture automatically by OpenLayers\n         * @type {ol.geom.Point}\n         */\n        this.geometry = new Point(position);\n\n        /**\n         * Whether this picture is selected (on click)\n         * @type {boolean}\n         */\n        this.selected = false;\n\n        /**\n         * Isovist\n         * @type {ol.geom.Polygon|Array<ol.geom.LineString>}\n         */\n        this.isovist = null;\n\n        /**\n         * Whether this picture visualizes a request area on the map\n         * @type {boolean}\n         */\n        this.visualizesInput = false;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/picture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 339,
    "kind": "class",
    "name": "Picture",
    "memberof": "lib/picture.js",
    "static": true,
    "longname": "lib/picture.js~Picture",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/picture.js",
    "importStyle": "Picture",
    "description": "Base class to represent a picture/photograph (metadata, isovist and image)",
    "lineNumber": 14,
    "interface": false
  },
  {
    "__docId__": 340,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/picture.js~Picture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/picture.js~Picture#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "the path to the picture in the database"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": "location of the picture"
      },
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": "the visibility cone"
      }
    ]
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "filename",
    "memberof": "lib/picture.js~Picture",
    "static": false,
    "longname": "lib/picture.js~Picture#filename",
    "access": "public",
    "description": "The path to the picture in the database",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "position",
    "memberof": "lib/picture.js~Picture",
    "static": false,
    "longname": "lib/picture.js~Picture#position",
    "access": "public",
    "description": "Location of the picture",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "arc",
    "memberof": "lib/picture.js~Picture",
    "static": false,
    "longname": "lib/picture.js~Picture#arc",
    "access": "public",
    "description": "Visibility cone",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "Arc"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 344,
    "kind": "member",
    "name": "geometry",
    "memberof": "lib/picture.js~Picture",
    "static": false,
    "longname": "lib/picture.js~Picture#geometry",
    "access": "public",
    "description": "Geometry used to display a picture automatically by OpenLayers",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "ol.geom.Point"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 345,
    "kind": "member",
    "name": "selected",
    "memberof": "lib/picture.js~Picture",
    "static": false,
    "longname": "lib/picture.js~Picture#selected",
    "access": "public",
    "description": "Whether this picture is selected (on click)",
    "lineNumber": 51,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "member",
    "name": "isovist",
    "memberof": "lib/picture.js~Picture",
    "static": false,
    "longname": "lib/picture.js~Picture#isovist",
    "access": "public",
    "description": "Isovist",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon",
        "Array<ol.geom.LineString>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 347,
    "kind": "member",
    "name": "visualizesInput",
    "memberof": "lib/picture.js~Picture",
    "static": false,
    "longname": "lib/picture.js~Picture#visualizesInput",
    "access": "public",
    "description": "Whether this picture visualizes a request area on the map",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 348,
    "kind": "file",
    "name": "lib/plane.js",
    "content": "/**\n * @fileOverview Class representing a 2D plane\n * @name plane.js\n * @author Florent Grélard\n * @license\n */\nimport {halfLineIntersection, halfLineAndLineIntersection} from './lineintersection.js';\n\n/**\n * Class representing a 2D plane\n */\nexport default class Plane {\n\n    /**\n     * Constructor\n     * @param {Array<number>} center\n     * @param {Array<number>} normal\n     */\n    constructor(center, normal) {\n        /**\n         * Plane center\n         * @type {Array<number>}\n         */\n        this.center = center;\n\n        /**\n         * Plane normal\n         * @type {Array<number>}\n         */\n        this.normal = normal.slice();\n    }\n\n    /**\n     * Checks whether a point is above the plane\n     * @param {Array<number>} p the point\n     * @returns {boolean} whether p is above this plane\n     */\n    isAbove(p) {\n        if (this.center[0] === p[0] && this.center[1] === p[1])\n            return true;\n        var d = this.normal[0] * this.center[0] + this.normal[1] * this.center[1];\n\t    var valueToCheckForPlane = p[0] * this.normal[0] + p[1] * this.normal[1];\n\t    return (valueToCheckForPlane >= d);\n    }\n\n    /**\n     * Checks whether a sector is above the plane (that is to say it does not intersect the plane)\n     * @param {Arc} arc the sector\n     * @param {boolean=} isComplementary whether the plane is a complementary\n     * @param {boolean=} isHalfLine function used for intersection\n     * @returns {boolean}  whether the sector is above this plane\n     */\n    isSectorAbove(arc, isComplementary = false, isHalfLine = false) {\n        var func = (isHalfLine) ? halfLineIntersection : halfLineAndLineIntersection;\n        var isPointAbove = this.isAbove(arc.center);\n        if (isPointAbove) return true;\n\n        if (!arc.fullGeometry) {\n            arc.computeGeometry();\n        }\n        var f  = arc.center;\n        var la = arc.fullGeometry[1].getFlatCoordinates();\n        var lo = arc.fullGeometry[2].getFlatCoordinates();\n\n        var basisVector = [-this.normal[1], this.normal[0]];\n        if (isComplementary) {\n            basisVector = [-basisVector[0], -basisVector[1]];\n        }\n        var fPlane = this.center;\n        var lPlane = [this.center[0] + basisVector[0] * 5,\n                      this.center[1] + basisVector[1] * 5];\n\n        var i1 = func(f[0], f[1],\n                      la[0], la[1],\n                      fPlane[0], fPlane[1],\n                      lPlane[0], lPlane[1]);\n        var i2 = func(f[0], f[1],\n                      lo[0], lo[1],\n                      fPlane[0], fPlane[1],\n                      lPlane[0], lPlane[1]);\n        var isSectorAbove = i1 || i2;\n        return !!isSectorAbove;\n       //return this.isAbove(la) || this.isAbove(lo);\n    }\n\n    /**\n     * Utility function to display the plane in the console\n     * @returns {string} plane as a string\n     */\n    toString() {\n        var cx = Math.round(this.center[0]).toString();\n        var cy = Math.round(this.center[1]).toString();\n        return \"c=(\" + cx.slice(0, cy.length) + \",\" + cy.slice(0, cy.length) +  \"), v=(\" + this.normal[0].toFixed(2) + \",\" + this.normal[1].toFixed(2) + \")\";\n    }\n\n    /**\n     * Checks whether two planes are the same\n     * @param {Plane} other other plane\n     * @returns {boolean} whether this plane and the other plane are the same\n     */\n    equals(other) {\n        return (this.center[0] === other.center[0] &&\n                this.center[1] === other.center[1] &&\n                this.normal[0] === other.normal[0] &&\n                this.normal[1] === other.normal[1]);\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/plane.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 349,
    "kind": "class",
    "name": "Plane",
    "memberof": "lib/plane.js",
    "static": true,
    "longname": "lib/plane.js~Plane",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/plane.js",
    "importStyle": "Plane",
    "description": "Class representing a 2D plane",
    "lineNumber": 12,
    "interface": false
  },
  {
    "__docId__": 350,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/plane.js~Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/plane.js~Plane#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "normal",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 351,
    "kind": "member",
    "name": "center",
    "memberof": "lib/plane.js~Plane",
    "static": false,
    "longname": "lib/plane.js~Plane#center",
    "access": "public",
    "description": "Plane center",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 352,
    "kind": "member",
    "name": "normal",
    "memberof": "lib/plane.js~Plane",
    "static": false,
    "longname": "lib/plane.js~Plane#normal",
    "access": "public",
    "description": "Plane normal",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "isAbove",
    "memberof": "lib/plane.js~Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/plane.js~Plane#isAbove",
    "access": "public",
    "description": "Checks whether a point is above the plane",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether p is above this plane"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": "the point"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether p is above this plane"
    }
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "isSectorAbove",
    "memberof": "lib/plane.js~Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/plane.js~Plane#isSectorAbove",
    "access": "public",
    "description": "Checks whether a sector is above the plane (that is to say it does not intersect the plane)",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}  whether the sector is above this plane"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": "the sector"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isComplementary",
        "description": "whether the plane is a complementary"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isHalfLine",
        "description": "function used for intersection"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the sector is above this plane"
    }
  },
  {
    "__docId__": 355,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/plane.js~Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/plane.js~Plane#toString",
    "access": "public",
    "description": "Utility function to display the plane in the console",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} plane as a string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "plane as a string"
    },
    "params": []
  },
  {
    "__docId__": 356,
    "kind": "method",
    "name": "equals",
    "memberof": "lib/plane.js~Plane",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/plane.js~Plane#equals",
    "access": "public",
    "description": "Checks whether two planes are the same",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether this plane and the other plane are the same"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Plane"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": "other plane"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether this plane and the other plane are the same"
    }
  },
  {
    "__docId__": 357,
    "kind": "file",
    "name": "lib/polardual.js",
    "content": "/**\n * @fileOverview Polar dual\n * @name polardual.js\n * @author Florent Grélard\n * @license\n */\n\nimport Dual from './dual.js';\nimport {project, boundingBox, bboxArrayToObject} from './geometry.js';\nimport {euclideanDistance} from './distance.js';\n\n/** Class representing the polar dual transform\n */\nexport default class PolarDual extends Dual {\n\n    /**\n     * Primal line to dual line\n     * @param {Array<number>} vector coefficients\n     * @param {Array<number>} center position\n     * @param {Array<number>} g barycenter\n     * @param {boolean=} vertical whether the line is vertical\n     * @returns {Array<number>} the dual of the line, a point\n     */\n    static dualLine(vector, center, g, vertical = false) {\n        var secondPoint = [center[0] + vector[0]*5,\n                           center[1] + vector[1]*5];\n        var projection = project(g, center, secondPoint);\n        var rho = euclideanDistance(projection, g);\n        rho = (projection[1] - g[1] < 0) ? -rho : rho;\n        if (center[0] === g[0] && center[1] === g[1]) {\n            rho = euclideanDistance(vector, g);\n            var theta = Math.acos((vector[0] - g[0]) / rho);\n            rho = 0;\n        }\n        else {\n            theta = Math.acos((projection[0] - g[0]) / rho);\n        }\n        return [theta, rho];\n    }\n\n     /**\n     * Primal cone to dual cone\n     * @param {Arc} arc\n     * @param {Array<number>} g barycenter\n     * @param {boolean=} vertical whether the line is vertical\n     * @returns {Array<Array<number>>}  dual of a cone, a pair of coordinates\n     */\n    static dualCone(arc, g, vertical = false) {\n        var cone = super.dualCone(arc, g, vertical);\n        var x0 = cone[0][0];\n        var x1 = cone[1][0];\n        //For vertical lines\n        // if (x0 > x1) {\n        //     cone[1][0] = Math.PI + x1;\n        // }\n        return cone;\n    }\n\n    /**\n     * bounding dual rectangle of coordinates\n     * @param {Arc} arc\n     * @param {Array<number>} g barycenter\n     * @param {boolean=} vertical whether the sector contains the vertical line\n     * @returns {Array} the bounding box\n     */\n    static dualBoundingRectangle(arc, g, vertical = false) {\n        var dualArc = this.dualCone(arc, g, vertical);\n        var bbox = boundingBox(dualArc);\n        var minX = bbox[0][0];\n        var minY = bbox[0][1];\n        var maxX = bbox[1][0];\n        var maxY = bbox[1][1];\n\n        //Finding local maximum\n        var coord = [arc.center[0] - g[0],\n                     arc.center[1] - g[1]];\n        var max = Math.sqrt(Math.pow(coord[0], 2) +\n                            Math.pow(coord[1], 2));\n        var theta = Math.atan(coord[1] / coord[0]);\n        if (theta < 0) {\n            theta += Math.PI;\n        }\n        if (theta >= minX && theta <= maxX) {\n            var rho = coord[0] * Math.cos(theta) + coord[1] * Math.sin(theta);\n            if (rho < minY) {\n                minY = rho;\n            }\n            if (rho > maxY) {\n                maxY = rho;\n            }\n        }\n        var bboxCoordinates = bboxArrayToObject(boundingBox([[minX, minY], [maxX, maxY]]), arc);\n\n        //For vertical lines : two bounding rectangles\n        if (arc.omega%180 > 90 && arc.alpha%180 < 90) {\n            var first = dualArc[1];\n            var second = dualArc[0];\n            var rho1 = coord[0] * Math.cos(0) + coord[1] * Math.sin(0);\n            var rho2 = coord[0] * Math.cos(Math.PI) + coord[1] * Math.sin(1);\n            var bbox1 = boundingBox([[0, rho1], first]);\n            var bbox2 = boundingBox([second, [Math.PI, rho2]]);\n\n            var bboxCoordinates1 = bboxArrayToObject(bbox1, arc);\n            var bboxCoordinates2 = bboxArrayToObject(bbox2, arc);\n            console.log(arc.omega + \" \" + arc.alpha);\n            return [bboxCoordinates1, bboxCoordinates2];\n\n        }\n        else {\n            return [bboxCoordinates];\n        }\n    }\n\n     /**\n     * Intersection between primal point and rectangle\n     * @param {Array<number>} point request point\n     * @param {Array} rectangle the bounding box\n     * @returns {boolean} whether it intersects or not\n     */\n    static intersectionRequestRectangle(point, rectangle) {\n        var a = point[0];\n        var b = point[1];\n        var rho = (x) => a * Math.cos(x) + b * Math.sin(x);\n        var theta = (y, shift) => (a < 0) ? Math.acos(-y / R) + shift : Math.acos(y / R) + shift;\n        var thetaCounterClockwise = (y, shift) => (a < 0) ? -Math.acos(-y / R) + shift : -Math.acos(y / R) + shift;\n        var between = (a, b, c) => (b >= a && b <= c);\n        var low = [rectangle.minX, rectangle.minY];\n        var up = [rectangle.maxX, rectangle.maxY];\n\n        var R = Math.sqrt(a*a + b*b);\n        var alpha = Math.atan(b / a);\n        var alphaN = alpha + 2 * Math.PI;\n\n        var lowI = [theta(low[1]), rho(low[0])];\n        var upI = [theta(up[1]), rho(up[0])];\n        var thetaLPS = theta(low[1], alpha);\n        var thetaLNS = theta(low[1], alphaN);\n        var thetaLPC = thetaCounterClockwise(low[1], alpha);\n        var thetaLNC = thetaCounterClockwise(low[1], alphaN);\n        var thetaUPS = theta(up[1], alpha);\n        var thetaUNS = theta(up[1], alphaN);\n        var thetaUPC = thetaCounterClockwise(up[1], alpha);\n        var thetaUNC = thetaCounterClockwise(up[1], alphaN);\n        var condition = (between(low[0], thetaLPS, up[0]) ||\n                         between(low[0], thetaLNS, up[0]) ||\n                         between(low[0], thetaLPC, up[0]) ||\n                         between(low[0], thetaLNC, up[0]) ||\n                         between(low[0], thetaUPS, up[0]) ||\n                         between(low[0], thetaUNS, up[0]) ||\n                         between(low[0], thetaUPC, up[0]) ||\n                         between(low[0], thetaUNC, up[0]) ||\n                         between(low[1], lowI[1], up[1]) ||\n                         between(low[1], upI[1], up[1]));\n        return condition;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/polardual.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "class",
    "name": "PolarDual",
    "memberof": "lib/polardual.js",
    "static": true,
    "longname": "lib/polardual.js~PolarDual",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/polardual.js",
    "importStyle": "PolarDual",
    "description": "Class representing the polar dual transform",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "lib/dual.js~Dual"
    ]
  },
  {
    "__docId__": 359,
    "kind": "method",
    "name": "dualLine",
    "memberof": "lib/polardual.js~PolarDual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/polardual.js~PolarDual.dualLine",
    "access": "public",
    "description": "Primal line to dual line",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<number>} the dual of the line, a point"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "vector",
        "description": "coefficients"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": "position"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "barycenter"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "vertical",
        "description": "whether the line is vertical"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<number>"
      ],
      "spread": false,
      "description": "the dual of the line, a point"
    }
  },
  {
    "__docId__": 360,
    "kind": "method",
    "name": "dualCone",
    "memberof": "lib/polardual.js~PolarDual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/polardual.js~PolarDual.dualCone",
    "access": "public",
    "description": "Primal cone to dual cone",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<Array<number>>}  dual of a cone, a pair of coordinates"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "barycenter"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "vertical",
        "description": "whether the line is vertical"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<Array<number>>"
      ],
      "spread": false,
      "description": "dual of a cone, a pair of coordinates"
    }
  },
  {
    "__docId__": 361,
    "kind": "method",
    "name": "dualBoundingRectangle",
    "memberof": "lib/polardual.js~PolarDual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/polardual.js~PolarDual.dualBoundingRectangle",
    "access": "public",
    "description": "bounding dual rectangle of coordinates",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} the bounding box"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "g",
        "description": "barycenter"
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "vertical",
        "description": "whether the sector contains the vertical line"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the bounding box"
    }
  },
  {
    "__docId__": 362,
    "kind": "method",
    "name": "intersectionRequestRectangle",
    "memberof": "lib/polardual.js~PolarDual",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/polardual.js~PolarDual.intersectionRequestRectangle",
    "access": "public",
    "description": "Intersection between primal point and rectangle",
    "lineNumber": 120,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether it intersects or not"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": "request point"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "rectangle",
        "description": "the bounding box"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether it intersects or not"
    }
  },
  {
    "__docId__": 363,
    "kind": "file",
    "name": "lib/randomfeatures.js",
    "content": "import Arc from './arc';\n\n/**\n * Random number between min and max\n * @param {number} min\n * @param {number} max\n * @returns {number} the random number\n */\nexport function getRandomArbitrary(min, max) {\n    return Math.random() * (max - min) + min;\n}\n\n/**\n * Random features with position\n * @param {ol.Extent} extent map extent\n * @param {Number} count number of features\n * @returns {Array} array with positions\n */\nexport function addRandomLocations(extent, count) {\n    var coordinates = [];\n    for (var i = 0; i < count; i++) {\n        var extx = extent[2] - extent[0];\n        var exty = extent[3] - extent[1];\n        var middlex = extent[0]+extx/2;\n        var middley = extent[1]+exty/2;\n        var factorx = extx / 3;\n        var factory = exty / 3;\n        var randomCoordinates = [getRandomArbitrary(middlex-factorx, middlex+factorx), getRandomArbitrary(middley-factory, middley+factory)];\n        coordinates.push(randomCoordinates);\n    }\n    return coordinates;\n}\n\n\n/**\n * Add random arcs (angles) at given locations\n * @param {Array.<Array>} positions the locations\n * @returns {Array.<Arc>} arcs\n */\nexport function addRandomArcs(positions) {\n    var arcs = [];\n    for (var i = 0; i < positions.length; i++) {\n        var coordinates = positions[i];\n        var alpha = getRandomArbitrary(0,360);\n        var omega = alpha + getRandomArbitrary(2,7);\n        var radius = 100;\n        var arc =  new Arc(coordinates, radius, alpha, omega);\n        arc.computeGeometry();\n        arcs.push(arc);\n    }\n    return arcs;\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/randomfeatures.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "getRandomArbitrary",
    "memberof": "lib/randomfeatures.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/randomfeatures.js~getRandomArbitrary",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/randomfeatures.js",
    "importStyle": "{getRandomArbitrary}",
    "description": "Random number between min and max",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the random number"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the random number"
    }
  },
  {
    "__docId__": 365,
    "kind": "function",
    "name": "addRandomLocations",
    "memberof": "lib/randomfeatures.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/randomfeatures.js~addRandomLocations",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/randomfeatures.js",
    "importStyle": "{addRandomLocations}",
    "description": "Random features with position",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} array with positions"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.Extent"
        ],
        "spread": false,
        "optional": false,
        "name": "extent",
        "description": "map extent"
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "number of features"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "array with positions"
    }
  },
  {
    "__docId__": 366,
    "kind": "function",
    "name": "addRandomArcs",
    "memberof": "lib/randomfeatures.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/randomfeatures.js~addRandomArcs",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/randomfeatures.js",
    "importStyle": "{addRandomArcs}",
    "description": "Add random arcs (angles) at given locations",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<Arc>} arcs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array.<Array>"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": "the locations"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<Arc>"
      ],
      "spread": false,
      "description": "arcs"
    }
  },
  {
    "__docId__": 367,
    "kind": "file",
    "name": "lib/sector.js",
    "content": "/**\n * @deprecated\n * @fileOverview Angular sector as two planes delimiting space used by {@link ASTreeSectors}\n * @name sector.js\n * @author Florent Grélard\n * @license\n */\n\nimport Plane from './plane';\n\n/**\n * Angular sector as two planes delimiting space used by {@link ASTreeSectors}\n * @deprecated\n */\nexport default class Sector {\n\n    /**\n     * Constructor\n     * @param {Array<number>} center center\n     * @param {Array<number>} normal1 first plane normal\n     * @param {Array<number>} normal2 second plane normal\n     */\n    constructor(center, normal1, normal2) {\n        /**\n         * First plane\n         * @type {Plane}\n         */\n        this.firstPlane = new Plane(center, normal1);\n\n        /**\n         * Second plane\n         * @type {Plane}\n         */\n        this.secondPlane = new Plane(center, normal2);\n    }\n\n    /**\n     * Checks whether an angular sector is above this sector\n     * @param {Arc} arc\n     * @param {boolean=} isLine function to use for intersection\n     * @returns {boolean} whether it is above this plane\n     */\n    isSectorAbove(arc, isLine = false) {\n        return (this.firstPlane.isSectorAbove(arc, false, isLine) &&\n                this.secondPlane.isSectorAbove(arc, false, isLine));\n    }\n\n    /**\n     * Checks whether an angular sector is above the complementary of this sector\n     * @param {Arc} arc\n     * @param {boolean=} isLine function to use for intersection\n     * @returns {boolean=} whether it is above this complementary\n     */\n    isSectorAboveComplementary(arc, isLine = false) {\n        return (this.firstPlane.isSectorAbove(arc, false, isLine) ||\n                this.secondPlane.isSectorAbove(arc, false, isLine));\n    }\n\n\n    /**\n     * Checks whether a point is above this sector\n     * @param {Array<number>} p\n     * @returns {boolean} whether p is above this sector\n     */\n    isAbove(p) {\n        return (this.firstPlane.isAbove(p) &&\n                this.secondPlane.isAbove(p));\n    }\n\n    /**\n     * Checks whether two sectors are the same\n     * @param {Sector} other\n     * @returns {boolean} whether the sectors are the same\n     */\n    equals(other) {\n        return (this.firstPlane.equals(other.firstPlane) &&\n                this.secondPlane.equals(other.secondPlane));\n    }\n\n    /**\n     * Checks whether two sectors have the same center\n     * @param {Sector} other\n     * @returns {boolean} whether they have the same center\n     */\n    sameCenter(other) {\n        return (this.firstPlane.center[0] === other.firstPlane.center[0] &&\n                this.firstPlane.center[1] === other.firstPlane.center[1]);\n    }\n\n    /**\n     * Utility function to display the sector in the console\n     * @returns {string} sector as a string\n     */\n    toString() {\n        return this.firstPlane + \"\\n\" + this.secondPlane;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/sector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 368,
    "kind": "class",
    "name": "Sector",
    "memberof": "lib/sector.js",
    "static": true,
    "longname": "lib/sector.js~Sector",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/sector.js",
    "importStyle": "Sector",
    "description": "Angular sector as two planes delimiting space used by {@link ASTreeSectors}",
    "lineNumber": 15,
    "deprecated": true,
    "interface": false
  },
  {
    "__docId__": 369,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/sector.js~Sector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/sector.js~Sector#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": "center"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "normal1",
        "description": "first plane normal"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "normal2",
        "description": "second plane normal"
      }
    ]
  },
  {
    "__docId__": 370,
    "kind": "member",
    "name": "firstPlane",
    "memberof": "lib/sector.js~Sector",
    "static": false,
    "longname": "lib/sector.js~Sector#firstPlane",
    "access": "public",
    "description": "First plane",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "Plane"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 371,
    "kind": "member",
    "name": "secondPlane",
    "memberof": "lib/sector.js~Sector",
    "static": false,
    "longname": "lib/sector.js~Sector#secondPlane",
    "access": "public",
    "description": "Second plane",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Plane"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 372,
    "kind": "method",
    "name": "isSectorAbove",
    "memberof": "lib/sector.js~Sector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/sector.js~Sector#isSectorAbove",
    "access": "public",
    "description": "Checks whether an angular sector is above this sector",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether it is above this plane"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isLine",
        "description": "function to use for intersection"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether it is above this plane"
    }
  },
  {
    "__docId__": 373,
    "kind": "method",
    "name": "isSectorAboveComplementary",
    "memberof": "lib/sector.js~Sector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/sector.js~Sector#isSectorAboveComplementary",
    "access": "public",
    "description": "Checks whether an angular sector is above the complementary of this sector",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean=} whether it is above this complementary"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean="
        ],
        "spread": false,
        "optional": false,
        "name": "isLine",
        "description": "function to use for intersection"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean="
      ],
      "spread": false,
      "description": "whether it is above this complementary"
    }
  },
  {
    "__docId__": 374,
    "kind": "method",
    "name": "isAbove",
    "memberof": "lib/sector.js~Sector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/sector.js~Sector#isAbove",
    "access": "public",
    "description": "Checks whether a point is above this sector",
    "lineNumber": 65,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether p is above this sector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "p",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether p is above this sector"
    }
  },
  {
    "__docId__": 375,
    "kind": "method",
    "name": "equals",
    "memberof": "lib/sector.js~Sector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/sector.js~Sector#equals",
    "access": "public",
    "description": "Checks whether two sectors are the same",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether the sectors are the same"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Sector"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether the sectors are the same"
    }
  },
  {
    "__docId__": 376,
    "kind": "method",
    "name": "sameCenter",
    "memberof": "lib/sector.js~Sector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/sector.js~Sector#sameCenter",
    "access": "public",
    "description": "Checks whether two sectors have the same center",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether they have the same center"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Sector"
        ],
        "spread": false,
        "optional": false,
        "name": "other",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether they have the same center"
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "toString",
    "memberof": "lib/sector.js~Sector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/sector.js~Sector#toString",
    "access": "public",
    "description": "Utility function to display the sector in the console",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} sector as a string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "sector as a string"
    },
    "params": []
  },
  {
    "__docId__": 378,
    "kind": "file",
    "name": "lib/serverpoll.js",
    "content": "/**\n * @fileOverview Allows to poll a Webserver for images\n * isovists and metadata\n * @name serverpoll.js\n * @author Florent Grélard\n * @license\n */\n\n\nimport Arc from './arc';\nimport {transformExtent} from 'ol/proj';\nimport OSMXML from 'ol/format/OSMXML';\nimport View from 'ol/View';\n\n/**\n * WebServer URL to poll\n * @type {string}\n */\nvar urlDB = \"http://159.84.143.100:8080/\";\n\n/**\n * Converts a POST response to a blob for image display in the browser\n * @param {json} json the post request\n * @returns {Blob} blob\n */\nfunction jsonToBlob(json) {\n    var sliceSize = sliceSize || 512;\n\n    var byteCharacters = atob(json);\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n        var slice = byteCharacters.slice(offset, offset + sliceSize);\n\n        var byteNumbers = new Array(slice.length);\n        for (var i = 0; i < slice.length; i++) {\n            byteNumbers[i] = slice.charCodeAt(i);\n        }\n\n        var byteArray = new Uint8Array(byteNumbers);\n\n        byteArrays.push(byteArray);\n    }\n    var blob = new Blob(byteArrays, {type: \"image/jpeg\"});\n    return blob;\n}\n\n/**\n * Generic function to poll the DB\n * @param {string} path local path used in the post request\n * @param {string} url2 the POST path\n * @returns {json} json post result\n */\nexport function pollDB(path, url2) {\n    var t0Image = fetch(urlDB + url2, {\n        method: 'post',\n        body: JSON.stringify(path)\n    });\n    var t1Image = t0Image.then(function (response) {\n        return response.json();\n    });\n    t1Image.then(function(resultPost) {\n        return resultPost;\n    });\n    return t1Image;\n}\n\n\n/**\n * Polls for images\n * @param {string} path the full path to the image\n * @param {AbortController} signal the controller allowing to manage request (null by default)\n * @returns {URL} the blob image url\n */\nexport function pollImages(path, signal = null) {\n    var t0Image = fetch(urlDB + \"images\", {\n        method: 'post',\n        body: JSON.stringify({str: path}),\n        signal\n    });\n    var t1Image = t0Image.then(function (response) {\n        return response.json();\n    });\n    var t2Image = t1Image.then(function(resultPost) {\n        var blob = jsonToBlob(resultPost);\n        var urlCreator = window.URL || window.webkitURL;\n        var imageUrl = urlCreator.createObjectURL(blob);\n        return imageUrl;\n    });\n    return t2Image;\n}\n\n\n/**\n * Polls for thumbnails\n * @param {string} path the full path to the image\n * @param {AbortController} signal the controller allowing to manage request (null by default)\n * @returns {URL} the blob image url\n */\nexport function pollThumbnails(path, signal = null) {\n    var t0Image = fetch(urlDB + \"thumbnails\", {\n        method: 'post',\n        body: JSON.stringify({str: path}),\n        signal\n    });\n    var t1Image = t0Image.then(function (response) {\n        return response.json();\n    });\n    var t2Image = t1Image.then(function(resultPost) {\n        var blob = jsonToBlob(resultPost);\n        var urlCreator = window.URL || window.webkitURL;\n        var imageUrl = urlCreator.createObjectURL(blob);\n        return imageUrl;\n    });\n    return t2Image;\n}\n\n/**\n * Polls for isovists\n * @param {string} path the full path to the image\n * @param {AbortController} signal the controller allowing to manage request (null by default)\n * @returns {ol.geom.Polygon} the isovist\n */\nexport function pollIsovist(path, signal) {\n\n    var t0Image = fetch(urlDB + \"isovist\", {\n        method: 'post',\n        body: JSON.stringify({str: path}),\n        signal\n    });\n    var t1Image = t0Image.then(function (response) {\n        return response.json();\n    });\n    return t1Image.then(function(json) {\n        return json[0].Isovist;\n    });\n}\n\n\n/**\n * @deprecated\n * Client request for building segments\n * @param {ol.extent.Extent} extent2 extent in which to search for building segments\n * @param {ol.Projection} projection world projection\n * @returns {XMLHttpRequest} client request\n */\nexport function getBuildingSegments(extent2, projection) {\n    var client = new XMLHttpRequest();\n    client.open('POST', 'https://overpass-api.de/api/interpreter');\n\n    var epsg4326Extent =\n            transformExtent(extent2, projection, 'EPSG:4326');\n    var query = '(node(' +\n            epsg4326Extent[1] + ',' + epsg4326Extent[0] + ',' +\n            epsg4326Extent[3] + ',' + epsg4326Extent[2] +\n            ');rel(bn)->.foo;way(bn);node(w)->.foo;rel(bw););out meta;';\n    client.send(query);\n    return client;\n}\n\n\n/**\n * @deprecated\n * Response to client request for building segments\n * @param {XMLHttpRequest} client\n * @param {ol.Map} map\n * @param {Array<number>=} position\n * @returns {Array.<ol.Feature>} segments\n */\nexport function segmentsFromXMLRequest(client, map, position = null) {\n    var features = new OSMXML().readFeatures(client.responseText, {\n        featureProjection: (position) ? new View({center:position}).getProjection() : map.getView().getProjection()\n    });\n    var limitedFeatures = [];\n    for (var i = 0; i < features.length; i++) {\n        var f = features[i];\n        var node = f.getProperties();\n        if (node.hasOwnProperty(\"building\") ||\n            node.hasOwnProperty(\"amenity\")  ||\n            node.hasOwnProperty(\"natural\")\n           ) {\n            limitedFeatures.push(f);\n        }\n    }\n    return limitedFeatures;\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/serverpoll.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 379,
    "kind": "variable",
    "name": "urlDB",
    "memberof": "lib/serverpoll.js",
    "static": true,
    "longname": "lib/serverpoll.js~urlDB",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": null,
    "description": "WebServer URL to poll",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 380,
    "kind": "function",
    "name": "jsonToBlob",
    "memberof": "lib/serverpoll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serverpoll.js~jsonToBlob",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": null,
    "description": "Converts a POST response to a blob for image display in the browser",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Blob} blob"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "json"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": "the post request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Blob"
      ],
      "spread": false,
      "description": "blob"
    },
    "ignore": true
  },
  {
    "__docId__": 381,
    "kind": "function",
    "name": "pollDB",
    "memberof": "lib/serverpoll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serverpoll.js~pollDB",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": "{pollDB}",
    "description": "Generic function to poll the DB",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{json} json post result"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "local path used in the post request"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "url2",
        "description": "the POST path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "json"
      ],
      "spread": false,
      "description": "json post result"
    }
  },
  {
    "__docId__": 382,
    "kind": "function",
    "name": "pollImages",
    "memberof": "lib/serverpoll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serverpoll.js~pollImages",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": "{pollImages}",
    "description": "Polls for images",
    "lineNumber": 75,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{URL} the blob image url"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "the full path to the image"
      },
      {
        "nullable": null,
        "types": [
          "AbortController"
        ],
        "spread": false,
        "optional": false,
        "name": "signal",
        "description": "the controller allowing to manage request (null by default)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "URL"
      ],
      "spread": false,
      "description": "the blob image url"
    }
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "pollThumbnails",
    "memberof": "lib/serverpoll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serverpoll.js~pollThumbnails",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": "{pollThumbnails}",
    "description": "Polls for thumbnails",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{URL} the blob image url"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "the full path to the image"
      },
      {
        "nullable": null,
        "types": [
          "AbortController"
        ],
        "spread": false,
        "optional": false,
        "name": "signal",
        "description": "the controller allowing to manage request (null by default)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "URL"
      ],
      "spread": false,
      "description": "the blob image url"
    }
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "pollIsovist",
    "memberof": "lib/serverpoll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serverpoll.js~pollIsovist",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": "{pollIsovist}",
    "description": "Polls for isovists",
    "lineNumber": 124,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.geom.Polygon} the isovist"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "the full path to the image"
      },
      {
        "nullable": null,
        "types": [
          "AbortController"
        ],
        "spread": false,
        "optional": false,
        "name": "signal",
        "description": "the controller allowing to manage request (null by default)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.geom.Polygon"
      ],
      "spread": false,
      "description": "the isovist"
    }
  },
  {
    "__docId__": 385,
    "kind": "function",
    "name": "getBuildingSegments",
    "memberof": "lib/serverpoll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serverpoll.js~getBuildingSegments",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": "{getBuildingSegments}",
    "description": "",
    "lineNumber": 147,
    "deprecated": "Client request for building segments",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{XMLHttpRequest} client request"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.extent.Extent"
        ],
        "spread": false,
        "optional": false,
        "name": "extent2",
        "description": "extent in which to search for building segments"
      },
      {
        "nullable": null,
        "types": [
          "ol.Projection"
        ],
        "spread": false,
        "optional": false,
        "name": "projection",
        "description": "world projection"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "XMLHttpRequest"
      ],
      "spread": false,
      "description": "client request"
    }
  },
  {
    "__docId__": 386,
    "kind": "function",
    "name": "segmentsFromXMLRequest",
    "memberof": "lib/serverpoll.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/serverpoll.js~segmentsFromXMLRequest",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/serverpoll.js",
    "importStyle": "{segmentsFromXMLRequest}",
    "description": "",
    "lineNumber": 170,
    "deprecated": "Response to client request for building segments",
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array.<ol.Feature>} segments"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "XMLHttpRequest"
        ],
        "spread": false,
        "optional": false,
        "name": "client",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.Map"
        ],
        "spread": false,
        "optional": false,
        "name": "map",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>="
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array.<ol.Feature>"
      ],
      "spread": false,
      "description": "segments"
    }
  },
  {
    "__docId__": 387,
    "kind": "file",
    "name": "lib/styles.js",
    "content": "/**\n * @fileOverview Styles for the display of layers on the map by OpenLayers\n * @name styles.js\n * @author Florent Grélard\n * @license\n */\nimport Style  from 'ol/style/Style';\nimport Stroke  from 'ol/style/Stroke';\nimport Fill  from 'ol/style/Fill';\nimport Text  from 'ol/style/Text';\nimport Circle  from 'ol/style/Circle';\nimport {DEVICE_PIXEL_RATIO} from 'ol/has';\nimport {getHeight, getWidth} from 'ol/extent';\nimport ImageStatic from 'ol/source/ImageStatic';\nimport Overlay from 'ol/Overlay';\nimport Icon from 'ol/style/Icon';\nimport Photo from 'ol-ext/style/Photo';\nimport RegularShape from 'ol/style/RegularShape';\n\n/**\n * Determines the size of the image\n * @type {number}\n */\nexport var pointRadius = 20;\n\n/**\n * Cache for style\n * @type {Object}\n */\nvar styleCache = {};\n\n/**\n * Styles to display XML data from cadastral information\n * @type {Object}\n */\nexport var stylesTopo = {\n    'amenity': {\n        'parking': new Style({\n            stroke: new Stroke({\n                color: 'rgba(170, 170, 170, 1.0)',\n                width: 1\n            }),\n            fill: new Fill({\n                color: 'rgba(170, 170, 170, 0.3)'\n            })\n        })\n    },\n    'building': {\n        '.*': new Style({\n            zIndex: 100,\n            stroke: new Stroke({\n                color: 'rgba(246, 99, 79, 1.0)',\n                width: 1\n            }),\n            fill: new Fill({\n                color: 'rgba(246, 99, 79, 0.3)'\n            })\n        })\n    },\n    'highway': {\n        'service': new Style({\n            stroke: new Stroke({\n                color: 'rgba(255, 255, 255, 1.0)',\n                width: 2\n            })\n        }),\n        '.*': new Style({\n            stroke: new Stroke({\n                color: 'rgba(255, 255, 255, 1.0)',\n                width: 3\n            })\n        })\n    },\n    'landuse': {\n        'forest|grass|allotments': new Style({\n            stroke: new Stroke({\n                color: 'rgba(140, 208, 95, 1.0)',\n                width: 1\n            }),\n            fill: new Fill({\n                color: 'rgba(140, 208, 95, 0.3)'\n            })\n        })\n    },\n    'natural': {\n        'tree': new Style({\n            image: new Circle({\n                radius: 2,\n                fill: new Fill({\n                    color: 'rgba(140, 208, 95, 1.0)'\n                }),\n                stroke: null\n            })\n        })\n    }\n};\n\n/**\n * Sets the styles for the XML data from cadastral information\n * @param {ol.Feature} feature\n * @returns {ol.style.Style} the style\n */\nexport function setStyleTopo(feature) {\n    for (var key in stylesTopo) {\n        var value = feature.get(key);\n        if (value !== undefined) {\n            for (var regexp in stylesTopo[key]) {\n                if (new RegExp(regexp).test(value)) {\n                    return stylesTopo[key][regexp];\n                }\n            }\n        }\n    }\n    return null;\n}\n\n/**\n * Sets the isovist style\n * @returns {ol.style.Style}\n */\nexport function setStylePolygonIsovist() {\n    return new Style({\n        stroke : new Stroke({\n            color: '#FFFF00'\n        }),\n        fill: new Fill({\n            color: 'rgba(140, 208, 95, 0.5)',\n        })\n    });\n}\n\n/**\n * Sets the heatmap style\n * @returns {ol.style.Style}\n */\nexport function setStylePolygonColormapIsovist() {\n    return new Style({\n        fill: new Fill({\n            color: 'rgba(255, 255, 255, 1.0)',\n        })\n    });\n}\n\n/**\n * Sets the style for building segments on request\n * @returns {ol.style.Style}\n */\nexport function setStyleInput() {\n    return new Style({\n        stroke : new Stroke({\n            color: '#0000FF',\n            width: 5\n        })\n    });\n}\n\n\n/**\n * Sets the style for clusters of pictures\n * @param {ol.Feature} feature\n * @param {number} resolution\n * @returns {Array<ol.style.Style>} the style\n */\nexport function setStyleClusters(feature, resolution) {\n    var f = feature.get(\"features\")[0];\n\tvar nb = feature.get(\"features\").length;\n    var th = f.get(\"thumbnail\");\n    var k = th ? th+(nb>1?\"_0\":\"_1\") : \"default\";\n    var style = styleCache[k];\n    var photoSize = 25;\n   \tvar count = new Style(\n\t\t{\timage: new RegularShape(\n\t\t\t{\tpoints: 12,\n\t\t\t\tradius: 13,\n\t\t\t\tfill: new Fill({\n\t\t\t\t\tcolor: '#004499'\n\t\t\t\t})\n\t\t\t}),\n\t\t\ttext: new Text(\n\t\t\t\t{\ttext: nb.toString(),\n\t\t\t\t\tfont: 'bold 12px helvetica,sans-serif',\n\t\t\t\t\toffsetX: photoSize,\n\t\t\t\t\toffsetY: -photoSize,\n                    fill: new Fill({\n                        color: '#fff'\n                    })\n\t\t\t\t})\n\t\t});\n\tvar p = count.getImage().getAnchor();\n\tp[0]-=photoSize;\n\tp[1]+=photoSize;\n    if (th) {\n\t    if (!style)\n\t    {\tstyleCache[k] = style = new Style\n\t\t    ({\timage: new Photo (\n\t\t\t    {\tsrc: th,\n\t\t\t\t    radius: photoSize,\n\t\t\t\t    crop: true,\n\t\t\t\t    kind: (nb>1) ? \"folio\":\"square\",\n\t\t\t\t    shadow: true ,\n\t\t\t\t    // onload: function() { vector.changed(); },\n\t\t\t\t    stroke: new Stroke(\n\t\t\t\t\t    {\twidth:  3,\n\t\t\t\t\t\t    color:'#fff'\n\t\t\t\t\t    })\n\t\t\t    })\n\t\t     });\n\t    }\n        return [ style, count ];\n    }\n    else if (style)\n        return [style, count];\n\telse return [count];\n}\n\n\n/**\n * Circle around the picture when it visualizes a selected area on the map\n * @param {Array<number>} position\n * @returns {ol.Overlay}\n */\nexport function  createCircleOutOverlay(position) {\n    var elem = document.createElement('div');\n    elem.setAttribute('class', 'circleOut');\n\n    return new Overlay({\n        element: elem,\n        position: position,\n        positioning: 'center-center'\n    });\n}\n\n/**\n * Sets the style for the visibility cones (pale orange gradient)\n * @param {Arc} arc\n * @param {number} resolution\n * @returns {ol.style.Style}\n */\nexport function setStyleArcs(arc, resolution) {\n    var fill = new Fill();\n    var style = new Style({\n        stroke: new Stroke({\n            color: '#ff9933'\n        }),\n        fill: fill\n    });\n    fill.setColor(gradient(arc, resolution));\n    return style;\n}\n\n\n/**\n * Function allowing to generate a gradient in OpenLayers (pale orange for arcs)\n * @param {Arc} arc\n * @param {number} resolution\n * @returns {CanvasGradient} the gradient\n */\nexport function gradient(arc, resolution) {\n    var extent2 = arc.getGeometry().getExtent();\n    var canvas = document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    var pixelRatio = DEVICE_PIXEL_RATIO;\n    // Gradient starts on the left edge of each feature, and ends on the right.\n    // Coordinate origin is the top-left corner of the extent of the geometry, so\n    // we just divide the geometry's extent width by resolution and multiply with\n    // pixelRatio to match the renderer's pixel coordinate system.\n\n    var x1, x2, y1, y2;\n    var height = getHeight(extent2) / resolution * pixelRatio;\n    var width = getWidth(extent2) / resolution * pixelRatio;\n\n    var angle = (arc.getProperties().alpha + arc.getProperties().omega - 180) / 2;\n    var angleRad = angle * Math.PI / 180 + Math.PI / 2;\n    var rotateDegrees = Math.round((Math.PI - angleRad) * 360 / (2*Math.PI));\n    if (rotateDegrees < 0)\n        rotateDegrees = 360 + rotateDegrees;\n\n    if ((0 <= rotateDegrees && rotateDegrees < 45)) {\n        x1 = 0;\n        y1 = height / 2 * (45 - rotateDegrees) / 45;\n        x2 = width;\n        y2 = height - y1;\n    } else if ((45 <= rotateDegrees && rotateDegrees < 135)) {\n        x1 = width * (rotateDegrees - 45) / (135 - 45);\n        y1 = 0;\n        x2 = width - x1;\n        y2 = height;\n    } else if ((135 <= rotateDegrees && rotateDegrees < 225)) {\n        x1 = width;\n        y1 = height * (rotateDegrees - 135) / (225 - 135);\n        x2 = 0;\n        y2 = height - y1;\n    } else if ((225 <= rotateDegrees && rotateDegrees < 315)) {\n        x1 = width * (1 - (rotateDegrees - 225) / (315 - 225));\n        y1 = height;\n        x2 = width - x1;\n        y2 = 0;\n    } else if (315 <= rotateDegrees) {\n        x1 = 0;\n        y1 = height - height / 2 * (rotateDegrees - 315) / (360 - 315);\n        x2 = width;\n        y2 = height - y1;\n    }\n    var grad = context.createLinearGradient(x1, y1,\n                                            x2, y2);\n\n    grad.addColorStop(0, 'transparent');\n    grad.addColorStop(0.9, '#ffaa0077');\n    return grad;\n}\n\n\n/**\n * Function to create an image which can be displayed on the map\n * @param {URL} url\n * @param {Array<number>} position\n * @param {ol.proj.Projection} projection\n * @returns {ol.source.ImageStatic} the image\n */\nexport function createNewImage(url, position, projection) {\n    var imageStatic = new ImageStatic({\n        url: '',\n        imageLoadFunction : function(image){\n            image.getImage().src = url;\n        },\n        projection: projection,\n        imageExtent:[position[0]-pointRadius, position[1]-pointRadius, position[0]+pointRadius, position[1]+pointRadius]\n    });\n    return imageStatic;\n}\n\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/styles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 388,
    "kind": "variable",
    "name": "pointRadius",
    "memberof": "lib/styles.js",
    "static": true,
    "longname": "lib/styles.js~pointRadius",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{pointRadius}",
    "description": "Determines the size of the image",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 389,
    "kind": "variable",
    "name": "styleCache",
    "memberof": "lib/styles.js",
    "static": true,
    "longname": "lib/styles.js~styleCache",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/styles.js",
    "importStyle": null,
    "description": "Cache for style",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "variable",
    "name": "stylesTopo",
    "memberof": "lib/styles.js",
    "static": true,
    "longname": "lib/styles.js~stylesTopo",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{stylesTopo}",
    "description": "Styles to display XML data from cadastral information",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "setStyleTopo",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~setStyleTopo",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{setStyleTopo}",
    "description": "Sets the styles for the XML data from cadastral information",
    "lineNumber": 103,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.style.Style} the style"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.style.Style"
      ],
      "spread": false,
      "description": "the style"
    }
  },
  {
    "__docId__": 392,
    "kind": "function",
    "name": "setStylePolygonIsovist",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~setStylePolygonIsovist",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{setStylePolygonIsovist}",
    "description": "Sets the isovist style",
    "lineNumber": 121,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.style.Style}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.style.Style"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 393,
    "kind": "function",
    "name": "setStylePolygonColormapIsovist",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~setStylePolygonColormapIsovist",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{setStylePolygonColormapIsovist}",
    "description": "Sets the heatmap style",
    "lineNumber": 136,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.style.Style}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.style.Style"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "setStyleInput",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~setStyleInput",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{setStyleInput}",
    "description": "Sets the style for building segments on request",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.style.Style}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.style.Style"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "setStyleClusters",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~setStyleClusters",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{setStyleClusters}",
    "description": "Sets the style for clusters of pictures",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<ol.style.Style>} the style"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.Feature"
        ],
        "spread": false,
        "optional": false,
        "name": "feature",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<ol.style.Style>"
      ],
      "spread": false,
      "description": "the style"
    }
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "createCircleOutOverlay",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~createCircleOutOverlay",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{createCircleOutOverlay}",
    "description": "Circle around the picture when it visualizes a selected area on the map",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.Overlay}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.Overlay"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "setStyleArcs",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~setStyleArcs",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{setStyleArcs}",
    "description": "Sets the style for the visibility cones (pale orange gradient)",
    "lineNumber": 239,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.style.Style}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.style.Style"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 398,
    "kind": "function",
    "name": "gradient",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~gradient",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{gradient}",
    "description": "Function allowing to generate a gradient in OpenLayers (pale orange for arcs)",
    "lineNumber": 258,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{CanvasGradient} the gradient"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Arc"
        ],
        "spread": false,
        "optional": false,
        "name": "arc",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "CanvasGradient"
      ],
      "spread": false,
      "description": "the gradient"
    }
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "createNewImage",
    "memberof": "lib/styles.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/styles.js~createNewImage",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/styles.js",
    "importStyle": "{createNewImage}",
    "description": "Function to create an image which can be displayed on the map",
    "lineNumber": 320,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.source.ImageStatic} the image"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "URL"
        ],
        "spread": false,
        "optional": false,
        "name": "url",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.proj.Projection"
        ],
        "spread": false,
        "optional": false,
        "name": "projection",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.source.ImageStatic"
      ],
      "spread": false,
      "description": "the image"
    }
  },
  {
    "__docId__": 400,
    "kind": "file",
    "name": "lib/vectorlayercolormap.js",
    "content": "/**\n * @fileOverview Layer vector for heatmap of isovist intersection\n * @name vectorlayercolormap.js\n * @author Florent Grélard\n * @license\n */\nimport VectorLayer from 'ol/layer/Vector.js';\nimport * as obj from 'ol/obj.js';\nimport Style from 'ol/style/Style';\n\n/**\n * Layer type string identifier\n * @type {string}\n */\nvar LayerType = {\n    VectorHeatmap : 'VECTOR_COLORMAP'\n};\n\n/**\n * Layer vector class for heatmap of isovist intersection\n */\nexport default class VectorLayerColormap extends VectorLayer {\n\n\n    /**\n     * Constructor see {@link ol.layer.Vector}\n     * @param {Object} opt_options\n     */\n    constructor(opt_options) {\n        const options = opt_options ?\n                  opt_options : /** @type {module:ol/layer/Vector~Options} */ ({});\n\n        const baseOptions = obj.assign({}, options);\n\n        delete baseOptions.style;\n        delete baseOptions.renderBuffer;\n        delete baseOptions.updateWhileAnimating;\n        delete baseOptions.updateWhileInteracting;\n\n        super(baseOptions);\n\n        /**\n         * Style\n         * @type {ol.style.Style}\n         */\n        this.style = options.style || Style.defaultFunction;\n\n        /**\n         * Vector source (polygon isovists)\n         * @type {ol.source.Vector}\n         */\n        this.vectorSource = options.vectorSource;\n\n        /**\n         * Colors for heatmap\n         * @type {Array<string>}\n         */\n        this.colors = options.colors || ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n        /**\n         * Whether to scale the polygons as a function of zoom level\n         * @type {boolean}\n         */\n        this.scale = options.scale !== false;\n\n        /**\n         * Layer type\n         * @type {string}\n         */\n        this.type = LayerType.VectorHeatmap;\n\n        /**\n         * Image filled by the renderer and containing the polygon intersection\n         * @type {ImageCanvas}\n         */\n        this.image = null;\n    }\n\n    /**\n     * Getter for vector source\n     * @returns {ol.source.Vector}\n     */\n    getVectorSource() {\n        return this.vectorSource;\n    }\n\n    /**\n     * Setter for vector source\n     * @param {ol.source.Vector} vectorSource\n     */\n    setVectorSource(vectorSource) {\n        this.vectorSource = vectorSource;\n    }\n\n    /**\n     * Getter for colors\n     * @returns {Array<string>}\n     */\n    getColors() {\n        return this.colors;\n    }\n\n    /**\n     * Setter for colors\n     * @param {Array<string>} colors\n     */\n    setColors(colors) {\n        this.colors = colors;\n    }\n\n    /**\n     * Getter for style\n     * @returns {ol.style.Style}\n     */\n    getStyle() {\n        return this.style;\n    }\n\n    /**\n     * Setter for style\n     * @param {ol.style.Style} style\n     */\n    setStyle(style) {\n        this.style = style || Style.defaultFunction;\n    }\n\n    /**\n     * Getter for image\n     * @returns {ImageCanvas}\n     */\n    getImage() {\n        return this.image;\n    }\n\n    /**\n     * Setter for image\n     * @param {ImageCanvas} image\n     */\n    setImage(image) {\n        this.image = image;\n    }\n\n    /**\n     * Getter for whether to scale the polygons depending on zoom level\n     * @returns {boolean}\n     */\n    isScale() {\n        return this.scale;\n    }\n\n    /**\n     * Setter for whether to scale the polygons depending on zoom level\n     * @param {boolean} scale\n     */\n    setScale(scale) {\n        this.scale = scale;\n    }\n};\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/vectorlayercolormap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 401,
    "kind": "variable",
    "name": "LayerType",
    "memberof": "lib/vectorlayercolormap.js",
    "static": true,
    "longname": "lib/vectorlayercolormap.js~LayerType",
    "access": "public",
    "export": false,
    "importPath": "optimum/lib/vectorlayercolormap.js",
    "importStyle": null,
    "description": "Layer type string identifier",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 402,
    "kind": "class",
    "name": "VectorLayerColormap",
    "memberof": "lib/vectorlayercolormap.js",
    "static": true,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/vectorlayercolormap.js",
    "importStyle": "VectorLayerColormap",
    "description": "Layer vector class for heatmap of isovist intersection",
    "lineNumber": 22,
    "interface": false,
    "extends": [
      "ol/layer/Vector.js~VectorLayer"
    ]
  },
  {
    "__docId__": 403,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#constructor",
    "access": "public",
    "description": "Constructor see {@link ol.layer.Vector}",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "opt_options",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "style",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#style",
    "access": "public",
    "description": "Style",
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "ol.style.Style"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 405,
    "kind": "member",
    "name": "vectorSource",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#vectorSource",
    "access": "public",
    "description": "Vector source (polygon isovists)",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "ol.source.Vector"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 406,
    "kind": "member",
    "name": "colors",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#colors",
    "access": "public",
    "description": "Colors for heatmap",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 407,
    "kind": "member",
    "name": "scale",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#scale",
    "access": "public",
    "description": "Whether to scale the polygons as a function of zoom level",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "type",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#type",
    "access": "public",
    "description": "Layer type",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "image",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#image",
    "access": "public",
    "description": "Image filled by the renderer and containing the polygon intersection",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "ImageCanvas"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 410,
    "kind": "method",
    "name": "getVectorSource",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#getVectorSource",
    "access": "public",
    "description": "Getter for vector source",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.source.Vector}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.source.Vector"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "setVectorSource",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#setVectorSource",
    "access": "public",
    "description": "Setter for vector source",
    "lineNumber": 91,
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.source.Vector"
        ],
        "spread": false,
        "optional": false,
        "name": "vectorSource",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "getColors",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#getColors",
    "access": "public",
    "description": "Getter for colors",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array<string>}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array<string>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 414,
    "kind": "method",
    "name": "setColors",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#setColors",
    "access": "public",
    "description": "Setter for colors",
    "lineNumber": 107,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "getStyle",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#getStyle",
    "access": "public",
    "description": "Getter for style",
    "lineNumber": 115,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.style.Style}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.style.Style"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "setStyle",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#setStyle",
    "access": "public",
    "description": "Setter for style",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.style.Style"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "getImage",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#getImage",
    "access": "public",
    "description": "Getter for image",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ImageCanvas}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ImageCanvas"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "setImage",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#setImage",
    "access": "public",
    "description": "Setter for image",
    "lineNumber": 139,
    "params": [
      {
        "nullable": null,
        "types": [
          "ImageCanvas"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "isScale",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#isScale",
    "access": "public",
    "description": "Getter for whether to scale the polygons depending on zoom level",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "setScale",
    "memberof": "lib/vectorlayercolormap.js~VectorLayerColormap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormap.js~VectorLayerColormap#setScale",
    "access": "public",
    "description": "Setter for whether to scale the polygons depending on zoom level",
    "lineNumber": 155,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "file",
    "name": "lib/vectorlayercolormaprenderer.js",
    "content": "/**\n * @fileOverview Rendering of isovist intersection: actual computations\n * @name vectorlayercolormaprenderer.js\n * @author Florent Grélard\n * @license\n */\nimport CanvasImageLayerRenderer from 'ol/renderer/canvas/ImageLayer.js';\nimport LayerType from 'ol/LayerType.js';\nimport EventType from 'ol/events/EventType.js';\nimport {createCanvasContext2D} from 'ol/dom';\nimport * as transform from 'ol/transform';\nimport ImageStatic from 'ol/source/ImageStatic';\nimport * as render from 'ol/render';\nimport Polygon from 'ol/geom/Polygon';\nimport ImageCanvas from 'ol/ImageCanvas';\nimport Fill from 'ol/style/Fill';\nimport Style from 'ol/style/Style';\n\n/**\n * Class for rendering of isovist intersection,\n * based on the opacity at pixel level\n */\nexport default class VectorLayerColormapRenderer extends CanvasImageLayerRenderer {\n\n    /**\n     * Constructor\n     * @param {VectorLayerColorMap} imageLayer\n     */\n    constructor(imageLayer) {\n        super(imageLayer);\n\n        /**\n         * Gradient for heatmap (default jet : blue => red)\n         * @type {Uint8ClampedArray}\n         */\n        this.gradient = this.createGradient(imageLayer.colors);\n    };\n\n\n    /**\n     * Allows to create gradient from set of colors\n     * @param {Array<string>} colors\n     * @returns {Uint8ClampedArray} the gradient\n     */\n    createGradient(colors) {\n        var width = 1;\n        var height = 256;\n        var context = createCanvasContext2D(width, height);\n\n        var gradient = context.createLinearGradient(0, 0, width, height);\n        var step = 1 / (colors.length - 1);\n        for (var i = 0, ii = colors.length; i < ii; ++i) {\n            gradient.addColorStop(i * step, colors[i]);\n        }\n\n        context.fillStyle = gradient;\n        context.fillRect(0, 0, width, height);\n\n        return context.getImageData(0, 0, width, height).data;\n    }\n\n\n    /**\n     * Scales a point according to zoom level\n     * @param {Array<number>} coord the point\n     * @param {number} resolution current zoom level\n     * @param {Array} t transform\n     * @param {Array<number>} center center of transformation\n     */\n    scaleCoordinate(coord, resolution, t, center) {\n        var tCopy = t.slice();\n        var tmp = transform.create();\n\n        transform.translate(tmp, -center[0], -center[1]);\n        transform.apply(tmp, coord);\n\n        transform.reset(tmp);\n        var scale = (resolution > VectorLayerColormapRenderer.LIMIT_RESOLUTION) ? resolution / 2.0 : 1.0;\n        transform.scale(tmp, scale, scale);\n        transform.apply(tmp, coord);\n\n        transform.reset(tmp);\n        transform.translate(tmp, center[0], center[1]);\n        transform.apply(tmp, coord);\n    }\n\n    /**\n     * Converts a polygon in cartesian coordinates to rasterized coordinates in the image canvas\n     * @param {ol.geom.Polygon} polygon\n     * @param {Array} t transform\n     * @param {number} resolution\n     * @returns {Array} the pixel coordinates in the image\n     */\n    polygonToPixelCoordinates(polygon, t, resolution) {\n        var pixelCoordinates = [];\n        var coordinates = polygon.getCoordinates()[0];\n        for (var j = 0; j < coordinates.length; j++) {\n            var coord = coordinates[j].slice();\n            if (this.getLayer().isScale())\n                this.scaleCoordinate(coord, resolution, t, polygon.getFirstCoordinate());\n            var pixelCoordinate = transform.apply(t, coord);\n            pixelCoordinates.push(pixelCoordinate);\n        }\n        return pixelCoordinates;\n    }\n\n\n    /**\n     * Adaptative opacity for increasing number of photographs\n     * @param {number} maxOpacity the maximum opacity read in the image\n     * @param {CanvasImmediateRenderer} renderer\n     * @param {ol.style.Style} style\n     */\n    changeOpacityScale(maxOpacity, renderer, style) {\n        var color = style.getFill().getColor().toString();\n        var rgba = color.split(\",\");\n        var a = rgba[rgba.length-1].split(\")\")[0];\n        var anum = Number.parseFloat(a);\n        if (maxOpacity < 200) {\n            anum += (anum + 0.05 < 1) ? 0.05 : 0;\n        } else if (maxOpacity >= 250) {\n            anum -= (anum - 0.05 > 0) ? 0.05 : 0;\n        }\n        var newColor = rgba[0] + \",\" + rgba[1] + \",\" + rgba[2] + \",\" + anum.toString() + \")\";\n        var fill = new Fill({\n            color: newColor\n        });\n        style.setFill(fill);\n        this.getLayer().setStyle([style]);\n        renderer.setStyle(style);\n    }\n\n    /**\n     * Isovist intersection to heatmap\n     * @param {CanvasImmediateRenderer} renderer\n     * @param {CanvasRenderingContext2D} context\n     * @param {ol.style.Style} style\n     * @param {number} resolution\n     * @param {number} width\n     * @param {number} height\n     */\n    rasterOpacityToContextColorMap(renderer, context, style, resolution, width, height) {\n        var image = context.getImageData(0, 0, width, height);\n        var view8 = image.data;\n        var i, length, alpha;\n        var maxOpacity = 0;\n        for (i = 0, length = view8.length; i < length; i += 4) {\n            var alphaChar = view8[i+3];\n            if (alphaChar > maxOpacity) {\n                maxOpacity = alphaChar;\n            }\n            alpha = alphaChar * 4;\n            if (alpha) {\n                for (var j = 0; j < 3; j++)\n                    view8[i+j] = this.gradient[alpha + j];\n            }\n        }\n        this.changeOpacityScale(maxOpacity, renderer, style);\n        context.putImageData(image, 0,0);\n    }\n\n    /**\n     * Converts the context to a static image that can be displayed on the map layer ({@link VectorLayerColormap})\n     * @param {CanvasRenderingContext2D} context\n     * @param {Array<number>} extent image extent\n     * @returns {ol.source.ImageStatic}\n     */\n    contextToImageStatic(context, extent) {\n        var dataURL = context.canvas.toDataURL();\n\n        var imageStatic = new ImageStatic({\n            url: '',\n            imageLoadFunction : function(image){\n                image.getImage().src = dataURL;\n            },\n            imageExtent: extent\n        });\n        return imageStatic;\n    }\n\n    /**\n     * Prepare the frame to display image when available\n     * @param {Object} frameState\n     * @param {Object} layerState\n     * @returns {boolean} frame is ready to be displayed\n     */\n    prepareFrame(frameState, layerState) {\n        var pixelRatio = frameState.pixelRatio;\n        var width = frameState.size[0] * pixelRatio;\n        var height = frameState.size[1] * pixelRatio;\n        var t = frameState.coordinateToPixelTransform.slice();\n        var resolution = frameState.viewState.resolution;\n        var extent = frameState.extent;\n        var context = createCanvasContext2D(width, height);\n        var canvas = context.canvas;\n        var renderer = render.toContext(context);\n\n        var style = this.getLayer().getStyle();\n        var actualStyle;\n        if (Array.isArray(style)) {\n            actualStyle = style[0];\n        }\n        else {\n            if (Array.isArray(style())) {\n                actualStyle = style()[0];\n            } else {\n                actualStyle = style();\n            }\n        }\n        actualStyle.setStroke();\n        renderer.setStyle(actualStyle);\n        var features = this.getLayer().getVectorSource().getFeatures();\n        for (var i = 0; i < features.length; i++) {\n            var feature = features[i];\n            var pixelCoordinates = this.polygonToPixelCoordinates(feature.getGeometry(), t, resolution);\n            renderer.drawGeometry(new Polygon([pixelCoordinates]));\n        }\n        this.rasterOpacityToContextColorMap(renderer, context, actualStyle, resolution, width, height);\n\n        /**\n         * Image passed onto the layer\n         * @type {ImageCanvas}\n         */\n        this.image_ = new ImageCanvas(extent, resolution, pixelRatio, context.canvas);\n        this.getLayer().setImage(this.image_);\n        return true;\n    }\n\n    /**\n     * Whether this renderer handles a given layer\n     * @param {ol.source.Layer} layer\n     * @returns {boolean} whether layer is handled by this renderer\n     */\n    static handles(layer) {\n        return layer.getType() === \"VECTOR_COLORMAP\";\n    }\n\n    /**\n     * Creates an instance of this renderer\n     * @param {Object} mapRenderer not used\n     * @param {VectorLayerColormap} layer\n     * @returns {VectorLayerColormapRenderer}\n     */\n    static create(mapRenderer, layer) {\n        return new VectorLayerColormapRenderer((layer));\n    }\n\n    /**\n     * Returns the limit resolution for this renderer\n     * @returns {number} the limit resolution\n     */\n    static get LIMIT_RESOLUTION() {\n        return 3;\n    }\n}\n",
    "static": true,
    "longname": "/home/fgrelard/src/Optimum/js/lib/vectorlayercolormaprenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 426,
    "kind": "class",
    "name": "VectorLayerColormapRenderer",
    "memberof": "lib/vectorlayercolormaprenderer.js",
    "static": true,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "access": "public",
    "export": true,
    "importPath": "optimum/lib/vectorlayercolormaprenderer.js",
    "importStyle": "VectorLayerColormapRenderer",
    "description": "Class for rendering of isovist intersection,\nbased on the opacity at pixel level",
    "lineNumber": 23,
    "interface": false,
    "extends": [
      "ol/renderer/canvas/ImageLayer.js~CanvasImageLayerRenderer"
    ]
  },
  {
    "__docId__": 427,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#constructor",
    "access": "public",
    "description": "Constructor",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "VectorLayerColorMap"
        ],
        "spread": false,
        "optional": false,
        "name": "imageLayer",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 428,
    "kind": "member",
    "name": "gradient",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#gradient",
    "access": "public",
    "description": "Gradient for heatmap (default jet : blue => red)",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "Uint8ClampedArray"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "createGradient",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#createGradient",
    "access": "public",
    "description": "Allows to create gradient from set of colors",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Uint8ClampedArray} the gradient"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<string>"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Uint8ClampedArray"
      ],
      "spread": false,
      "description": "the gradient"
    }
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "scaleCoordinate",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#scaleCoordinate",
    "access": "public",
    "description": "Scales a point according to zoom level",
    "lineNumber": 70,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "coord",
        "description": "the point"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": "current zoom level"
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "transform"
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": "center of transformation"
      }
    ],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "polygonToPixelCoordinates",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#polygonToPixelCoordinates",
    "access": "public",
    "description": "Converts a polygon in cartesian coordinates to rasterized coordinates in the image canvas",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} the pixel coordinates in the image"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.geom.Polygon"
        ],
        "spread": false,
        "optional": false,
        "name": "polygon",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "transform"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "the pixel coordinates in the image"
    }
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "changeOpacityScale",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#changeOpacityScale",
    "access": "public",
    "description": "Adaptative opacity for increasing number of photographs",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "maxOpacity",
        "description": "the maximum opacity read in the image"
      },
      {
        "nullable": null,
        "types": [
          "CanvasImmediateRenderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.style.Style"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 433,
    "kind": "method",
    "name": "rasterOpacityToContextColorMap",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#rasterOpacityToContextColorMap",
    "access": "public",
    "description": "Isovist intersection to heatmap",
    "lineNumber": 142,
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasImmediateRenderer"
        ],
        "spread": false,
        "optional": false,
        "name": "renderer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ol.style.Style"
        ],
        "spread": false,
        "optional": false,
        "name": "style",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 434,
    "kind": "method",
    "name": "contextToImageStatic",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#contextToImageStatic",
    "access": "public",
    "description": "Converts the context to a static image that can be displayed on the map layer ({@link VectorLayerColormap})",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ol.source.ImageStatic}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "CanvasRenderingContext2D"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Array<number>"
        ],
        "spread": false,
        "optional": false,
        "name": "extent",
        "description": "image extent"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ol.source.ImageStatic"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 435,
    "kind": "method",
    "name": "prepareFrame",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#prepareFrame",
    "access": "public",
    "description": "Prepare the frame to display image when available",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} frame is ready to be displayed"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "frameState",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "layerState",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "frame is ready to be displayed"
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "image_",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "static": false,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer#image_",
    "access": "public",
    "description": "Image passed onto the layer",
    "lineNumber": 224,
    "type": {
      "nullable": null,
      "types": [
        "ImageCanvas"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 437,
    "kind": "method",
    "name": "handles",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer.handles",
    "access": "public",
    "description": "Whether this renderer handles a given layer",
    "lineNumber": 234,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} whether layer is handled by this renderer"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ol.source.Layer"
        ],
        "spread": false,
        "optional": false,
        "name": "layer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "whether layer is handled by this renderer"
    }
  },
  {
    "__docId__": 438,
    "kind": "method",
    "name": "create",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer.create",
    "access": "public",
    "description": "Creates an instance of this renderer",
    "lineNumber": 244,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{VectorLayerColormapRenderer}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "mapRenderer",
        "description": "not used"
      },
      {
        "nullable": null,
        "types": [
          "VectorLayerColormap"
        ],
        "spread": false,
        "optional": false,
        "name": "layer",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "VectorLayerColormapRenderer"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 439,
    "kind": "get",
    "name": "LIMIT_RESOLUTION",
    "memberof": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "lib/vectorlayercolormaprenderer.js~VectorLayerColormapRenderer.LIMIT_RESOLUTION",
    "access": "public",
    "description": "Returns the limit resolution for this renderer",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} the limit resolution"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "the limit resolution"
    },
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# Projet Optimum\n\nCode for the client-side of the [Optimum Project](http://liris.univ-lyon2.fr/optimum/index.php/geolocalisation/)\n\n## Getting Started\n\nIn order to be used properly, the Optimum server must be running (currently on Eidolon). See the [Optimum-server](https://github.com/fgrelard/Optimum-server) repository for more information.\n\nInstall the dependencies :\n```\nnpm install\n```\n\nCompile the Javascript ES modules into a single bundle file, thanks to [`rollup`](https://github.com/rollup/rollup) :\n```\nnpm run start\n```\n\nThen, open the `index.html` file in your browser. \n\n\n\n\n",
    "longname": "/home/fgrelard/src/Optimum/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"optimum\",\n  \"version\": \"0.0.1\",\n  \"description\": \"Projet Optimum\",\n  \"scripts\": {\n    \"build\": \"rollup --no-treeshake --config rollup.config.js\",\n    \"start\": \"rollup --config rollup.config.js --watch\"\n  },\n  \"devDependencies\": {\n    \"rollup\": \"^0.41.6\",\n    \"rollup-plugin-commonjs\": \"^7.0.0\",\n    \"rollup-plugin-inject\": \"^2.2.0\",\n    \"rollup-plugin-node-resolve\": \"^2.1.1\",\n    \"rollup-plugin-uglify-es\": \"0.0.1\",\n    \"rollup-watch\": \"^4.3.1\"\n  },\n  \"dependencies\": {\n    \"bigdecimal\": \"^0.6.1\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"inherits\": \"^2.0.3\",\n    \"interactjs\": \"^1.3.4\",\n    \"jquery\": \"^3.3.1\",\n    \"jstree\": \"^3.3.5\",\n    \"muuri\": \"^0.5.4\",\n    \"npm\": \"^5.8.0\",\n    \"ol\": \"^5.3.1\",\n    \"ol-ext\": \"^3.1.0\",\n    \"ol-layerswitcher\": \"^2.0.0\",\n    \"papaparse\": \"^4.3.7\",\n    \"rbush\": \"^2.0.2\",\n    \"semver\": \"^5.6.0\",\n    \"three\": \"^0.102.1\",\n    \"transpose\": \"0.0.2\",\n    \"util\": \"^0.10.3\"\n  }\n}\n",
    "longname": "/home/fgrelard/src/Optimum/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]